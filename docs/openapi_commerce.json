{
  "openapi": "3.0.1",
  "info": {
    "title": "Cart/Checkout/Quote",
    "description": "<div id=\"overview_COMMERCE\">\n            <h2>COMMERCE</h2>\n            <p>The Commerce API interacts with the commerce entities of your tenant, including shoppers's active shopping\n                carts, checkouts, submitted orders, wishlists, and returns as well as B2B quotes.</p>\n            <p>Use the <strong>Carts</strong> resource to manage storefront shopping carts as shoppers add and remove items for purchase.\n                Each time a shopper's cart is modified, the Carts resource updates the estimated total with any\n                applicable\n                discounts.</p>\n            <p>Use the <strong>Channels</strong> and <strong>Channel Groups</strong> resources to manage the channels a company uses to create logical\n                commercial business divisions based on region or types of sales, such as \"US Online,\" \"Amazon,\" or \"EMEA\n                Retail.\"\n                All orders include a channel association that enables the company to perform financial reporting for\n                each defined channel.\n                Because channels are managed at the tenant level, you must associate all the tenant's sites with a\n                channel. Sites that do not\n                have a defined channel association cannot successfully submit orders.</p>\n            <p>Use the <strong>Checkouts</strong> resource to track a shopper's order items and their intended destinations on sites that\n                have the multiple shipment feature enabled.</p>\n            <p>Use the <strong>Orders</strong> resource to manage all components of order processing, payment, and order-level\n                fulfillment.</p>\n            <p>Use the <strong>Quotes</strong> resource to support B2B functionality by managing order quotes, similar to wishlists.</p>\n            <p>Use the <strong>Returns</strong> resource to manage returned items that were previously fufilled. Returns can include any\n                number of items associated with an original\n                order. Each return must either be associated with an original order or a product definition to represent\n                each returned item.</p>\n            <p>Use the <strong>Wish Lists</strong> resource to manage the shopper wish lists of products associated with a customer\n                account. Although customer accounts are managed at the tenant\n                level, the system stores shopper wish lists at the site level. This enables the same customer to have\n                wish lists for each of a merchant's sites. The <strong>Wish List Items</strong>\n                resource allows you to manage the individual items in a wish list.</p>\n        </div>",
    "version": "1.0.1"
  },
  "paths": {
    "/commerce/carts/summary": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Get Cart Summary",
        "description": "Retrieves the number of items in the active cart, total cost of items in the cart and the cart expiration. (Anonymous shoppers cart expires in 14 days.)",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/commerce/carts/user/{userId}/summary": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Get User Cart Summary",
        "description": "Retrieves the number of items in the active cart, total cost of items in the cart and the cart expiration by userId. All anonymous idle carts that do not proceed to checkout expire after 14 days.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/{cartId}/summary": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Get Cart Summary By Cart Id",
        "description": "Retrieves the number of items in the specified cart, total cost of items in the cart, and whether the cart has expired by cartId. All anonymous idle carts that do not proceed to checkout expire after 14 days.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/user/{userId}": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Get User Cart",
        "description": "Retrieves the details of the user's cart from the user ID.Shoppers are not allowed to execute this call. If this ever changes, then auth logic will need to be added",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Get Or Create User Cart",
        "description": "Get the current cart or create a new cart for the user specified by user ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Cart"
        ],
        "summary": "Update User Cart",
        "description": "Updates the cart of the user specified by user ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the cart to update. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cart"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/current": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Get Or Create Cart",
        "description": "Retrieves a cart's contents for the current shopper.  If the shopper does not have an active cart on the site, one is created.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Cart"
        ],
        "summary": "Update Cart",
        "description": "Updates the cart of the current shopper.",
        "requestBody": {
          "description": "All properties of the cart to update. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cart"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Delete Current Cart",
        "description": "Deletes the cart of the current shopper.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/{cartId}": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Get Cart",
        "description": "Retrieves the details of the cart specified by cart ID.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Cart"
        ],
        "summary": "Update Cart By Cart Id",
        "description": "Updates the cart specified by cart ID",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the cart to update. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cart"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Delete Cart",
        "description": "Deletes the cart by cart ID.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/{userId}": {
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Delete User Cart",
        "description": "Deletes the cart of the user by user ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/{cartId}/rejectautodiscount/{discountId}": {
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Reject Suggested Discount",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique Identifier of the Cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        },
        "description": "Reject Suggested Discount"
      }
    },
    "/commerce/carts/{cartId}/coupons/{couponCode}": {
      "put": {
        "tags": [
          "Cart"
        ],
        "summary": "Apply Coupon",
        "description": "Apply coupon to the cart.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code that the customer supplies to get the discounted price.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Remove Coupon",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        },
        "description": "Remove a coupon that had been previously applied to the cart."
      }
    },
    "/commerce/carts/{cartId}/coupons": {
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Remove Coupons",
        "description": "Removes all coupons that had been previously applied to the cart.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/current/extendedproperties": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Get Extended Properties",
        "description": "Get extended properties on a cart.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Adds Extended Properties",
        "description": "Add Extended Properties on the current cart. Store an arbitrary number of cart extended properties such as tracking strings, marketing sources, affiliates, sales personnel/data, and so on, on a per cart basis. Each cart may have none, one, or more than one entry in the extended properties collection, and all values in the extended properties collection are represented as strings. When you create an order from a cart, all extended properties are retained from the cart and copied to the order.",
        "requestBody": {
          "description": "Extended properties",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Cart"
        ],
        "summary": "Update Extended Properties",
        "description": "Update extended properties on the current cart.",
        "parameters": [
          {
            "name": "upsert",
            "in": "query",
            "description": "Allow insert or update",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Extended properties",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Delete Extended Properties.",
        "description": "Delete extended properties on the current cart.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/current/extendedproperties/{key}": {
      "put": {
        "tags": [
          "Cart"
        ],
        "summary": "Update Extended Property",
        "description": "Update extended property on the current cart using the key.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Unique identifier of the cart item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upsert",
            "in": "query",
            "description": "Extended property",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Extended property",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedProperty"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Delete Extended Property",
        "description": "Delete extended property on the current cart using the key.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Unique identifier of the extended property",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/current/items": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Get Cart Items",
        "description": "Retrieves the details of each cart item such as the product name, stock count, unit price, discounts, quantity ordered and total price",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItemCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItemCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItemCollection"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Remove All Cart Items",
        "description": "Clears all the cart items from the cart of a current shopper.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Add Item To Cart",
        "description": "Adds a product or other item to the cart of the current shopper.",
        "parameters": [
          {
            "name": "zipCode",
            "in": "query",
            "description": "Zip Code used for inventory reservation if cart having STH items.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the new cart item. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/{cartId}/items": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Get Cart Items By CartId",
        "description": "Retrieves the details of each cart item such as the product name, stock count, unit price, discounts, quantity ordered and total price for the cart by cartId.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItemCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItemCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItemCollection"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Remove All Cart Items By CartId",
        "description": "Clears all the cart items from the cart by the cartId.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Add Item To Cart By CartId",
        "description": "Adds a product or a cart item to the cart specified by the cart ID.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zipCode",
            "in": "query",
            "description": "Zip Code used for inventory reservation if cart having STH items.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the new cart item. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/current/items/{cartItemId}": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Get Cart Item",
        "description": "Retrieves an individual cart item from the cart of the current shopper specified by its cart item Id.",
        "parameters": [
          {
            "name": "cartItemId",
            "in": "path",
            "description": "Unique identifier of the cart item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Cart"
        ],
        "summary": "Update Cart Item",
        "description": "Updates a particular cart item in the cart of the current shopper.",
        "parameters": [
          {
            "name": "cartItemId",
            "in": "path",
            "description": "Unique identifier of the cart item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zipCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the updated cart item. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Delete Cart Item",
        "description": "Removes a particular cart item from the cart of the current shopper.",
        "parameters": [
          {
            "name": "cartItemId",
            "in": "path",
            "description": "Unique identifier of the cart item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/{cartId}/items/{cartItemId}": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Get Cart Item By CartId",
        "description": "Retrieves an individual cart item from the cart by cart Id and cart item Id.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartItemId",
            "in": "path",
            "description": "Unique identifier of the cart item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Cart"
        ],
        "summary": "Update Cart Item By CartId",
        "description": "Updates a particular cart item in the cart specified by card Id.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartItemId",
            "in": "path",
            "description": "Unique identifier of the cart item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zipCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the updated cart item. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Delete Cart Item By CartId",
        "description": "Removes a particular cart item from the cart specified by cart item Id and cart Id.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartItemId",
            "in": "path",
            "description": "Unique identifier of the cart item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/current/bulkitems": {
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Add Items To Cart",
        "description": "Adds multiple cart items to the cart of the current shopper.",
        "parameters": [
          {
            "name": "throwErrorOnInvalidItems",
            "in": "query",
            "description": "When set to true none of the items will be added when some items are invalid. when set to false valid items are added and invalid items are removed",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "zipCode",
            "in": "query",
            "description": "Zip Code used for inventory reservation if cart having STH items.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The items to add to the cart",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/{cartId}/bulkitems": {
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Add Items To Cart By CartId",
        "description": "Adds multiple cart items to the cart specified by cartId.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "throwErrorOnInvalidItems",
            "in": "query",
            "description": "When set to true none of the items will be added when some items are invalid. when set to false valid items are added and invalid items are removed",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "zipCode",
            "in": "query",
            "description": "Zip Code used for inventory reservation if cart having STH items.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The items to add to the cart",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/current/items/{cartItemId}/{quantity}": {
      "put": {
        "tags": [
          "Cart"
        ],
        "summary": "Update Cart Item Quantity",
        "description": "Updates the quantity of an individual cart item in the cart of the current shopper.",
        "parameters": [
          {
            "name": "cartItemId",
            "in": "path",
            "description": "Unique identifier of the cart item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quantity",
            "in": "path",
            "description": "New quantity for the specified cart item.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/{cartId}/items/{cartItemId}/{quantity}": {
      "put": {
        "tags": [
          "Cart"
        ],
        "summary": "Update Cart Item Quantity By CartId",
        "description": "Updates the quantity of an individual cart item in the cart specified by cart Id.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartItemId",
            "in": "path",
            "description": "Unique identifier of the cart item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quantity",
            "in": "path",
            "description": "New quantity for the specified cart item.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/current/messages": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Get Messages",
        "description": "Retrieves messages to and from the current shopper. These are messages supplied by the system to notify the shopper of price increases or decreases or product unavailability.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartChangeMessageCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartChangeMessageCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartChangeMessageCollection"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Remove All Messages",
        "description": "Removes all messages associated with the cart of the current shopper.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/current/messages/{messageId}": {
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Remove Message",
        "description": "Removes a single message associated with the cart of the current shopper specified by messageId.",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Unique identifier of the message to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/channels": {
      "get": {
        "tags": [
          "Channel"
        ],
        "summary": "Get Channels",
        "description": "Retrieves a list of channels according to any specified filter criteria and sort options. All orders include a channel association that enables the company to perform financial reporting for each defined channel. Because channels are managed at the tenant level, you must associate all the tenant's sites with a channel. Sites that do not have a defined channel association cannot successfully submit orders.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, \r\n            gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Channel"
        ],
        "summary": "Creates Channel",
        "description": "Creates a new channel that defines a new logical business division to use for financial reporting.",
        "requestBody": {
          "description": "All properties of the channel to place.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Channel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/commerce/channels/{code}": {
      "get": {
        "tags": [
          "Channel"
        ],
        "summary": "Get Channel",
        "description": "Retrieves the details of an channel specified by the channel ID.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Unique identifier of the channel whose details you want.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Channel"
        ],
        "summary": "Update Channel",
        "description": "Updates a channel.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "ID of the channel to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the channel to place.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Channel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Channel"
        ],
        "summary": "Delete Channel",
        "description": "Deletes a channel specified by channel Id. After deleting this channel, assign its associated sites to another channel. Because channels are managed at the tenant level, you must associate all the tenant's sites with a channel. Sites that do not have a defined channel association cannot successfully submit orders.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "ID of the channel to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/channelgroups": {
      "get": {
        "tags": [
          "ChannelGroup"
        ],
        "summary": "Get Channel Groups",
        "description": "Retrieves a list of channel groups according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, \r\n            gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroupCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroupCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroupCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ChannelGroup"
        ],
        "summary": "Creates Channel Group.",
        "description": "Creates a new channel group.",
        "requestBody": {
          "description": "All properties of the channel group to place.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/commerce/channelgroups/{code}": {
      "get": {
        "tags": [
          "ChannelGroup"
        ],
        "summary": "Get Channel Group",
        "description": "Retrieves the details of an channel group specified by the code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Unique identifier of the channel whose details you want.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ChannelGroup"
        ],
        "summary": "Updates Channel Group",
        "description": "Updates a specific channel group.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "ID of the channel to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the channel group to place.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ChannelGroup"
        ],
        "summary": "Delete Channel Group",
        "description": "Deletes a channel grop specified by group code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "ID of the channel to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/attributes": {
      "post": {
        "tags": [
          "Checkout"
        ],
        "summary": "Create Checkout Attributes",
        "description": "Creates list of checkout attributes specified by checkout Id.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Checkout"
        ],
        "summary": "Get Checkout Attributes",
        "description": "Gets the list of attributes specified by checkout Id.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Checkout"
        ],
        "summary": "Update Checkout Attribute",
        "description": "Updates the list of checkout attributes specified by checkout id and removes the missing attributes if not passed when removeMissing flag is set.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "removeMissing",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}": {
      "get": {
        "tags": [
          "Checkout"
        ],
        "summary": "Get Checkout",
        "description": "Retrieves the details of a checkout specified by the checkout ID.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout whose details you want.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Checkout"
        ],
        "summary": "Update Checkout",
        "description": "Updates the details of a checkout specified by the checkout ID.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout whose details you want.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Checkout that needs update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Checkout"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts": {
      "get": {
        "tags": [
          "Checkout"
        ],
        "summary": "Get Checkouts",
        "description": "Retrieves a list of checkouts according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, \r\n            gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Text to perform a search on",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "description": "Limit of the records to include in a search, used for global search",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Checkout"
        ],
        "summary": "Create Checkout From Cart",
        "description": "Creates a new checkout from an existing cart, that is, when the customer chooses to proceed to checkout.",
        "parameters": [
          {
            "name": "cartId",
            "in": "query",
            "description": "Unique identifier of the cart. This is the original cart ID expressed as a GUID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/shippingMethods": {
      "get": {
        "tags": [
          "Checkout"
        ],
        "summary": "Get Available Shipping Methods",
        "description": "Retrieves available shipping methods for groupings. Typically used to display available shipping method options on the checkout page.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout whose shipping methods you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckoutGroupRates"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckoutGroupRates"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckoutGroupRates"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Checkout"
        ],
        "summary": "Set Shipping Methods",
        "description": "Sets the shipping method for specified groupings.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout whose shipping methods you want to set.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pairings of checkout group to shipping method",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CheckoutGroupShippingMethod"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/actions": {
      "get": {
        "tags": [
          "Checkout"
        ],
        "summary": "Get Available Actions",
        "description": "Retrieves available actions which depends on the status of the checkout.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout whose available actions you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Checkout"
        ],
        "summary": "Perform Checkout Action",
        "description": "Perform an action on the checkout. Available actions depend on the current state of the checkout. If in doubt, get a list of available checkout actions first.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The action to perform",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/digitalWallet/{digitalWalletType}": {
      "put": {
        "tags": [
          "Checkout"
        ],
        "summary": "Process Digital Wallet",
        "description": "Processes the digital wallet sent specified by checkout id and digital     wallet type.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digitalWalletType",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DigitalWallet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/priceList": {
      "put": {
        "tags": [
          "Checkout"
        ],
        "summary": "Change Checkout Price List",
        "description": "Changes the pricelist associated with a checkout.The desired price list code should be specified on the ApiContext.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout to change",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The code for the pricelist to apply",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/email/resend": {
      "post": {
        "tags": [
          "Checkout"
        ],
        "summary": "Resend Checkout Confirmation Email",
        "description": "Resends email on checkout confirmation.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/coupons/{couponCode}": {
      "put": {
        "tags": [
          "Checkout"
        ],
        "summary": "Apply Coupon",
        "description": "Apply a coupon to the Checkout.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the Checkout with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code that the customer supplies to get the discounted price.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Checkout"
        ],
        "summary": "Remove Coupon",
        "description": "Removes a coupon that had been previously applied to the checkout.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/coupons": {
      "delete": {
        "tags": [
          "Checkout"
        ],
        "summary": "Remove Coupons",
        "description": "Removes all coupons that had been previously applied to the checkout.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the order with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/destinations/{destinationId}": {
      "get": {
        "tags": [
          "Checkout"
        ],
        "summary": "Get Destination",
        "description": "Gets a destination specified by the checkout Id and destination Id.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destinationId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Checkout"
        ],
        "summary": "Update Destination",
        "description": "Updates a destination specified by checkout Id and destination Id.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destinationId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeDestination"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Checkout"
        ],
        "summary": "Remove Destination",
        "description": "Removes a destination specified by checkout Id and destination Id.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destinationId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/destinations": {
      "get": {
        "tags": [
          "Checkout"
        ],
        "summary": "Get Destinations",
        "description": "Gets all the destinations specified by the checkout Id.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeDestination"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeDestination"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeDestination"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Checkout"
        ],
        "summary": "Add Destination",
        "description": "Adds a specific destination to the checkout.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeDestination"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/items": {
      "post": {
        "tags": [
          "Checkout"
        ],
        "summary": "Add Checkout Item",
        "description": "Adds a product or other item to the checkout of the current shopper.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of the checkout to add an item to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the new item. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/items/{itemId}": {
      "delete": {
        "tags": [
          "Checkout"
        ],
        "summary": "Delete Checkout Item",
        "description": "Removes a particular item from the checkout of the current shopper.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "Unique identifier of the item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/items/{itemId}/split": {
      "post": {
        "tags": [
          "Checkout"
        ],
        "summary": "Split Item",
        "description": "Splits an existing item into two. The new item's quantity will be !:quantity and the original item's quantity will be reduced accordingly.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of the checkout containing the item to split",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "The ID of the item to split",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "What quantity to split off. Defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/items/{itemId}/destination/{destinationId}": {
      "put": {
        "tags": [
          "Checkout"
        ],
        "summary": "Update Item Destination",
        "description": "Associate an item to a destination.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of the checkout",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "ID of the item to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destinationId",
            "in": "path",
            "description": "ID of the destination",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/items/{itemId}/subscriptionInfo": {
      "put": {
        "tags": [
          "Checkout"
        ],
        "summary": "Update Item Subscription Info",
        "description": "Updates the subscription info on the Item.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of the checkout",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "ID of the item to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Mozu.CommerceRuntime.Contracts.Subscriptions.SubscriptionInfo to use as update source on Item",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/items/destinations": {
      "post": {
        "tags": [
          "Checkout"
        ],
        "summary": "Bulk Update Item Destinations",
        "description": "Associate items to destinations in bulk.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of the checkout",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pairings of destination IDs with their associated items by ID",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ItemsForDestination"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/items/{itemId}/deliverydate": {
      "put": {
        "tags": [
          "Checkout"
        ],
        "summary": "Update the Delivery Date of the Item",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of the Checkout",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "ID of the item to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Delivery DateTme to update to",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        },
        "description": "Update the Delivery Date of the Item"
      }
    },
    "/commerce/checkouts/{checkoutId}/items/deliverydates": {
      "post": {
        "tags": [
          "Checkout"
        ],
        "summary": "Update Delivery Dates of Items in bulk",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of the Checkout",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pairings of Delivery Date and associated ItemIds",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ItemsAndDeliveryDates"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        },
        "description": "Update delivery dates of items in bulk"
      }
    },
    "/commerce/checkouts/{checkoutId}/items/{itemId}/upsert-inventory-tags": {
      "put": {
        "tags": [
          "Checkout"
        ],
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InventoryTags"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        },
        "summary": "Upsert Inventory Tags",
        "description": "Upsert Inventory Tags"
      }
    },
    "/commerce/checkouts/{checkoutId}/items/{itemId}/updateGiftInfo": {
      "put": {
        "tags": [
          "Checkout"
        ],
        "summary": "Update Checkout Item Gift Information",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "Unique identifier of the checkout item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Mozu.CommerceRuntime.Contracts.Orders.GiftInfo to use as the update source",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GiftInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        },
        "description": "Updates the gift information on a checkout item"
      }
    },
    "/commerce/checkouts/{checkoutId}/payments/actions": {
      "post": {
        "tags": [
          "Checkout"
        ],
        "summary": "Create Payment Action",
        "description": "Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout whose payment action you want to change.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Action to be performed, along with any metadata.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/payments/{paymentId}/actions": {
      "post": {
        "tags": [
          "Checkout"
        ],
        "summary": "Perform Payment Action",
        "description": "Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction. \\r\\nIf in doubt, get a list of available payment actions first (such as AuthAndCapture, AuthorizePayment, CapturePayment, VoidPayment, CreditPayment, RequestCheck, ApplyCheck, or DeclineCheck). Note that for order management-only systems that use No-Operation payment gateways, such as due to the payments being processed by an external storefront or service instead of UCP, these actions will not actually be performed by UCP and instead will be automatically marked as a success.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout whose payment action you want to change.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Action to be performed, along with any metadata.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/notes/{noteId}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update Order Note",
        "description": "Updates a specific order note for an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose note you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of the note whose text you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Text of the note.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderNote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Delete Order Note",
        "description": "Deletes a specific order note on an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose note you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of the note whose text you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Order Note",
        "description": "Retrieves a specific order note from an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose note you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of the note whose text you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/packages": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Apply Package to Order",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Package to create and add to the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimePackage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              }
            }
          }
        },
        "description": "Applies a package to an existing order."
      }
    },
    "/commerce/orders/{orderId}/packages/{packageId}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update Order Package",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package to update on the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Package content to update on the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimePackage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              }
            }
          }
        },
        "description": "Updates an order package."
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Delete Order Package",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package to remove from the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete an order package."
      },
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Order Package",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package to remove from the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              }
            }
          }
        },
        "description": "Get an order package."
      }
    },
    "/commerce/orders/{orderId}/packages/{packageId}/label": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Order Package Label",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package to remove from the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Get an order package label"
      }
    },
    "/commerce/orders/{orderId}/packages/{packageId}/actions": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieves Available Fulfillment Actions",
        "description": "Retrieves the available fulfillment actions.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order on which to get a list of available actions.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package ID to get fulfillment actions for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/payments/actions": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create Payment Action",
        "description": "Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose payment action you want to change.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Action to be performed, along with any metadata.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/payments/{paymentId}/actions": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Perform Payment Action",
        "description": "Performs a specific payment action. Available actions depend on the current status of the payment transaction. \r\nIf in doubt, get a list of available payment actions first.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose payment action you want to change.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Action to be performed, along with any metadata.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Available Payment Actions",
        "description": "Retrieves available payment actions which depends on the status of the order's payment transaction. \r\nPossible actions can be \"Create,\" \"Capture,\" \"Void,\" \"AuthCapture,\" or \"ReceiveCheck.\"",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose available payment actions you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/payments/{paymentId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Payment",
        "description": "Retrieves a specific payment transaction from the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose payment transaction you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "Unique identifier of the payment transaction you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/payments": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Payments",
        "description": "Retrieves payment transactions for an order. Allows filtering and sorting.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose payment transactions you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/payments/autocapture": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Auto Capture Payments",
        "description": "Amount to capture is total of fulfilled shipments - order adjustment - amount already captured.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order you want to auto capture.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCapture",
            "in": "query",
            "description": "Also capture unfulfilled shipments (excluding backorder). Used when credit card auths are about to expire.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/pickups": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create Pickup",
        "description": "Apply a pickup to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the pickup.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pickup to create and add to the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pickup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/pickups/{pickupId}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update Pickup",
        "description": "Updates pickup details on the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the pickup.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pickupId",
            "in": "path",
            "description": "Pickup to update on the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pickup content to update on the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pickup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Delete Pickup",
        "description": "Delete an order pickup.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the pickup.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pickupId",
            "in": "path",
            "description": "Pickup to remove from the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Pickup",
        "description": "Gets a specified pickup on the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the pickup.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pickupId",
            "in": "path",
            "description": "Pickup to remove from the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/pickups/{pickupId}/actions": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Available Pickup Fulfillment Actions",
        "description": "Get the available pickup fulfillment actions.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order on which to get a list of available actions.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pickupId",
            "in": "path",
            "description": "Pickup ID to get fulfillment actions for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/refunds": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create Refund",
        "description": "Apply a refund to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Refund to create on the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Refund"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refund"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refund"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Refund"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/refunds/{refundId}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Resend Refund Email",
        "description": "Resend refund email.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refundId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/orders/refunds/refundreasons": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Refund Reasons",
        "description": "Gets all the refund reasons.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundReasonCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundReasonCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RefundReasonCollection"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/commerce/orders/{orderId}/returnableitems": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Order Returnable Items",
        "description": "Provides fulfillment information for order items such as quantity ordered, fulfilled, and returned. Indicates which items are eligible for return.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReturnableItemCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReturnableItemCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReturnableItemCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/shipments": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create A Shipment",
        "description": "Creates a shipment by grouping together multiple packages into logical shipments",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order which is ready to be shipped.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Package ids to use in creating shipments.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimePackage"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimePackage"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimePackage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/shipments/{shipmentId}": {
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Delete An Existing Order Shipment",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipmentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Deletes an existing order shipment."
      },
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Shipment",
        "description": "Allows a shipment to be retrieved for the order. This API only applies to previous version of eCommerce. Get the UCP shipment documentation <a href=\" https://apidocs.kibocommerce.com/?spec=fulfillment#get-/commerce/shipments/-shipmentNumber-\">here</a>",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipmentId",
            "in": "path",
            "description": "Shipment ID of the order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/shipments/methods": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Available Shipment Methods",
        "description": "Retrieves available shipping methods. Typically used to display available shipping method options on the checkout page.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose shipping methods you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "Gets a draft copy of the order if one is available.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShippingRate"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShippingRate"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShippingRate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/shipments/{shipmentNumber}/reprice": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Reprice Shipment",
        "description": "Allows a shipment to be repriced.",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isItemCancellationContext",
            "in": "query",
            "description": "FFMT svc will pass this as true while canceling  shipment item.\r\n            If it is true shipping costs will retain.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepriceShipmentObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/shipments/{shipmentNumber}/repricesubstitutes": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Reprice substitute items in shipments",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepriceShipmentObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              }
            }
          }
        },
        "description": "Reprice substitute items in shipments"
      }
    },
    "/commerce/orders/{orderId}/shipments/repricecanceledshipment": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "This endpoint is use to Reprice Canceled shipment",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload conatisn ActiveShipment and CanceledShipment\r\n            Active Shipment is one of the active shipment from the order's shipment.\r\n            Canceled Shipment is the shipment being canceled.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepriceCanceledShipmentObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepriceCanceledShipmentObject"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepriceCanceledShipmentObject"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RepriceCanceledShipmentObject"
                }
              }
            }
          }
        },
        "description": "\nFFMT svc will call this during full shipment cancelation or last item cancelation.\r\nFFMT svs is performing shipment Rate validation.(FFMT svc is responsible for sending valid FlatratePerOrder shipments.)\r\nShipping costs of the canceled shipment will distribute to the active shipment.\r\nReset Shipping Costs of the canceled shipment to zero."
      }
    },
    "/commerce/orders/{orderId}/shipments/{shipmentNumber}/adjustments": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Update Shipment Adjustments",
        "description": "Updates adjustments on shipments.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentAdjustment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/shipments/{shipmentNumber}/item/{itemId}/adjustments": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Update Shipment Item",
        "description": "Updates shipment item with new shipment adjustment.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentItemAdjustment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/shipments/{shipmentNumber}/split": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Split Shipments",
        "description": "Allows spliting an existing shipment.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipmentNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitShipmentsObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShipment"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShipment"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShipment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/shipments/upsertgiftmessage": {
      "post": {
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GiftMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "summary": "Upsert Gift Message",
        "description": "Upserts the gift message on a shipment"
      }
    },
    "/commerce/orders/{orderId}/validationresults": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Add Validation Result",
        "description": "Adds a validation result from an external system to an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order to which you want to add a note.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The order validation result.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderValidationResult"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderValidationResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderValidationResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderValidationResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Validation Results",
        "description": "Gets list of validation results on an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order to which you want to add a note.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderValidationResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderValidationResult"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderValidationResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/adjustment": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Apply Adjustment",
        "description": "Apply a pricing adjustment to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Adjustment to apply to the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Adjustment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Remove Adjustment",
        "description": "Removes an adjustment that had been previously applied to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/adjustment/shipping": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Apply Shipping Adjustment",
        "description": "Apply a shipping adjustment to the order specified by order Id.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Adjustment to apply to the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Adjustment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Remove Shipping Adjustment",
        "description": "Removes an adjustment that had been previously applied to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/adjustment/handling": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Apply Handling Adjustment",
        "description": "Apply a handling adjustment to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Adjustment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Remove Handling Adjustment",
        "description": "Removes a coupon that had been previously applied to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/attributes": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create Order Attributes",
        "description": "Adds a attributeSet to the order. This is an internal attributeSet that the merchant might want to add to an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order to which you want to add a attributeSet.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Attributes to upsert.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Order Attributes",
        "description": "Retrieves a list of all attribute sets for an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose attributeSets you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update Order Attributes",
        "description": "Updates a specific order attribute set of an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose attributeSet you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "removeMissing",
            "in": "query",
            "description": "Indicates that items missing from the collection should be removed.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Attributes to upsert.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/billinginfo": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Billing Info",
        "description": "Retrieves the customer's billing address.If paying by credit card, it retrieves the card's number, expiration date, card holder's name and billing address.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifer of the order whose customer's payment source you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "Determines whether the draft version should be retrieved if one exists.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfo"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Set Billing Info",
        "description": "Adds a payment source to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose payment source you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All the properties that you want the payment source object to contain.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfo"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfo"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/cancel/reasons": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Order Cancel Reasons",
        "description": "Gets order cancellation reasons based on a category.",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "SHOPPER"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelReasonCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelReasonCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CancelReasonCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/cancel/{orderId}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Cancel Order",
        "description": "Cancel an order with the cancel reason.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeCanceledReason"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Orders",
        "description": "Retrieves a list of orders according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, \r\n            gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Text to perform a search on",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "description": "Limit of the records to include in a search, used for global search",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeBin",
            "in": "query",
            "description": "Whether to include BIN numbers on credit card payments",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Response groups to return or filter the order graph",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "'synthesized' to provide a synthesized order from shipment data",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create Order",
        "description": "Creates a new order for no-cart quick-ordering scenarios. The full API payload required integration with the ecommerce front-end.",
        "parameters": [
          {
            "name": "cartId",
            "in": "query",
            "description": "Unique identifier of the cart. This is the original cart ID expressed as a GUID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteId",
            "in": "query",
            "description": "Unique identifier of the quote.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the order to place.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/users": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Change Order UserId",
        "description": "Changes the User ID associated with an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order to change.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/priceList": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Change Order Price List",
        "description": "Changes the pricelist associated with an order.The desired price list code should be specified on the ApiContext.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order to change",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The code for the pricelist to apply",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/email/resend": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Resend Order Confirmation Email",
        "description": "Resend order confirmation email specified by the Order Id. The only supported actionName for the request body is SubmitOrder.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/orders/{orderId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Order",
        "description": "Retrieves the details of an order specified by the order ID.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose details you want.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "Gets a draft copy of the order if one is available",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeBin",
            "in": "query",
            "description": "Whether to include BIN numbers on credit card payments",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "'synthesized' to provide a synthesized order from shipment data",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update Order",
        "description": "Updates the billing and/or shipping information of an existing order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The order ID to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the order to place.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/digitalWallet/{digitalWalletType}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Process Digital Wallet",
        "description": "Process digital wallet (used to hold 3rd party payment and shipping information) on the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digitalWalletType",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DigitalWallet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/draft": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Delete Order Draft",
        "description": "Deletes a draft version of an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The order ID to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/orders/{orderId}/actions": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Perform Order Action",
        "description": "Set an action on the order. Available actions depend on the current status of the order. If in doubt, get a list of available order actions first.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Action to perform, which can be \"SubmitOrder\", \"ValidateOrder\", \"AcceptOrder\", \"CancelOrder\", \"CompleteOrder\", \"AbandonOrder\", \"ReopenOrder\".",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Available Actions",
        "description": "Retrieves available order actions which depends on the status of the order.Possible actions can be Create, Submit, SetAsProcessing, Close or Cancel.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose available order actions you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/taxableorders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Taxable Orders",
        "description": "Gets an order divided up into \"TaxableOrders\" based on the source and delivery locations of the order items. Generally used for the purpose of splitting it into multiple taxable orders in order to fulfill the order in multiple locations.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose taxable orders you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricingTaxableOrder"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricingTaxableOrder"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricingTaxableOrder"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/discounts/{discountId}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update Order Discount",
        "description": "Update existing discount on the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discountId",
            "in": "path",
            "description": "Identifies the discount to be updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Discount information to use as the update source.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/price": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Price Order",
        "description": "Order price.",
        "parameters": [
          {
            "name": "refreshShipping",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/sms/optout/{siteId}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Sms Opt Out",
        "description": "Opting out from the sms notifications.",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/orders/{orderId}/evaluaterollupstatus": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Evaluate Order Rollup Status",
        "description": "Evaluate Order Rollup Status",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/upsertalternatecontact": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Add/Update Alternate Contact",
        "description": "Add/update an alternate contact.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlternateContact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/removealternatecontact": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Remove Alternate Conatact",
        "description": "Remove alternate contact from order and shipments.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/updateorderrestrictions": {
      "put": {
        "tags": [
          "Order"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restrictEdit",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "restrictCancellation",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "summary": "Update Order Restrictions",
        "description": "Updates the flags for restricting edits and/or cancellations by users without override user behaviors."
      }
    },
    "/commerce/orders/{orderId}/coupons/{couponCode}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Apply Coupon",
        "description": "Apply a coupon to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code that the customer supplies to get the discounted price.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Remove Coupon",
        "description": "Removes a coupon that had been previously applied to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/coupons": {
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Remove Coupons",
        "description": "Removes all coupons that had been previously applied to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/digitalpackages": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create Digital Package",
        "description": "Apply a digital package to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the digital package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Digital Package to create and add to the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DigitalPackage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update Digital Package",
        "description": "Updates a digital package on the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digitalPackageId",
            "in": "path",
            "description": "Package to update on the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Package content to update on the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DigitalPackage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Delete Digital Package",
        "description": "Delete an order digital package.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digitalPackageId",
            "in": "path",
            "description": "Digital package to remove from the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Digital Package",
        "description": "Get an order digital package.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digitalPackageId",
            "in": "path",
            "description": "Digital Package Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}/actions": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Available Digital Package Fulfillment Actions",
        "description": "Get available digital package fulfillment actions.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order on which to get a list of available actions.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digitalPackageId",
            "in": "path",
            "description": "Package ID to get fulfillment actions for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/extendedproperties": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Extended Properties",
        "description": "Get extended properties on an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Adds Extended Properties",
        "description": "Adds extended properties.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Extended properties.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Updated Extended Properties",
        "description": "Update extended properties.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upsert",
            "in": "query",
            "description": "Allow insert or update",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Extended properties",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Delete Extended Properties",
        "description": "Delete extended properties on the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/orders/{orderId}/extendedproperties/{key}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update Extended Property",
        "description": "Updated specific extended property",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upsert",
            "in": "query",
            "description": "Allow insert or update",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Extended property",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedProperty"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Delete Extended Property",
        "description": "Removes a particular order item from the order of the current shopper.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/orders/{orderId}/fulfillment/actions": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Perform Fulfillment Action",
        "description": "Sets the fulfillment action to 'Ship'. To ship an order, the order must have a customer name, the 'Open' or 'OpenAdProcessing' status, full shipping address, and shipping method.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order which is ready to be shipped.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Action to perform along with metadata about which packages, digital packages, or pickups to perform the action on",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/fulfillment/email/resend": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Resend Package Fulfillment Email",
        "description": "Resends the package fulfillment email.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/fulfillmentinfo": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Fulfillment Info",
        "description": "Retrieves an order's fulfillment information specified by order ID.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "Determines whether the draft version should be retrieved if one exists.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentInfo"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Set Fulfillment Info",
        "description": "Modifies an order's fulfillment information. For example, to update the fulfillment address, estimated delivery date, or the merchant's fulfillment cost.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose fulfillment information you want to change.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties that you want the updated fulfillment information to have.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentInfo"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentInfo"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/giftcard/{giftcardId}/resend": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Resend Gateway Gift Card Email",
        "description": "Resend gateway giftcard email.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "giftcardId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Order Items",
        "description": "Retrieves the details of all items in an order specified by order Id.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose items you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "Gets a draft copy of the order if one is available",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create Order Item",
        "description": "Adds a product or other item to the cart of the current shopper.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order to add an item to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipInventoryCheck",
            "in": "query",
            "description": "Determines wheter or not to check inventory on an item when adding an item to the order or when placing an order",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "zipCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the new cart item. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Order Item",
        "description": "Retrieves the details of a single order item.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose item you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item whose details you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "Gets a draft copy of the order if one is available",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Delete Order Item",
        "description": "Removes a particular order item from the order of the current shopper.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{lineId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Order Item Via LineId",
        "description": "Retrieves the details of a single order item via its line id.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose item you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lineId",
            "in": "path",
            "description": "Line ID of the order item whose details you want to get.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "Gets a draft copy of the order if one is available",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}/price/{price}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update Item Product Price",
        "description": "Updates the price of an individual order item in the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "price",
            "in": "path",
            "description": "Price to update the item product to.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}/quantity/{quantity}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update Item Quantity",
        "description": "Updates the quantity of an individual order item in the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quantity",
            "in": "path",
            "description": "New quantity for the specified order item.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}/dutyAmount/{dutyAmount}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update Item Duty",
        "description": "Updates the duty amount of an order item in the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dutyAmount",
            "in": "path",
            "description": "Duty amount to update the item product to.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}/fulfillment": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update Item Fulfillment",
        "description": "Updates the fullfillment method and/or location of an individual order item in the order of the current shopper.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zipCode",
            "in": "query",
            "description": "Zip Code used for inventory reservation if order having STH items",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The order item containing fulfilment information to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}/discounts/{discountId}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update Order Item Discount",
        "description": "Update a discount on the order item to ignore or unignore it.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discountId",
            "in": "path",
            "description": "Identifies the discount to be updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Discount information to use as the update source.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}/subscriptionInfo": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update Order Item Subscription Info",
        "description": "Update a subscription info on the order item, applies only to Draft Order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Mozu.CommerceRuntime.Contracts.Subscriptions.SubscriptionInfo to use as the update source",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}/deliverydate": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update the Delivery Date of Order Item",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "description": "Updates the Delivery Date of a particular Order Item"
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}/upsertInventoryTags": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Upsert Inventory Tags on OrderItem",
        "description": "You need to pass in all tags everytime",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Mozu.CommerceRuntime.Contracts.Commerce.InventoryTags to use as the update source",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InventoryTags"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}/updateGiftInfo": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Update Order Item Gift Information",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Mozu.CommerceRuntime.Contracts.Orders.GiftInfo to use as the update source",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GiftInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "description": "Updates the gift information on an order item"
      }
    },
    "/commerce/orders/{orderId}/notes": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Create Order Note",
        "description": "Adds a note to the order. This is an internal note that the merchant might want to add to an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order to which you want to add a note.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Text of the note. Maximum 256 characters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderNote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get Order Notes",
        "description": "Retrieves a list of all notes for an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose notes you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderNote"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderNote"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderNote"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/attributedefinition/attributes": {
      "get": {
        "tags": [
          "OrderAttributeDefinitions"
        ],
        "summary": "Get Attributes",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              }
            }
          }
        },
        "description": "Retrieves the details of attributes."
      },
      "post": {
        "tags": [
          "OrderAttributeDefinitions"
        ],
        "summary": "Create Attribute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "description": "Create a new attribute.",
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/commerce/orders/attributedefinition/attributes/{attributeFQN}/VocabularyValues": {
      "get": {
        "tags": [
          "OrderAttributeDefinitions"
        ],
        "summary": "Get Attribute Vocabulary Values",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves the details of attribute vocabulary values."
      }
    },
    "/commerce/orders/attributedefinition/attributes/{attributeFQN}": {
      "get": {
        "tags": [
          "OrderAttributeDefinitions"
        ],
        "summary": "Get Attribute",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "description": "Get an order attribute by its attributeFQN."
      },
      "put": {
        "tags": [
          "OrderAttributeDefinitions"
        ],
        "summary": "Update Attribute",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "description": "Update an order attribute."
      }
    },
    "/commerce/quotes/{quoteId}/comments/{commentId}": {
      "get": {
        "tags": [
          "Quote"
        ],
        "summary": "Get Quote Comment",
        "description": "Retrieves a specific quote comment from an quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote whose comments you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Unique identifier of the comment whose text you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/comments": {
      "get": {
        "tags": [
          "Quote"
        ],
        "summary": "Get All Quote Comments",
        "description": "Retrieves all quote comments from an quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote whose comments you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Quote"
        ],
        "summary": "Create Comment",
        "description": "Create a comment on a specific quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote whose comments you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Comment which wanted to add on a quote.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}": {
      "get": {
        "tags": [
          "Quote"
        ],
        "summary": "Get Quote",
        "description": "Retrieves the details of a quote specified by the quote ID.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote whose details you want.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Quote"
        ],
        "summary": "Update Quote",
        "description": "Updates a quote specified by quote Id.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Quote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Quote"
        ],
        "summary": "Delete Quote",
        "description": "Deletes the quote specified by quote Id.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/quotes": {
      "get": {
        "tags": [
          "Quote"
        ],
        "summary": "Get Quotes",
        "description": "Retrieves a list of B2B Quotes according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, \r\n            gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Text to perform a search on",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "description": "Limit of the records to include in a search, used for global search",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Quote"
        ],
        "summary": "Create quote",
        "description": "Creates a new B2B quote. With quotes, buyers can request an estimate based on a list of products they are interested in. Sellers can evaluate these requests and make adjustments to pricing, discounts, or other criteria before the buyer chooses whether to place the order or not. Comments can be left on the quote to communicate during this negotiation process.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Quote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/commerce/quotes/customers/{customerAccountId}/{quoteName}": {
      "get": {
        "tags": [
          "Quote"
        ],
        "summary": "Get Quote By Name",
        "description": "Retrieves quote by its name.",
        "parameters": [
          {
            "name": "customerAccountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "quoteName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/copy": {
      "post": {
        "tags": [
          "Quote"
        ],
        "summary": "Copy quote",
        "description": "Copies a source quote and creates a new quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/adjustments": {
      "post": {
        "tags": [
          "Quote"
        ],
        "summary": "Update Quote Adjustments",
        "description": "Set product, shipping, and handling adjustments on the specified quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Adjustments to be added to the quote.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteAdjustment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/shippingMethods": {
      "get": {
        "tags": [
          "Quote"
        ],
        "summary": "Get Available Shipping Methods",
        "description": "Retrieves available shipping methods for quotes. Typically used to display available shipping method options on the quote page.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote whose shipping methods you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShippingRate"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShippingRate"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShippingRate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/fulfillmentInfo": {
      "post": {
        "tags": [
          "Quote"
        ],
        "summary": "Update Fulfillment Info",
        "description": "Updates the fulfillmentInfo of quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/email": {
      "post": {
        "tags": [
          "Quote"
        ],
        "summary": "Send Quote Email",
        "description": "Send Quote email to provided email addresses or email mentioned on the quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "optional list of email addresses",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/quotes/create/{cartId}": {
      "post": {
        "tags": [
          "Quote"
        ],
        "summary": "Create Quote From Cart",
        "description": "Creates a new quote from an existing cart, that is, when the customer chooses to initate quote.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart. This is the original cart ID expressed as a GUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/coupons/{couponCode}": {
      "put": {
        "tags": [
          "Quote"
        ],
        "summary": "Apply Coupon",
        "description": "Apply a coupon to the quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code that the customer supplies to get the discounted price.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Quote"
        ],
        "summary": "Remove Coupon",
        "description": "Removes a coupon that had been previously applied to the Quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the Quote with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/coupons": {
      "delete": {
        "tags": [
          "Quote"
        ],
        "summary": "Remove Coupons",
        "description": "Removes all coupons that had been previously applied to the Quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the Quote with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/items": {
      "get": {
        "tags": [
          "Quote"
        ],
        "summary": "Get Quote Items",
        "description": "Returns a listing of Quotes",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Quote"
        ],
        "summary": "Add Item To Quote",
        "description": "Adds an item to the Quote of the current shopper.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/customers/{customerAccountId}/{quoteName}/items": {
      "get": {
        "tags": [
          "Quote"
        ],
        "summary": "Get Quote Items By Quote Name",
        "description": "Gets the quote specified by the quote name.",
        "parameters": [
          {
            "name": "customerAccountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "quoteName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/items/{quoteItemId}": {
      "get": {
        "tags": [
          "Quote"
        ],
        "summary": "Get Quote Item",
        "description": "Retrieves an individual Quote item from a Quote specified by quote Id and quote item Id.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteItemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Quote"
        ],
        "summary": "Delete Quote Item",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteItemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete Quote Item"
      }
    },
    "/commerce/quotes/{quoteId}/items/{quoteItemId}/quantity/{quantity}": {
      "put": {
        "tags": [
          "Quote"
        ],
        "summary": "Update Item Quantity",
        "description": "Updates the quantity of an individual Quote item.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteItemId",
            "in": "path",
            "description": "Unique identifier of the quote item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quantity",
            "in": "path",
            "description": "New quantity for the specified quote item.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/items/{quoteItemId}/price/{price}": {
      "put": {
        "tags": [
          "Quote"
        ],
        "summary": "Update Item Product Price",
        "description": "Overrides the price of an individual quote item.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteItemId",
            "in": "path",
            "description": "Unique identifier of the quote item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "price",
            "in": "path",
            "description": "New Price for the specified quote item.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/items/{quoteItemId}/fulfillment": {
      "put": {
        "tags": [
          "Quote"
        ],
        "summary": "Update Item Fulfillment",
        "description": "Updates the fulfillment method and/or location of an individual quote item in the quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteItemId",
            "in": "path",
            "description": "Unique identifier of the quote item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The quote item containing fulfillment information to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns": {
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Returns",
        "description": "Provides a paged, collection of returns for a Site.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Return"
        ],
        "summary": "Create Returns",
        "description": "Creates a new Return for an order or product list.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Return"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/commerce/returns/email/resend": {
      "put": {
        "tags": [
          "Return"
        ],
        "summary": "Resend Return Email",
        "description": "Resends return email.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReturnAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/commerce/returns/reasons": {
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Reasons",
        "description": "Gets all the return reasons.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonCollection"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/commerce/returns/{returnId}": {
      "put": {
        "tags": [
          "Return"
        ],
        "summary": "Get Reasons",
        "description": "Gets all the return reasons.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Return"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Return"
        ],
        "summary": "Delete Return",
        "description": "Deletes a return specified by return Id.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Return",
        "description": "Allows for retrieval for a return given only the return Id.  Further manipulation of that returns must be done off of the order.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/actions": {
      "post": {
        "tags": [
          "Return"
        ],
        "summary": "Delete Return",
        "description": "Perform Return Action.",
        "requestBody": {
          "description": "A ReturnAction instance that takes the name of the action to be performed and a list of Return Ids upon which to perform the action.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReturnAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnCollection"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/commerce/returns/{returnId}/ship": {
      "post": {
        "tags": [
          "Return"
        ],
        "summary": "Create Return Shipping Order",
        "description": "Creates a child order for the return for processing replacments. The request body (a collection of ReturnItemSpecifier) is optional. If the body is empty, the operation replaces all remaining items marked for replace. If you want to replace only a specific item(s) marked for return, you must specify the item(s) in the request body.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "The ID of the parent return",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Optionally specify which items to include and in what quantities",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReturnItemSpecifier"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/actions": {
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Available Return Actions",
        "description": "Gets all the available actions on the return specified by return Id.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/payments": {
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Payments",
        "description": "Gets payments on the return specified by return Id.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/payments/{paymentId}": {
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Payment",
        "description": "Gets specific payment on the return specified by return Id and payment Id.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/payments/actions": {
      "post": {
        "tags": [
          "Return"
        ],
        "summary": "Create Payment Action For Return",
        "description": "Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Action to specify. Possible actions can be \"Create,\" \"Capture,\" \"Void,\" \"AuthCapture,\" or \"ReceiveCheck.\"",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/payments/{paymentId}/actions": {
      "post": {
        "tags": [
          "Return"
        ],
        "summary": "Perform Payment Action For Return",
        "description": "Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.  To retrieve the list of available actions, use an operation like GetAvailableReturnActions to view the actions available for the resource you are updating.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Action to specify. Possible actions can be \"Create,\" \"Capture,\" \"Void,\" \"AuthCapture,\" or \"ReceiveCheck.\"",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/restock": {
      "post": {
        "tags": [
          "Return"
        ],
        "summary": "Restock Return Items",
        "description": "API to restock return item.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of return items with quantity to be restocked",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RestockableReturnItem"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/shipping/label": {
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Return Label",
        "description": "Gets the return label specified by returnId.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipmentResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipmentResponse"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipmentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/autorefund": {
      "post": {
        "tags": [
          "Return"
        ],
        "summary": "Auto Refund Return",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of return item id with proccessing fee",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AutoRefundRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        },
        "description": "Attempt to automatically refund the return"
      }
    },
    "/commerce/returns/{returnId}/paymentDistribution": {
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Payment Distribution",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnRefundDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnRefundDetails"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnRefundDetails"
                }
              }
            }
          }
        },
        "description": "Get Payment Distribution"
      }
    },
    "/commerce/returns/{returnId}/items": {
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Return Items",
        "description": "Retrieves the details of all return items in an order.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return whose items you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnItemCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnItemCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnItemCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Return"
        ],
        "summary": "Create Return Item",
        "description": "Adds a return item to the return.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "ID of the order to add an item to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the new return item.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReturnItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/items/{returnItemId}": {
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Return Item",
        "description": "Retrieves the details of a single return item.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return whose item you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnItemId",
            "in": "path",
            "description": "Unique identifier of the return item whose details you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnItem"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{orderId}/items/{orderItemId}": {
      "delete": {
        "tags": [
          "Return"
        ],
        "summary": "Delete Order Item",
        "description": "Removes a particular return item from the return of the current shopper.",
        "parameters": [
          {
            "name": "returnId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnItemId",
            "in": "query",
            "description": "Unique identifier of the order item.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/notes": {
      "post": {
        "tags": [
          "Return"
        ],
        "summary": "Create Return Note",
        "description": "Adds a note to the return. This is an internal note that the merchant might want to add to a return. This note is visible in Admin for customer service representatives to see.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return to which you want to add a note.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Text of the note. Maximum 256 characters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderNote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Return Notes",
        "description": "Retrieves a list of all notes for a return.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return whose notes you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderNote"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderNote"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderNote"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/notes/{noteId}": {
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Return Note",
        "description": "Retrieves a specific note from a return.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return whose note you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of the note whose text you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Return"
        ],
        "summary": "Update Return Note",
        "description": "Updates a specific note for a return.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return whose note you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of the note whose text you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Text of the note.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderNote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Return"
        ],
        "summary": "Delete Return Note",
        "description": "Deletes a specific note on a return.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return whose note you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of the note whose text you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/returns/{returnId}/packages": {
      "post": {
        "tags": [
          "Return"
        ],
        "summary": "Add Package to Return",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Package to create and add to the return",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimePackage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              }
            }
          }
        },
        "description": " package?"
      }
    },
    "/commerce/returns/{returnId}/packages/{packageId}": {
      "put": {
        "tags": [
          "Return"
        ],
        "summary": "Update Return Package",
        "description": "Updates a return's package.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package to update on the return",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Package content to update on the return",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimePackage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Return"
        ],
        "summary": "Delete Return Package",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package to remove from the return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete a package from the return."
      },
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Return Package",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package to remove from the return",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              }
            }
          }
        },
        "description": "Get an return package."
      }
    },
    "/commerce/returns/{returnId}/packages/{packageId}/label": {
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Return Package Label",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package to remove from the return",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnAsBase64Png",
            "in": "query",
            "description": "Return as base64 png",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Get a return package label"
      }
    },
    "/commerce/returns/{returnId}/shipments": {
      "post": {
        "tags": [
          "Return"
        ],
        "summary": "Create Return Shipment",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the order which is ready to be shipped.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Package ids to use in creating shipments.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimePackage"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimePackage"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimePackage"
                  }
                }
              }
            }
          }
        },
        "description": "Creates a shipment by grouping together multiple packages into logical shipments."
      }
    },
    "/commerce/returns/{returnId}/shipments/{shipmentId}": {
      "delete": {
        "tags": [
          "Return"
        ],
        "summary": "Delete Return Shipment",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "ID of the return",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipmentId",
            "in": "path",
            "description": "Shipment ID of the return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Deletes an existing return shipment"
      },
      "get": {
        "tags": [
          "Return"
        ],
        "summary": "Get Return Shipment",
        "description": "Retrieves a return shipment",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "ID of the return",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipmentId",
            "in": "path",
            "description": "Shipment ID of the return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/wishlists": {
      "get": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Get Wishlists",
        "description": "Retrieves a list of wishlists according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, \r\n            gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Text to perform a search on",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "description": "Limit of the records to include in a search, used for global search",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Create Wishlist",
        "description": "Create wishlist.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Wishlist"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/commerce/wishlists/{wishlistId}": {
      "get": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Get Wishlist",
        "description": "Retrieves the details of a wishlist specified by the wishlist ID.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Update Wishlist",
        "description": "Updates a wishlist specified by wishlist Id.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Wishlist"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Deletes Wishlist",
        "description": "Deletes a wishlist specified by wishlist Id.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/wishlists/customers/{customerAccountId}/{wishlistName}": {
      "get": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Get Wishlist By Name",
        "description": "Retrieves wishlist by name.",
        "parameters": [
          {
            "name": "customerAccountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "wishlistName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/wishlists/{wishlistId}/items": {
      "get": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Get Wishlist Items",
        "description": "Returns a listing of wishlists.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItemCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItemCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItemCollection"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Remove All Wishlist Items",
        "description": "Clears all items in the wishlist.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Add Item To Wishlist",
        "description": "Adds an item to the wishlist of the current shopper.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WishlistItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/wishlists/customers/{customerAccountId}/{wishlistName}/items": {
      "get": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Get Wishlist Items By WishlistName",
        "description": "Returns a listing of wishlists.",
        "parameters": [
          {
            "name": "customerAccountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "wishlistName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItemCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItemCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItemCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/wishlists/{wishlistId}/items/{wishlistItemId}": {
      "get": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Get Wishlist Item",
        "description": "Retrieves an individual wishlist item from a wishlist.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wishlistItemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Update Wishlist Item",
        "description": "Updates a wishlist item.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wishlistItemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WishlistItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Delete Wishlist Item",
        "description": "Delete/remove wishlist item.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wishlistItemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/wishlists/{wishlistId}/items/{wishlistItemId}/{quantity}": {
      "put": {
        "tags": [
          "Wishlist"
        ],
        "summary": "Update Wishlist Item Quantity",
        "description": "Updates the quantity of an item in the wishlist.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wishlistItemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quantity",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CartSummary": {
        "type": "object",
        "properties": {
          "itemCount": {
            "type": "integer",
            "description": "Number of items in the active cart.",
            "format": "int32",
            "nullable": true
          },
          "totalQuantity": {
            "type": "integer",
            "description": "Total quantity of all items in the cart",
            "format": "int32",
            "nullable": true
          },
          "total": {
            "type": "number",
            "description": "Total cost of items in the active cart.",
            "format": "double",
            "nullable": true
          },
          "isExpired": {
            "type": "boolean",
            "description": "If true, the cart has reached its expiration date (Cart.ExpirationDate) and considered abandoned. \r\nCarts of anonymous shoppers expire after 14 days of inactivity.",
            "nullable": true
          },
          "hasActiveCart": {
            "type": "boolean",
            "description": "If true, the cart is active. A shopper has added an item to a cart.",
            "nullable": true
          }
        },
        "description": "Cart summary, which is the number of items in the active cart, total cost of items in the cart, and whether the cart has expired."
      },
      "FulfillmentInfo": {
        "type": "object",
        "properties": {
          "fulfillmentContact": {
            "$ref": "#/components/schemas/CommerceRuntimeContact"
          },
          "isDestinationCommercial": {
            "type": "boolean",
            "description": "Indicates that the destination is commercial",
            "nullable": true
          },
          "shippingMethodCode": {
            "type": "string",
            "description": "Code that uniquely identifies the shipping method such as \"Ground,\" \"Overnight,\" or \"Digital.\"\r\nThe site's shipping settings lists the valid shipping methods specified for this site.",
            "nullable": true
          },
          "shippingMethodName": {
            "type": "string",
            "description": "Readable name of the shipping method",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data originated by the shipping service.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "description": "Shipment information, which includes the shipping address, price, estimated delivery date, tracking information, method (for example, Ground, Overnight, or Pick-up), \r\ncarrier (for example, USPS, UPS, FedEx), and current status (for example, Not Shipped, In Transit, Delayed, or Returned To Sender)."
      },
      "SuggestedDiscount": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "nullable": true
          },
          "autoAdd": {
            "type": "boolean"
          },
          "discountId": {
            "type": "integer",
            "format": "int32"
          },
          "hasMultipleProducts": {
            "type": "boolean"
          },
          "hasOptions": {
            "type": "boolean"
          }
        }
      },
      "ExtendedProperty": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommerceAggregate": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier of the shopper who created the cart.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the CommerceAggregate object (e.g. order, cart, wishlist, etc.).",
            "nullable": true
          },
          "tenantId": {
            "type": "integer",
            "description": "Unique identifier of the Tenant.",
            "format": "int32",
            "nullable": true
          },
          "siteId": {
            "type": "integer",
            "description": "Unique identifier of the Site.",
            "format": "int32",
            "nullable": true
          },
          "channelCode": {
            "type": "string",
            "description": "Unique identifier of the channel for this item.",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO Currency Code. Currently, only USD is supported.",
            "nullable": true
          },
          "visitId": {
            "type": "string",
            "description": "Identifies the Visit ID that was current when the order was placed or when the cart was last updated.",
            "nullable": true
          },
          "webSessionId": {
            "type": "string",
            "description": "Identifies the web session used to place the order or last update the cart.",
            "nullable": true
          },
          "customerInteractionType": {
            "type": "string",
            "description": "Determines the interaction type that a customer will use to create this object.\r\nValid values are: Website, Store, Call, Unknown",
            "nullable": true
          },
          "fulfillmentInfo": {
            "$ref": "#/components/schemas/FulfillmentInfo"
          },
          "orderDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
            },
            "description": "The discount that has been applied to the cart itself. If multiple discounts exist, this is the discount that the system applies because it offers the best savings for the shopper. This is a negative number.",
            "nullable": true
          },
          "suggestedDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuggestedDiscount"
            },
            "nullable": true
          },
          "rejectedDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuggestedDiscount"
            },
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data for a given vendor set within the commerce process.",
            "nullable": true
          },
          "taxData": {
            "type": "object",
            "description": "Storage for any additional/custom tax data.",
            "nullable": true
          },
          "subtotal": {
            "type": "number",
            "description": "Combined price for all cart items, including all selected options but excluding any discounts.",
            "format": "double",
            "nullable": true
          },
          "discountedSubtotal": {
            "type": "number",
            "description": "Combined price for all cart items, including all selected options as well as any discounts.",
            "format": "double",
            "nullable": true
          },
          "discountTotal": {
            "type": "number",
            "description": "Amount of the discounts applied to all items in the cart. This is a negative number.  This also includes the order level discounts.",
            "format": "double",
            "nullable": true
          },
          "discountedTotal": {
            "type": "number",
            "description": "Subtotal minus the discounted total",
            "format": "double",
            "nullable": true
          },
          "shippingTotal": {
            "type": "number",
            "description": "Shipping does not appear on cart.",
            "format": "double",
            "nullable": true
          },
          "shippingSubTotal": {
            "type": "number",
            "description": "Shipping total without discounts applied.",
            "format": "double",
            "nullable": true
          },
          "shippingTaxTotal": {
            "type": "number",
            "description": "Not implemented. Tax does not appear on cart.",
            "format": "double",
            "nullable": true
          },
          "handlingTaxTotal": {
            "type": "number",
            "description": "Total tax on handling",
            "format": "double",
            "nullable": true
          },
          "itemTaxTotal": {
            "type": "number",
            "description": "Not implemented. Tax does not appear on cart.",
            "format": "double",
            "nullable": true
          },
          "taxTotal": {
            "type": "number",
            "description": "Tax does not appear on cart.",
            "format": "double",
            "nullable": true
          },
          "feeTotal": {
            "type": "number",
            "description": "Not implemented. Total cost of fees for all items in the cart.",
            "format": "double",
            "nullable": true
          },
          "total": {
            "type": "number",
            "description": "Final total amount of the order including all discounts, shipping, and tax.",
            "format": "double",
            "nullable": true
          },
          "lineItemSubtotalWithOrderAdjustments": {
            "type": "number",
            "description": "Line Item Subtotals with Order Adjustments",
            "format": "double",
            "nullable": true
          },
          "shippingAmountBeforeDiscountsAndAdjustments": {
            "type": "number",
            "description": "Shipping Amount before discount and adjustments",
            "format": "double",
            "nullable": true
          },
          "lastValidationDate": {
            "type": "string",
            "description": "Occasionally the commerce runtime may validate that item/product names, descriptions, and prices have not changed. \r\nIf changed, it updates LastValidationDate.",
            "format": "date-time",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "When the order will no longer be active. That is, the order is considered abandoned. \r\nOrders of anonymous shoppers expire after 14 days of inactivity. \r\nAn order never expires for shoppers who are logged into their account. \r\nDate in UTC Date/Time.",
            "format": "date-time",
            "nullable": true
          },
          "changeMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeChangeMessage"
            },
            "description": "List of messages displayed by the system based on the last cart action, for example, when a product price has changed or is out-of-stock. System-supplied and read-only.",
            "nullable": true
          },
          "extendedProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtendedProperty"
            },
            "description": "Extra properties (key-value pairs) that extend the primary object. Think of this as a property bag of string keys and string values.",
            "nullable": true
          },
          "discountThresholdMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeThresholdMessage"
            },
            "description": "List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage objects that are valid for the current value of the cart/order.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "description": "Base class for cart and order"
      },
      "ProductStock": {
        "type": "object",
        "properties": {
          "manageStock": {
            "type": "boolean"
          },
          "isOnBackOrder": {
            "type": "boolean"
          },
          "availableDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "stockAvailable": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "aggregateInventory": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "futureInventories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeFutureInventory"
            },
            "nullable": true
          },
          "isSubstitutable": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "ProductBase": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Merchant-created code that uniquely identifies the product.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the product, this is the current value of the product's name in the language specified by LocaleCode.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Short description of the product in the language specified by LocaleCode.",
            "nullable": true
          },
          "goodsType": {
            "type": "string",
            "description": "Goods Type",
            "nullable": true
          },
          "isPackagedStandAlone": {
            "type": "boolean",
            "description": "Indicates that this product ships by itself."
          },
          "stock": {
            "$ref": "#/components/schemas/ProductStock"
          },
          "productReservationId": {
            "type": "integer",
            "description": "Reservation ID associated with this product in the bundle.",
            "format": "int32",
            "nullable": true
          },
          "allocationId": {
            "type": "integer",
            "description": "Allocation ID associated with this product on this order.",
            "format": "int32",
            "nullable": true
          },
          "allocationExpiration": {
            "type": "string",
            "description": "Allocation ID associated with this product on this order.",
            "format": "date-time",
            "nullable": true
          },
          "measurements": {
            "$ref": "#/components/schemas/CommerceRuntimePackageMeasurements"
          },
          "fulfillmentStatus": {
            "type": "string",
            "description": "Fulfillment status of the product.",
            "nullable": true
          }
        }
      },
      "CommerceUnitPrice": {
        "type": "object",
        "properties": {
          "extendedAmount": {
            "type": "number",
            "description": "Extended amount, this is in order of precedence: OverrideAmount, SaleAmount, ListAmount",
            "format": "double",
            "nullable": true
          },
          "listAmount": {
            "type": "number",
            "description": "Product list amount.",
            "format": "double",
            "nullable": true
          },
          "saleAmount": {
            "type": "number",
            "description": "Sale amount indicated on the product.",
            "format": "double",
            "nullable": true
          },
          "overrideAmount": {
            "type": "number",
            "description": "Amount as manually overridden by the Merchant",
            "format": "double",
            "nullable": true
          }
        },
        "description": "Pricing details for the product listed on a cart item, including the original price, discount amount, and final price."
      },
      "AppliedProductDiscount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
          }
        ],
        "properties": {
          "productQuantity": {
            "type": "integer",
            "description": "Quantity of products priced. This is always one unless calculating pricing on the order or cart.",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          },
          "impactPerUnit": {
            "type": "number",
            "description": "Impact for a quantity of one product; that is, the value of the discount for one product.",
            "format": "double",
            "nullable": true,
            "deprecated": true
          },
          "appliesToSalePrice": {
            "type": "boolean",
            "description": "Determines if the discount applies to the sale price of the order",
            "nullable": true
          }
        },
        "description": "Details of the discount applied to a product."
      },
      "ShippingDiscount": {
        "type": "object",
        "properties": {
          "methodCode": {
            "type": "string",
            "description": "Unique identifier of the shipping method discount.",
            "nullable": true
          },
          "discount": {
            "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
          }
        },
        "description": "Value of the shipping discount."
      },
      "InventoryTags": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommerceItem": {
        "type": "object",
        "properties": {
          "localeCode": {
            "type": "string",
            "description": "Locale code for language that appears in text and descriptions on the site, for example, en_US. \r\nThis is not the currency code. Currently only en_US is supported.",
            "nullable": true
          },
          "purchaseLocation": {
            "type": "string",
            "description": "The location where the product is being purchased.. default is null. Products can have different prices\r\nby purchaseLocation via custom priceListResolution...",
            "nullable": true
          },
          "lineId": {
            "type": "integer",
            "description": "The line id assigned to the order item. Visible only in the Admin, this is set from the Admin or\r\nin CommerceRuntime when a cart is converted to an order.",
            "format": "int32",
            "nullable": true
          },
          "product": {
            "$ref": "#/components/schemas/CommerceRuntimeProduct"
          },
          "quantity": {
            "type": "integer",
            "description": "Number of products ordered.",
            "format": "int32"
          },
          "isRecurring": {
            "type": "boolean",
            "description": "If true, the cart item lists a product that can be purchased or fulfilled at regular intervals, for example, monthly billing or a subscription.",
            "nullable": true
          },
          "isTaxable": {
            "type": "boolean",
            "description": "Not implemented. If true, the cart item is eligible for tax.",
            "nullable": true
          },
          "subtotal": {
            "type": "number",
            "description": "Line item subtotal (quantity multiplied by price) before discounts.",
            "format": "double",
            "nullable": true
          },
          "extendedTotal": {
            "type": "number",
            "description": "Line item extended total (quantity multiplied by unit extended price) before discounts.",
            "format": "double",
            "nullable": true
          },
          "taxableTotal": {
            "type": "number",
            "description": "Line item subtotal (quantity multiplied by price) before discounts.",
            "format": "double",
            "nullable": true
          },
          "discountTotal": {
            "type": "number",
            "description": "How much the shopper saves with the applied discount or sale price. This is a negative number.",
            "format": "double",
            "nullable": true
          },
          "discountedTotal": {
            "type": "number",
            "description": "Subtotal minus any discounts.",
            "format": "double",
            "nullable": true
          },
          "itemTaxTotal": {
            "type": "number",
            "description": "Total price of taxes that apply to products in this item.",
            "format": "double",
            "nullable": true
          },
          "shippingTaxTotal": {
            "type": "number",
            "description": "Total price of taxes that apply to the shipping of this item.",
            "format": "double",
            "nullable": true
          },
          "shippingTotal": {
            "type": "number",
            "description": "Total price of shipping that apply to this item.",
            "format": "double",
            "nullable": true
          },
          "handlingAmount": {
            "type": "number",
            "description": "Handling Amount for this item",
            "format": "double",
            "nullable": true
          },
          "feeTotal": {
            "type": "number",
            "description": "Not implemented. Total cost of fees that apply to this item.",
            "format": "double",
            "nullable": true
          },
          "total": {
            "type": "number",
            "description": "Total price of this cart item taking into account any discounts.",
            "format": "double",
            "nullable": true
          },
          "unitPrice": {
            "$ref": "#/components/schemas/CommerceUnitPrice"
          },
          "productDiscount": {
            "$ref": "#/components/schemas/CommerceRuntimeAppliedLineItemProductDiscount"
          },
          "productDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAppliedLineItemProductDiscount"
            },
            "description": "A list of discounts applied to the product",
            "nullable": true
          },
          "shippingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAppliedLineItemShippingDiscount"
            },
            "description": "A discount applied to the shipping",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data for a given vendor set within the commerce process.",
            "nullable": true
          },
          "taxData": {
            "type": "object",
            "description": "Storage for any additional/custom tax data.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "shippingAmountBeforeDiscountsAndAdjustments": {
            "type": "number",
            "description": "Shipping amount before Discounts and adjustments",
            "format": "double",
            "nullable": true
          },
          "weightedOrderAdjustment": {
            "type": "number",
            "description": "Order Level Manual Adjustment applied to this Item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderDiscount": {
            "type": "number",
            "description": "Order Level Discount applied to this Item",
            "format": "double",
            "nullable": true
          },
          "adjustedLineItemSubtotal": {
            "type": "number",
            "description": "Order Level taxable sub total",
            "format": "double",
            "nullable": true
          },
          "totalWithoutWeightedShippingAndHandling": {
            "type": "number",
            "description": "Taxable Subtotal including Weighted Order amounts",
            "format": "double",
            "nullable": true
          },
          "weightedOrderTax": {
            "type": "number",
            "description": "Order Level tax applied to this Item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderShipping": {
            "type": "number",
            "description": "Order Level Shipping applied to this Item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderShippingDiscount": {
            "type": "number",
            "description": "Order Level Shipping discount applied to this Item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderShippingManualAdjustment": {
            "type": "number",
            "description": "Order Level Shipping Manual Adjustment applied to this Item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderShippingTax": {
            "type": "number",
            "description": "Order Level Shipping Tax applied to this Item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderHandlingFee": {
            "type": "number",
            "description": "Order Level handling fee applied to this item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderHandlingFeeTax": {
            "type": "number",
            "description": "Order Level handling fee tax applied to this item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderHandlingFeeDiscount": {
            "type": "number",
            "description": "Order Level handling fee discount applied to this item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderDuty": {
            "type": "number",
            "description": "Order Level Duty applied to this Item",
            "format": "double",
            "nullable": true
          },
          "totalWithWeightedShippingAndHandling": {
            "type": "number",
            "description": "Line item total with line item, Tax, Weighted Tax with Weighted shipping and handling costs",
            "format": "double",
            "nullable": true
          },
          "weightedOrderHandlingAdjustment": {
            "type": "number",
            "description": "Order level handling adjusment that applies to this item.",
            "format": "double",
            "nullable": true
          },
          "autoAddDiscountId": {
            "type": "integer",
            "description": "Track the discoutid from which the item was auto added",
            "format": "int32",
            "nullable": true
          },
          "isAssemblyRequired": {
            "type": "boolean",
            "description": "Assembly Required for this order item"
          },
          "childItemIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of Child Item Ids for this order item",
            "nullable": true
          },
          "parentItemId": {
            "type": "string",
            "description": "Indicates Parent Item Id for this order item",
            "nullable": true
          },
          "inventoryTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryTags"
            },
            "nullable": true
          },
          "lineItemAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "dutyAmount": {
            "type": "number",
            "description": "Indicate Duty Amount for this item.",
            "format": "double",
            "nullable": true
          }
        },
        "description": "Base class for cart and order items"
      },
      "Frequency": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Trial": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Indicates if the trial is enabled"
          },
          "duration": {
            "type": "integer",
            "description": "Trial duration in days",
            "format": "int32"
          },
          "substituteProductCode": {
            "type": "string",
            "description": "Product code to substitute once the trial period is finished.",
            "nullable": true
          },
          "substituteProductQuantity": {
            "type": "integer",
            "description": "Product quantity to substitute once the trail period is finished.",
            "format": "int32"
          },
          "substituteVariationProductCode": {
            "type": "string",
            "description": "Variation product code to substitute once the trail period is finished.",
            "nullable": true
          },
          "substituteProductOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeProductOption"
            },
            "description": "Configurable Options to substitute once the trial period is finished.",
            "nullable": true
          }
        }
      },
      "SubscriptionInfo": {
        "type": "object",
        "properties": {
          "required": {
            "type": "boolean",
            "description": "Indicates commerce item is subscribed or not.",
            "nullable": true
          },
          "frequency": {
            "$ref": "#/components/schemas/Frequency"
          },
          "trial": {
            "$ref": "#/components/schemas/Trial"
          }
        }
      },
      "CartItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommerceItem"
          }
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the item in the cart.",
            "nullable": true
          },
          "fulfillmentLocationCode": {
            "type": "string",
            "description": "Location code from which to obtain this item",
            "nullable": true
          },
          "fulfillmentMethod": {
            "type": "string",
            "description": "Fulfillment method used to fulfill this item",
            "nullable": true
          },
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionInfo"
          }
        },
        "description": "Details of an item in the shopper's cart, such as the product name, stock count, unit price, discounts, quantity ordered, and total price."
      },
      "InvalidCoupon": {
        "type": "object",
        "properties": {
          "couponCode": {
            "type": "string",
            "description": "Code that identifies the coupon.",
            "nullable": true
          },
          "reasonCode": {
            "type": "integer",
            "description": "Code that identifies the reason the coupon was invalid.",
            "format": "int32"
          },
          "reason": {
            "type": "string",
            "description": "Description text of the reason.",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "description": "Create date of the invalid coupon.",
            "format": "date-time"
          },
          "discountId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Represents a coupon that is considered invalid by the Mozu pricing service."
      },
      "CartMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "messageType": {
            "type": "string",
            "nullable": true
          },
          "productsRemoved": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeProduct"
            },
            "nullable": true
          }
        }
      },
      "Cart": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommerceAggregate"
          }
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItem"
            },
            "description": "List of items in the cart.",
            "nullable": true
          },
          "couponCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Coupon codes associated with this order.  Only set on order import.",
            "nullable": true
          },
          "invalidCoupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvalidCoupon"
            },
            "description": "A list of invalid coupons that were attempted on the cart",
            "nullable": true
          },
          "priceListCode": {
            "type": "string",
            "description": "Pricelist code",
            "nullable": true
          },
          "cartMessage": {
            "$ref": "#/components/schemas/CartMessage"
          },
          "cartMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartMessage"
            },
            "nullable": true
          },
          "handlingAmount": {
            "type": "number",
            "description": "Order level handling fees excluding any discounts.",
            "format": "double",
            "nullable": true
          },
          "handlingSubTotal": {
            "type": "number",
            "description": "Handling fees for the Order as well as CartItems (e.g. if the Cart has a $5 handling fee and an CartItem has a $2 handling fee per item quantity and the quantity of items is 2 then the value in this property would be $9)",
            "format": "double",
            "nullable": true
          },
          "handlingTotal": {
            "type": "number",
            "description": "Handling fees including any discounts.",
            "format": "double",
            "nullable": true
          },
          "reservationId": {
            "type": "string",
            "description": "Inventory Reservation id for a cart.",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "nullable": true
          }
        },
        "description": "Details of the current cart, including shopper's user ID, items listed in the cart, and any system messages. \r\nFor each item, contains the list of available discounts and the actual discount applied to the cart item."
      },
      "CartItemCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItem"
            },
            "nullable": true
          }
        },
        "description": "Collection of items in the cart. A collection is not paged."
      },
      "CartChangeMessageCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeChangeMessage"
            },
            "nullable": true
          }
        },
        "description": "Collection of cart messages returned as a whole. A collection is not paged."
      },
      "Channel": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "integer",
            "description": "Tenant that owns the channel.",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "description": "Code to uniquely identify the channel.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Friendly name of the channel.",
            "nullable": true
          },
          "region": {
            "type": "string",
            "description": "Region of the channel.",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "Country code of the channel.",
            "nullable": true
          },
          "groupCode": {
            "type": "string",
            "description": "Code to uniquely identify the channel group, if any that contains this channel.",
            "nullable": true
          },
          "siteIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of site Id's that this channel contains.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "description": "Channel used to group sites for commerce purposes."
      },
      "ChannelCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Channel"
            },
            "nullable": true
          }
        }
      },
      "ChannelGroup": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "integer",
            "description": "Tenant that owns the channel.",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "description": "Code to uniquely identify the channel.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Friendly name of the channel.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "description": "Used to group channels together to manage common channel information."
      },
      "ChannelGroupCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelGroup"
            },
            "nullable": true
          }
        }
      },
      "GiftInfo": {
        "type": "object",
        "properties": {
          "isGiftItem": {
            "type": "boolean",
            "description": "Flag to indicate whether the item is a gift item",
            "nullable": true
          },
          "giftMessage": {
            "type": "string",
            "description": "Item level gift message",
            "nullable": true
          }
        }
      },
      "CheckoutGrouping": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for this grouping.",
            "nullable": true
          },
          "destinationId": {
            "type": "string",
            "description": "The DestinationId used by items in this grouping, which may be {null}.",
            "nullable": true
          },
          "fulfillmentMethod": {
            "type": "string",
            "description": "The FulfillmentMethod used by items in this grouping.",
            "nullable": true
          },
          "orderItemIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Identifiers of the items that make up this grouping.",
            "nullable": true
          },
          "shippingMethodCode": {
            "type": "string",
            "description": "Code that uniquely identifies the shipping method such as \"Ground,\" \"Overnight,\" or \"Digital.\"\r\nThe site's shipping settings lists the valid shipping methods specified for this site.",
            "nullable": true
          },
          "shippingMethodName": {
            "type": "string",
            "description": "Readable name of the shipping method.",
            "nullable": true
          },
          "standaloneGroup": {
            "type": "boolean",
            "description": "Indicates whether a non ship group should combine with a ship group"
          },
          "shippingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDiscount"
            },
            "nullable": true
          },
          "handlingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
            },
            "nullable": true
          },
          "dutyAmount": {
            "type": "number",
            "description": "Any duty fee applied directly to this group. Items can also have their own duty fee.",
            "format": "double",
            "nullable": true
          },
          "dutyTotal": {
            "type": "number",
            "description": "Total raw duty amounts for this group.",
            "format": "double"
          },
          "shippingAmount": {
            "type": "number",
            "description": "If a shipping method applies directly to this grouping (versus the items), this is the raw shipping amount for the group.",
            "format": "double",
            "nullable": true
          },
          "shippingSubTotal": {
            "type": "number",
            "description": "The raw shipping amount minus shipping discounts.",
            "format": "double"
          },
          "itemLevelShippingDiscountTotal": {
            "type": "number",
            "description": "The total value of item-level shipping discounts applied to this group.",
            "format": "double"
          },
          "orderLevelShippingDiscountTotal": {
            "type": "number",
            "description": "The total value of order-level (group-level) shipping discounts applied to this group.",
            "format": "double"
          },
          "shippingTax": {
            "type": "number",
            "description": "Group-level shipping tax. Does not account for item shipping tax.",
            "format": "double",
            "nullable": true
          },
          "shippingTaxTotal": {
            "type": "number",
            "description": "The total shipping tax for this group, accounting for both group-level and item-level shipping tax.",
            "format": "double"
          },
          "shippingTotal": {
            "type": "number",
            "description": "The total shipping cost for this group, accounting for discounts and tax.",
            "format": "double"
          },
          "handlingAmount": {
            "type": "number",
            "description": "The handling fee amount that's applicable to this grouping.",
            "format": "double",
            "nullable": true
          },
          "handlingSubTotal": {
            "type": "number",
            "description": "The total raw handling amounts minus handling discounts.",
            "format": "double"
          },
          "itemLevelHandlingDiscountTotal": {
            "type": "number",
            "description": "The total value of item-level handling discounts applied to this group.",
            "format": "double"
          },
          "orderLevelHandlingDiscountTotal": {
            "type": "number",
            "description": "The total value of order-level (group-level) handling discounts applied to this group.",
            "format": "double"
          },
          "handlingTax": {
            "type": "number",
            "description": "Group-level handling tax. Does not account for item handling tax.",
            "format": "double",
            "nullable": true
          },
          "handlingTaxTotal": {
            "type": "number",
            "description": "The total handling tax for this group, accounting for both group-level and item-level handling tax.",
            "format": "double"
          },
          "handlingTotal": {
            "type": "number",
            "description": "The total handling cost for this group, accounting for discounts and tax.",
            "format": "double"
          },
          "taxData": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "PaymentActionTarget": {
        "type": "object",
        "properties": {
          "targetType": {
            "type": "string",
            "description": "Specifies if the Mozu.CommerceRuntime.Contracts.Payments.PaymentActionTarget.TargetId is a Checkout Id, Order Id, or Return Id.",
            "nullable": true
          },
          "targetId": {
            "type": "string",
            "description": "The Id of the Checkout/Order/Return to target.",
            "nullable": true
          },
          "targetNumber": {
            "type": "integer",
            "description": "The number of the Checkout/Order/Return to target.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "PaymentCardReference": {
        "type": "object",
        "properties": {
          "paymentOrCardType": {
            "type": "string",
            "description": "Card type such as Visa, MasterCard, American Express, or Discover.",
            "nullable": true
          },
          "cardNumberPartOrMask": {
            "type": "string",
            "description": "The visible part of the card number that the merchant uses to refer to \r\npayment information, for example, the last for digits of the card number.",
            "nullable": true
          },
          "expireMonth": {
            "type": "integer",
            "description": "Month when the card expires.",
            "format": "int32"
          },
          "expireYear": {
            "type": "integer",
            "description": "Year when the card expires.",
            "format": "int32"
          },
          "bin": {
            "type": "string",
            "description": "Year when the card expires.",
            "nullable": true
          }
        }
      },
      "PaymentCard": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentCardReference"
          }
        ],
        "properties": {
          "paymentServiceCardId": {
            "type": "string",
            "description": "Credit card number.",
            "nullable": true
          },
          "isUsedRecurring": {
            "type": "boolean",
            "description": "If true, the credit card is charged on a regular interval, such as for a subscription. (Not supported currently.)",
            "nullable": true
          },
          "nameOnCard": {
            "type": "string",
            "description": "Card holder's name as it appears on the card.",
            "nullable": true
          },
          "isCardInfoSaved": {
            "type": "boolean",
            "description": "If true, the card information is stored in the customer's account."
          },
          "isTokenized": {
            "type": "boolean",
            "description": "If true, the card is tokenized by external provider"
          },
          "ccLastFour": {
            "type": "string",
            "description": "Last four digit of Credit card\r\nOnly for OMS Only tenant.",
            "nullable": true
          }
        },
        "description": "If the customer is paying by credit card, the card holder's details, such as the name on the card, number, billing \r\naddress, and expiration dates."
      },
      "PaymentToken": {
        "type": "object",
        "properties": {
          "paymentServiceTokenId": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PurchaseOrderPayment": {
        "type": "object",
        "properties": {
          "purchaseOrderNumber": {
            "type": "string",
            "description": "Purchase order number",
            "nullable": true
          },
          "paymentTerm": {
            "$ref": "#/components/schemas/CommerceRuntimePurchaseOrderPaymentTerm"
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimePurchaseOrderCustomField"
            },
            "description": "Memo/custom fields",
            "nullable": true
          }
        },
        "description": "Purchase order payment"
      },
      "CheckPayment": {
        "type": "object",
        "properties": {
          "checkNumber": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "BillingInfo": {
        "type": "object",
        "properties": {
          "paymentType": {
            "type": "string",
            "description": "Type of payment, such as credit card, check by mail, or PayPal.\r\nsee Mozu.CommerceRuntime.Contracts.Payments.PaymentTypeConst for valid values",
            "nullable": true
          },
          "paymentWorkflow": {
            "type": "string",
            "nullable": true
          },
          "billingContact": {
            "$ref": "#/components/schemas/CommerceRuntimeContact"
          },
          "isSameBillingShippingAddress": {
            "type": "boolean",
            "description": "Indicates that billing and shipping address are the same"
          },
          "card": {
            "$ref": "#/components/schemas/PaymentCard"
          },
          "token": {
            "$ref": "#/components/schemas/PaymentToken"
          },
          "purchaseOrder": {
            "$ref": "#/components/schemas/PurchaseOrderPayment"
          },
          "check": {
            "$ref": "#/components/schemas/CheckPayment"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "storeCreditCode": {
            "type": "string",
            "description": "The store credit to use for this purchase",
            "nullable": true
          },
          "storeCreditType": {
            "type": "string",
            "description": "The type of store credit used for this purchase",
            "nullable": true
          },
          "customCreditType": {
            "type": "string",
            "description": "Name of custom stored credit type",
            "nullable": true
          },
          "externalTransactionId": {
            "type": "string",
            "description": "Transaction Id from third party payment source like Visa Checkout, Amazon",
            "nullable": true
          },
          "isRecurring": {
            "type": "boolean",
            "description": "Indicates whether the payment is used in recurring transactions. ex- subscription payments"
          },
          "recurringTransactionId": {
            "type": "string",
            "description": "Recurring Payment Id returned by Payment Gateway\r\nnetworkTransactionId for vantiv\r\npreviousTransactionId for cybersource etc",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data from payment providers",
            "nullable": true
          }
        },
        "description": "Customer's payment details such as payment type (credit card, check by mail, or PayPal)\r\nand cardholder information if payment is by credit card."
      },
      "SubPayment": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "nullable": true
          },
          "amountCollected": {
            "type": "number",
            "format": "double"
          },
          "amountCredited": {
            "type": "number",
            "format": "double"
          },
          "amountRequested": {
            "type": "number",
            "format": "double"
          },
          "amountRefunded": {
            "type": "number",
            "format": "double"
          },
          "target": {
            "$ref": "#/components/schemas/PaymentActionTarget"
          }
        }
      },
      "PaymentGatewayResponseData": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key from payment gateway",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Value from payment gateway",
            "nullable": true
          }
        },
        "description": "Payment gateway reponse data"
      },
      "CapturableShipmentSummary": {
        "type": "object",
        "properties": {
          "shipmentNumber": {
            "type": "integer",
            "description": "The identifying number of the shipment affected by the payment action",
            "format": "int32"
          },
          "shipmentTotal": {
            "type": "number",
            "description": "The shipment's total when the payment action occurred",
            "format": "double"
          },
          "amountApplied": {
            "type": "number",
            "description": "The amount applied by the payment action",
            "format": "double"
          }
        }
      },
      "PaymentInteraction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of this payment transaction interaction.",
            "nullable": true
          },
          "gatewayInteractionId": {
            "type": "integer",
            "description": "Unique identifier of the gateway interaction. Used for credit card transactions, where the\r\npayment service creates a GatewayInteractionId for each transaction interaction.",
            "format": "int32",
            "nullable": true
          },
          "paymentId": {
            "type": "string",
            "description": "Unique identifier of the original transaction of which this current interaction is a part.",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "description": "Unique identifier of the order with which this transaction is associated.",
            "nullable": true
          },
          "target": {
            "$ref": "#/components/schemas/PaymentActionTarget"
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO currency code for the transaction. Currently, only USD is supported.",
            "nullable": true
          },
          "interactionType": {
            "type": "string",
            "description": "Types of transaction interactions which can be \"Authorization,\" \"Capture,\" \"AuthorizeAndCapture,\"\r\n\"Void,\" or \"Credit,\" \"CheckRequested,\" or \"CheckReceived.\"",
            "nullable": true
          },
          "checkNumber": {
            "type": "string",
            "description": "If paying by check, the check number.",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of the payment transaction interaction which can be either \"Success\" or \"Failure.\"",
            "nullable": true
          },
          "paymentEntryStatus": {
            "type": "string",
            "description": "Status of the payment when the transaction interaction was created",
            "nullable": true
          },
          "isRecurring": {
            "type": "boolean",
            "description": "If true, the product is purchased or fulfilled at regular intervals, for example, a monthly billing or a subscription. (Not currently implemented.)",
            "nullable": true
          },
          "isManual": {
            "type": "boolean",
            "description": "If the payment is a manual payment, this is set to true"
          },
          "gatewayTransactionId": {
            "type": "string",
            "description": "Unique identifier of the transaction supplied by PCIaaS.",
            "nullable": true
          },
          "gatewayAuthCode": {
            "type": "string",
            "description": "If required by the payment gateway, the authorization code of the transaction. Supplied by PCIaaS.",
            "nullable": true
          },
          "gatewayAVSCodes": {
            "type": "string",
            "description": "Gateway AVS Codes. Supplied by PCIaaS.",
            "nullable": true
          },
          "gatewayCVV2Codes": {
            "type": "string",
            "description": "Gateway CVV2 Codes. Supplied by PCIaaS.",
            "nullable": true
          },
          "gatewayResponseCode": {
            "type": "string",
            "description": "Gateway response code. Supplied by PCIaaS.",
            "nullable": true
          },
          "gatewayResponseText": {
            "type": "string",
            "description": "Gateway response text. Supplied by PCIaaS.",
            "nullable": true
          },
          "gatewayResponseData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentGatewayResponseData"
            },
            "description": "A List of payment response data required to act on authorization when using external order management systems",
            "nullable": true
          },
          "paymentTransactionInteractionIdReference": {
            "type": "integer",
            "description": "Unique identifier of previous PaymentTransactionInteraction that this PaymentTransactionInteraction is modifying.\r\nFor instance, when crediting a capture, set the PaymentTransactionInteractionIdReference to the capture PaymentTransactionInteractionID.",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount of funds associated with this interaction.",
            "format": "double",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "Note to be entered by merchant/application",
            "nullable": true
          },
          "interactionDate": {
            "type": "string",
            "description": "Date the interaction occurred",
            "format": "date-time",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "returnId": {
            "type": "string",
            "description": "Return Id, if the interaction is a Credit for a return-refund.",
            "nullable": true
          },
          "refundId": {
            "type": "string",
            "description": "Refund Id, if the interaction is for a stand alone refund.",
            "nullable": true
          },
          "capturableShipmentsSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapturableShipmentSummary"
            },
            "description": "Stores pairings of shipment number to shipment total for all captured shipments. This was added for generating TLogs.",
            "nullable": true
          }
        },
        "description": "A single interaction of a potential list of intereactions for a transaction. The scope of the transaction is the entire payment\r\ninterchange. It is created upon authorization and is used for all subsequent interactions performed against the authorize,\r\nsuch as consecutive captures."
      },
      "GatewayGiftCard": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "cardNumber": {
            "type": "string",
            "nullable": true
          },
          "cardPin": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Payment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of this order transaction.",
            "nullable": true
          },
          "groupId": {
            "$ref": "#/components/schemas/PaymentActionTarget"
          },
          "paymentServiceTransactionId": {
            "type": "string",
            "description": "Unique identifier of the transaction, specified by the payment service processesing this transaction.",
            "nullable": true
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Actions available to the payment",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "description": "Unique identifier of the order with which this transaction is associated.",
            "nullable": true
          },
          "paymentType": {
            "type": "string",
            "description": "Type of Payment",
            "nullable": true
          },
          "paymentWorkflow": {
            "type": "string",
            "description": "The source of data for this payment.  By default, this will be set to 'mozu'",
            "nullable": true
          },
          "externalTransactionId": {
            "type": "string",
            "description": "The external/third party transaction Id for this payment. This is used to store the transaction Id from digital wallet like Visa Checkout",
            "nullable": true
          },
          "billingInfo": {
            "$ref": "#/components/schemas/BillingInfo"
          },
          "data": {
            "type": "object",
            "description": "Custom data from payment providers",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Current status of this transaction which are described by the PaymentStatusConst class.",
            "nullable": true
          },
          "subPayments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubPayment"
            },
            "description": "List of sub payments that correspond to child orders in case of multiship orders.",
            "nullable": true
          },
          "interactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentInteraction"
            },
            "description": "List of intereactions for this transaction. A transaction is created upon authorization and lasts across the payment \r\ninterchange, which can consist of multiple interactions, such as consecutive captures.",
            "nullable": true
          },
          "isRecurring": {
            "type": "boolean",
            "description": "If true, the product is purchased or fulfilled at regular intervals, for example, \r\nmonthly billing or a subscription. (Not currently supported.)"
          },
          "amountCollected": {
            "type": "number",
            "description": "Amount collected on the payment",
            "format": "double"
          },
          "amountCredited": {
            "type": "number",
            "description": "Amount credited back to the payment.",
            "format": "double"
          },
          "amountRequested": {
            "type": "number",
            "description": "Derived from the Amount on the initial payment create, used to help storefront determine how much can be captured for multiple payments.\r\nSee Order.AmountRemainingForPayment for an example.",
            "format": "double"
          },
          "changeMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeChangeMessage"
            },
            "description": "Change messages related to the payment.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "gatewayGiftCard": {
            "$ref": "#/components/schemas/GatewayGiftCard"
          },
          "installmentPlanCode": {
            "type": "string",
            "description": "Stores the Installment Plan code. Installment is only supported on subscription orders",
            "nullable": true
          }
        },
        "description": "Payment transaction associated with this order. It is the entire payment interchange between the merchant who is forwarding the customer's payment \r\ninformation and the payment service who is authorizing and capturing payment. Payment can be either by credit card, check, or PayPal. (PayPal not\r\ncurrently supported.)"
      },
      "AlternateContact": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First Name of alternate contact during order process",
            "nullable": true
          },
          "lastNameOrSurname": {
            "type": "string",
            "description": "Last Name of alternate contact during order process",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "Email Address of alternate contact during order process",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone Number of alternate contact during order process",
            "nullable": true
          }
        }
      },
      "Checkout": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier.",
            "nullable": true
          },
          "siteId": {
            "type": "integer",
            "description": "Unique identifier of the Site.",
            "format": "int32"
          },
          "tenantId": {
            "type": "integer",
            "description": "Unique identifier of the Tenant.",
            "format": "int32"
          },
          "number": {
            "type": "integer",
            "description": "A checkout number that is only assigned after the checkout is placed.",
            "format": "int32",
            "nullable": true
          },
          "originalCartId": {
            "type": "string",
            "description": "Unique identifier for the cart that was converted to checkout.",
            "nullable": true
          },
          "submittedDate": {
            "type": "string",
            "description": "When the customer placed (submitted) the order.",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Is this Order Online or Offline? Online means shopper entered at checkout, offline means a phone order.",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
            },
            "description": "List of items in the checkout.",
            "nullable": true
          },
          "groupings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckoutGrouping"
            },
            "description": "List of checkout grouping.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "destinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeDestination"
            },
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            },
            "description": "Payment transaction associated with this checkout. It is the entire payment interchange between the merchant \r\nwho is forwarding the customer's payment information and the payment service who is authorizing and \r\ncapturing payment. Payment can be either by credit card, check, or PayPal.",
            "nullable": true
          },
          "amountRemainingForPayment": {
            "type": "number",
            "description": "A counter for how much of the total has not been claimed by payments.\r\nThis is computed by Total - (sum of Payments where State is not Voided/Declined)",
            "format": "double"
          },
          "acceptsMarketing": {
            "type": "boolean",
            "description": "Does the customer accept marketing",
            "nullable": true
          },
          "customerAccountId": {
            "type": "integer",
            "description": "Unique identifier of the customer account.",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email address for checkout",
            "nullable": true
          },
          "alternateContact": {
            "$ref": "#/components/schemas/AlternateContact"
          },
          "customerTaxId": {
            "type": "string",
            "description": "The customers tax ID. If Customer Account ID exists in the system, will set this.",
            "nullable": true,
            "readOnly": true
          },
          "isTaxExempt": {
            "type": "boolean",
            "description": "Unique identifier of the customer account.",
            "nullable": true,
            "readOnly": true
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO Currency Code.",
            "nullable": true
          },
          "priceListCode": {
            "type": "string",
            "description": "Pricelist code for the checkout",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
            },
            "nullable": true
          },
          "shopperNotes": {
            "$ref": "#/components/schemas/CommerceRuntimeShopperNotes"
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data for a given vendor set within the commerce process.",
            "nullable": true
          },
          "taxData": {
            "type": "object",
            "description": "Storage for any additional/custom tax data.",
            "nullable": true
          },
          "channelCode": {
            "type": "string",
            "description": "Unique identifier of the channel for this item.",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "Identifies the location at which the order was placed if the order was placed externally.",
            "nullable": true
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address of the user placing the order. (User or customer?)",
            "nullable": true
          },
          "sourceDevice": {
            "type": "string",
            "description": "Source device of the user placing the order. (User or customer?)",
            "nullable": true
          },
          "visitId": {
            "type": "string",
            "description": "Identifies the Visit ID that was current when the order was placed or when the cart was last updated.",
            "nullable": true
          },
          "webSessionId": {
            "type": "string",
            "description": "Identifies the web session used to place the order or last update the cart.",
            "nullable": true
          },
          "customerInteractionType": {
            "type": "string",
            "description": "Determines the interaction type that a customer will use to create this object.\r\nValid values are: Website, Store, Call, Unknown",
            "nullable": true
          },
          "orderDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
            },
            "nullable": true
          },
          "couponCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Coupon codes associated with this order.",
            "nullable": true
          },
          "invalidCoupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvalidCoupon"
            },
            "description": "A list of invalid coupons that were attempted on the order.",
            "nullable": true
          },
          "suggestedDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuggestedDiscount"
            },
            "nullable": true
          },
          "discountThresholdMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeThresholdMessage"
            },
            "description": "List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage objects that are valid for the current value of the cart/order.",
            "nullable": true
          },
          "dutyTotal": {
            "type": "number",
            "description": "Total duty fees",
            "format": "double",
            "nullable": true
          },
          "feeTotal": {
            "type": "number",
            "description": "Total Fees",
            "format": "double"
          },
          "subTotal": {
            "type": "number",
            "description": "Subtotal before any coupon codes, taxes, fees, etc.",
            "format": "double"
          },
          "itemLevelProductDiscountTotal": {
            "type": "number",
            "description": "The total value of item-level product discounts.",
            "format": "double"
          },
          "orderLevelProductDiscountTotal": {
            "type": "number",
            "description": "The total value of order-level (group-level) product discounts.",
            "format": "double"
          },
          "itemTaxTotal": {
            "type": "number",
            "description": "Total tax on products.",
            "format": "double"
          },
          "itemTotal": {
            "type": "number",
            "description": "The total product cost, accounting for discounts and tax.",
            "format": "double"
          },
          "shippingSubTotal": {
            "type": "number",
            "description": "Shipping does not appear on cart.",
            "format": "double"
          },
          "itemLevelShippingDiscountTotal": {
            "type": "number",
            "description": "The total value of item-level shipping discounts.",
            "format": "double"
          },
          "orderLevelShippingDiscountTotal": {
            "type": "number",
            "description": "The total value of order-level (group-level) shipping discounts.",
            "format": "double"
          },
          "shippingTaxTotal": {
            "type": "number",
            "description": "Total tax on shipping.",
            "format": "double"
          },
          "shippingTotal": {
            "type": "number",
            "description": "Overall shipping total, accounting for item and order-level shipping costs, any shipping discounts, and shipping tax.",
            "format": "double"
          },
          "handlingSubTotal": {
            "type": "number",
            "description": "Pre-Discounted Handling Subtotal of the CommerceAggregate and its Items.\r\nReturns {null} if the calculated value is negative.",
            "format": "double"
          },
          "itemLevelHandlingDiscountTotal": {
            "type": "number",
            "description": "The total value of item-level handling discounts.",
            "format": "double"
          },
          "orderLevelHandlingDiscountTotal": {
            "type": "number",
            "description": "The total value of order-level (group-level) handling discounts.",
            "format": "double"
          },
          "handlingTaxTotal": {
            "type": "number",
            "description": "Total tax on handling.",
            "format": "double"
          },
          "handlingTotal": {
            "type": "number",
            "description": "Overall handling total, accounting for line and order-level handling costs, any handling discounts, and handling tax.",
            "format": "double"
          },
          "total": {
            "type": "number",
            "description": "Final total",
            "format": "double"
          }
        }
      },
      "CheckoutCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Checkout"
            },
            "nullable": true
          }
        },
        "description": "Paged collection of checkouts."
      },
      "ShippingPrice": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "ISO currency code such as US dollars. Currently, only USD is supported.",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "How much the customer pays for shipping which includes any shipping discounts that the merchant offers.",
            "format": "double",
            "nullable": true
          }
        },
        "description": "Shipping pricing information which includes the cost to the merchant and the price that the customer pays."
      },
      "CheckoutGroupRates": {
        "type": "object",
        "properties": {
          "groupingId": {
            "type": "string",
            "nullable": true
          },
          "shippingRates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeShippingRate"
            },
            "nullable": true
          }
        }
      },
      "CheckoutGroupShippingMethod": {
        "type": "object",
        "properties": {
          "groupingId": {
            "type": "string",
            "nullable": true
          },
          "shippingRate": {
            "$ref": "#/components/schemas/CommerceRuntimeShippingRate"
          }
        }
      },
      "CheckoutAction": {
        "type": "object",
        "properties": {
          "actionName": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "DigitalWallet": {
        "type": "object",
        "properties": {
          "digitalWalletData": {
            "type": "string",
            "description": "Digital wallet data.\r\nNote: Transform the Json data to a string.",
            "nullable": true
          },
          "cartId": {
            "type": "string",
            "description": "Cart ID\r\nNote: This property should only be set if the order is not created and user opted to \r\ncreate the order from cart using digital wallet.",
            "nullable": true
          }
        },
        "description": "Digital wallet contract"
      },
      "ItemsForDestination": {
        "type": "object",
        "properties": {
          "destinationId": {
            "type": "string",
            "nullable": true
          },
          "itemIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "ItemsAndDeliveryDates": {
        "type": "object",
        "properties": {
          "deliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "itemIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "PaymentGatewayInteraction": {
        "type": "object",
        "properties": {
          "gatewayInteractionId": {
            "type": "integer",
            "description": "Gateway Transaction Id from PCIaaS.  Not populated by incoming request.",
            "format": "int32",
            "nullable": true
          },
          "gatewayTransactionId": {
            "type": "string",
            "description": "Gateway Transaction Id from PCIaaS.  Not populated by incoming request.",
            "nullable": true
          },
          "gatewayAuthCode": {
            "type": "string",
            "description": "Gateway Transaction Id from PCIaaS.  Not populated by incoming request.",
            "nullable": true
          },
          "gatewayAVSCodes": {
            "type": "string",
            "description": "Not populated by incoming request.",
            "nullable": true
          },
          "gatewayCVV2Codes": {
            "type": "string",
            "description": "Not populated by incoming request.",
            "nullable": true
          },
          "gatewayResponseCode": {
            "type": "string",
            "description": "Not populated by incoming request.",
            "nullable": true
          },
          "gatewayResponseText": {
            "type": "string",
            "description": "Gateway response text. Supplied by PCIaaS.",
            "nullable": true
          }
        },
        "description": "Represents a manually entered payment gateway interaction."
      },
      "PaymentAction": {
        "type": "object",
        "properties": {
          "actionName": {
            "type": "string",
            "description": "Name of the Action to post",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO currency code for the transaction. Currently, only USD is supported.",
            "nullable": true
          },
          "checkNumber": {
            "type": "string",
            "description": "If paying by check, the check number.",
            "nullable": true
          },
          "returnUrl": {
            "type": "string",
            "description": "If paying by Paypal Express or some other potential non-gateway payment provider, a return redirect URL must be provided.",
            "nullable": true
          },
          "cancelUrl": {
            "type": "string",
            "description": "If paying by Paypal Express or some other potential non-gateway payment provider, a cancel redirect URL must be provided.\r\nThis will be used if something goes wrong on the third-party side.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount of funds to withdraw to pay for this order.",
            "format": "double",
            "nullable": true
          },
          "interactionDate": {
            "type": "string",
            "description": "Date the interaction occurred",
            "format": "date-time",
            "nullable": true
          },
          "newBillingInfo": {
            "$ref": "#/components/schemas/BillingInfo"
          },
          "referenceSourcePaymentId": {
            "type": "string",
            "description": "Reference payment id from which to copy the billing info.",
            "nullable": true
          },
          "manualGatewayInteraction": {
            "$ref": "#/components/schemas/PaymentGatewayInteraction"
          },
          "externalTransactionId": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data from payment providers",
            "nullable": true
          },
          "recaptcha": {
            "type": "string",
            "description": "Recaptcha for validation.",
            "nullable": true
          },
          "installmentPlanCode": {
            "type": "string",
            "description": "Stores the Installment Plan code. Installment is only supported on subscription orders",
            "nullable": true
          }
        }
      },
      "OrderNote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the note. System-supplied and read-only.",
            "nullable": true
          },
          "text": {
            "type": "string",
            "description": "Text of the note. Maximum 250 characters.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "description": "Internal notes that a merchant may add to the order. Maximum 250 characters."
      },
      "AbstractFulfillmentItem": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Code of the Product to be fulfilled.",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the order item",
            "format": "int32"
          },
          "fulfillmentItemType": {
            "type": "string",
            "description": "The type of fulfillment item",
            "nullable": true
          },
          "lineId": {
            "type": "integer",
            "description": "The line id associated with the fulfillment.",
            "format": "int32",
            "nullable": true
          },
          "optionAttributeFQN": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PackageItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractFulfillmentItem"
          }
        ],
        "description": "An item in a package representing a particular product."
      },
      "CollectionOfPackageItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the fulfillment unit.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "A human-readable identifier for this fulfillment unit.  If not set on create, will be autogenerated as a string of the form\r\n    {fulfillmentUnitType} #{next available int}",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of the fulfillment unit\r\nSee FulfillmentStatusConst",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageItem"
            },
            "description": "List of items in the fulfillment unit",
            "nullable": true
          },
          "fulfillmentDate": {
            "type": "string",
            "description": "Date of the pickup",
            "format": "date-time",
            "nullable": true
          },
          "fulfillmentLocationCode": {
            "type": "string",
            "description": "Location code from which to obtain this item",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Actions that can be taken on this fulfillment unit",
            "nullable": true
          },
          "changeMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeChangeMessage"
            },
            "description": "Change messages related to the fulfillment unit.",
            "nullable": true
          }
        }
      },
      "PackingSlipItemDetail": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {},
            "description": "Gets or Sets Attributes",
            "nullable": true
          },
          "lineId": {
            "type": "integer",
            "description": "Gets or Sets LineId",
            "format": "int32",
            "nullable": true
          },
          "originalOrderItemId": {
            "type": "string",
            "description": "Gets or Sets OriginalOrderItemId",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "Gets or Sets Quantity",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "Adjustment": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "internalComment": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrderValidationMessage": {
        "type": "object",
        "properties": {
          "orderItemId": {
            "type": "string",
            "description": "Order item id that this message applies to.  Can be empty.",
            "nullable": true
          },
          "messageType": {
            "type": "string",
            "description": "Identifier to indicate the type of the message, See OrderValidatorMessageTypeConst for options.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Actual message returned by the validator.",
            "nullable": true
          }
        },
        "description": "Validation message returned by an order validator."
      },
      "OrderValidationResult": {
        "type": "object",
        "properties": {
          "validationId": {
            "type": "string",
            "description": "Identifier set by the capability that states the id of this specific validation attempt",
            "nullable": true
          },
          "validatorName": {
            "type": "string",
            "description": "Identifier set by the capability that states the specific name of this validator.",
            "nullable": true
          },
          "validatorType": {
            "type": "string",
            "description": "Identifies the type of the validator (types are enumerated in OrderValidatorTypeConst)",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of the order validation result.  See OrderValidatorStatusConst for options.",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "DateTime that this validation result was created",
            "format": "date-time",
            "nullable": true
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderValidationMessage"
            },
            "description": "Messages returned by the order validator",
            "nullable": true
          }
        },
        "description": "The result of an order validator."
      },
      "Refund": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of this order transaction.",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "description": "Unique identifier of the order with which this refund is associated.",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "description": "Merchant-entered reason for this refund.",
            "nullable": true
          },
          "reasonCode": {
            "type": "string",
            "nullable": true
          },
          "payment": {
            "$ref": "#/components/schemas/Payment"
          },
          "amount": {
            "type": "number",
            "description": "Amount refunded.",
            "format": "double"
          },
          "refundMethod": {
            "type": "string",
            "description": "Refund Method.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "description": "Refund associated with an order. A refund is a single exchange of money from merchant to customer\r\nthat either encapsulates a refund to a credit card or an issuance of a store credit.\r\nA refund does not reduce the 'amount collected' on an order and it is possible for a refund to exceed the total order amount."
      },
      "CollectionOfPickupItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the fulfillment unit.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "A human-readable identifier for this fulfillment unit.  If not set on create, will be autogenerated as a string of the form\r\n    {fulfillmentUnitType} #{next available int}",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of the fulfillment unit\r\nSee FulfillmentStatusConst",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimePickupItem"
            },
            "description": "List of items in the fulfillment unit",
            "nullable": true
          },
          "fulfillmentDate": {
            "type": "string",
            "description": "Date of the pickup",
            "format": "date-time",
            "nullable": true
          },
          "fulfillmentLocationCode": {
            "type": "string",
            "description": "Location code from which to obtain this item",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Actions that can be taken on this fulfillment unit",
            "nullable": true
          },
          "changeMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeChangeMessage"
            },
            "description": "Change messages related to the fulfillment unit.",
            "nullable": true
          }
        }
      },
      "Pickup": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionOfPickupItem"
          }
        ],
        "description": "Represents a pickup by a customer from a merchant."
      },
      "DigitalPackageItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractFulfillmentItem"
          }
        ],
        "properties": {
          "giftCardCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CollectionOfDigitalPackageItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the fulfillment unit.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "A human-readable identifier for this fulfillment unit.  If not set on create, will be autogenerated as a string of the form\r\n    {fulfillmentUnitType} #{next available int}",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of the fulfillment unit\r\nSee FulfillmentStatusConst",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DigitalPackageItem"
            },
            "description": "List of items in the fulfillment unit",
            "nullable": true
          },
          "fulfillmentDate": {
            "type": "string",
            "description": "Date of the pickup",
            "format": "date-time",
            "nullable": true
          },
          "fulfillmentLocationCode": {
            "type": "string",
            "description": "Location code from which to obtain this item",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Actions that can be taken on this fulfillment unit",
            "nullable": true
          },
          "changeMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeChangeMessage"
            },
            "description": "Change messages related to the fulfillment unit.",
            "nullable": true
          }
        }
      },
      "DigitalPackage": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionOfDigitalPackageItem"
          }
        ]
      },
      "FulfillmentTask": {
        "type": "object",
        "properties": {
          "links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CommerceRuntimeLink"
            },
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "completed": {
            "type": "boolean",
            "nullable": true
          },
          "completedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeTaskInput"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "skippable": {
            "type": "boolean",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "taskId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ShipmentItem": {
        "type": "object",
        "properties": {
          "lineId": {
            "type": "integer",
            "format": "int32"
          },
          "originalOrderItemId": {
            "type": "string",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "nullable": true
          },
          "productCode": {
            "type": "string",
            "nullable": true
          },
          "variationProductCode": {
            "type": "string",
            "nullable": true
          },
          "optionAttributeFQN": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "fulfillmentLocationCode": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "isTaxable": {
            "type": "boolean"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "type": "number",
            "format": "double"
          },
          "actualPrice": {
            "type": "number",
            "format": "double"
          },
          "overridePrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "itemDiscount": {
            "type": "number",
            "format": "double"
          },
          "lineItemCost": {
            "type": "number",
            "format": "double"
          },
          "itemTax": {
            "type": "number",
            "format": "double"
          },
          "shipping": {
            "type": "number",
            "format": "double"
          },
          "shippingDiscount": {
            "type": "number",
            "format": "double"
          },
          "shippingTax": {
            "type": "number",
            "format": "double"
          },
          "handling": {
            "type": "number",
            "format": "double"
          },
          "handlingDiscount": {
            "type": "number",
            "format": "double"
          },
          "handlingTax": {
            "type": "number",
            "format": "double"
          },
          "duty": {
            "type": "number",
            "format": "double"
          },
          "isPackagedStandAlone": {
            "type": "boolean",
            "nullable": true
          },
          "readyForPickupQuantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "backorderReleaseDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "measurements": {
            "$ref": "#/components/schemas/CommerceRuntimePackageMeasurements"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeProductOption"
            },
            "nullable": true
          },
          "data": {
            "type": "object",
            "nullable": true
          },
          "taxData": {
            "type": "object",
            "nullable": true
          },
          "weightedShipmentAdjustment": {
            "type": "number",
            "format": "double"
          },
          "weightedLineItemTaxAdjustment": {
            "type": "number",
            "format": "double"
          },
          "weightedShippingAdjustment": {
            "type": "number",
            "format": "double"
          },
          "weightedShippingTaxAdjustment": {
            "type": "number",
            "format": "double"
          },
          "weightedHandlingAdjustment": {
            "type": "number",
            "format": "double"
          },
          "weightedHandlingTaxAdjustment": {
            "type": "number",
            "format": "double"
          },
          "weightedDutyAdjustment": {
            "type": "number",
            "format": "double"
          },
          "taxableShipping": {
            "type": "number",
            "format": "double"
          },
          "taxableLineItemCost": {
            "type": "number",
            "format": "double"
          },
          "taxableHandling": {
            "type": "number",
            "format": "double"
          },
          "fulfillmentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeFulfillmentField"
            },
            "nullable": true
          },
          "isAssemblyRequired": {
            "type": "boolean",
            "nullable": true
          },
          "parentItemId": {
            "type": "string",
            "nullable": true
          },
          "childItemIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "giftCards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeGiftCard"
            },
            "nullable": true
          },
          "locatorName": {
            "type": "string",
            "nullable": true
          },
          "inventoryTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryTags"
            },
            "nullable": true
          },
          "lineItemAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "isReservedInventory": {
            "type": "boolean"
          },
          "cartItemId": {
            "type": "string",
            "nullable": true
          },
          "sku": {
            "type": "string",
            "nullable": true
          },
          "partNumber": {
            "type": "string",
            "nullable": true
          },
          "upc": {
            "type": "string",
            "nullable": true
          },
          "isSubstitutable": {
            "type": "boolean",
            "nullable": true
          },
          "originalLineId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "originalQuantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "substituteQuantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "purchaseLocation": {
            "type": "string",
            "nullable": true
          },
          "isGift": {
            "type": "boolean",
            "description": "Indicate item is gift or not",
            "nullable": true
          },
          "giftMessage": {
            "type": "string",
            "description": "Gift message for item",
            "nullable": true
          }
        }
      },
      "FulfillmentAlternateContact": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First Name of alternate contact during order process",
            "nullable": true
          },
          "lastNameOrSurname": {
            "type": "string",
            "description": "Last Name of alternate contact during order process",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email Address of alternate contact during order process",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone Number of alternate contact during order process",
            "nullable": true
          }
        }
      },
      "FulfillmentServiceAppeasementReason": {
        "type": "object",
        "properties": {
          "moreInfo": {
            "type": "string",
            "nullable": true
          },
          "reasonCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "FulfillmentServiceAuditInfo": {
        "type": "object",
        "properties": {
          "createBy": {
            "type": "string",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updateBy": {
            "type": "string",
            "nullable": true
          },
          "updateDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "FulfillmentServiceFulfillmentField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "userEnteredValue": {
            "nullable": true
          }
        }
      },
      "FulfillmentServiceGiftCard": {
        "type": "object",
        "properties": {
          "activationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cardNumber": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "creditType": {
            "type": "string",
            "nullable": true
          },
          "creditValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "currentBalance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "customerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "initialBalance": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        }
      },
      "FulfillmentServiceInventoryTag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "FulfillmentServiceProductOption": {
        "type": "object",
        "properties": {
          "attributeFQN": {
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "shopperEnteredValue": {
            "nullable": true
          },
          "stringValue": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        }
      },
      "FulfillmentServiceSubstituteReason": {
        "type": "object",
        "properties": {
          "moreInfo": {
            "type": "string",
            "nullable": true
          },
          "reasonCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SubstitutedItem": {
        "type": "object",
        "properties": {
          "actualPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "allocatedQuantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "allowsBackOrder": {
            "type": "boolean",
            "nullable": true
          },
          "allowsFutureAllocate": {
            "type": "boolean",
            "nullable": true
          },
          "allowsSubstitution": {
            "type": "boolean",
            "nullable": true
          },
          "appeasementReason": {
            "$ref": "#/components/schemas/FulfillmentServiceAppeasementReason"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/FulfillmentServiceAuditInfo"
          },
          "backorderReleaseDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cartItemId": {
            "type": "string",
            "nullable": true
          },
          "childItemIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "creditCurrencyCode": {
            "type": "string",
            "nullable": true
          },
          "creditValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "data": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "duty": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "expectedDeliveryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fulfillmentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentServiceFulfillmentField"
            },
            "nullable": true
          },
          "giftCards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentServiceGiftCard"
            },
            "nullable": true
          },
          "giftMessage": {
            "type": "string",
            "nullable": true
          },
          "goodsType": {
            "type": "string",
            "nullable": true
          },
          "handling": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "handlingDiscount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "handlingTax": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "height": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "inventoryTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentServiceInventoryTag"
            },
            "nullable": true
          },
          "isAssemblyRequired": {
            "type": "boolean",
            "nullable": true
          },
          "isGift": {
            "type": "boolean",
            "nullable": true
          },
          "isPackagedStandAlone": {
            "type": "boolean",
            "nullable": true
          },
          "isReservedInventory": {
            "type": "boolean",
            "nullable": true
          },
          "isTaxable": {
            "type": "boolean",
            "nullable": true
          },
          "itemDiscount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "itemTax": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "length": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "lineId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lineItemAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "lineItemCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "locatorName": {
            "type": "string",
            "nullable": true
          },
          "manageStock": {
            "type": "boolean",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "optionAttributeFQN": {
            "type": "string",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentServiceProductOption"
            },
            "nullable": true
          },
          "originalLineId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "originalOrderItemId": {
            "type": "string",
            "nullable": true
          },
          "originalQuantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "overridePrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "parentItemId": {
            "type": "string",
            "nullable": true
          },
          "partNumber": {
            "type": "string",
            "nullable": true
          },
          "productCode": {
            "type": "string",
            "nullable": true
          },
          "purchaseLocation": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "readyForPickupQuantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "shipping": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shippingDiscount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shippingTax": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "sku": {
            "type": "string",
            "nullable": true
          },
          "substituteItemLineIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "substituteQuantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "substituteReason": {
            "$ref": "#/components/schemas/FulfillmentServiceSubstituteReason"
          },
          "taxData": {
            "nullable": true
          },
          "taxableHandling": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "taxableLineItemCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "taxableShipping": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "transferQuantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "trueTransferQuantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "unitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "upc": {
            "type": "string",
            "nullable": true
          },
          "variationProductCode": {
            "type": "string",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "weightUnit": {
            "type": "string",
            "nullable": true
          },
          "weightedDutyAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "weightedHandlingAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "weightedHandlingTaxAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "weightedLineItemTaxAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "weightedShipmentAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "weightedShippingAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "weightedShippingTaxAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "width": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        }
      },
      "Order": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommerceAggregate"
          }
        ],
        "properties": {
          "orderNumber": {
            "type": "integer",
            "description": "Order Number. This is an integer that is only assigned after an order is placed and enters the open state.",
            "format": "int32",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "Identifies the location at which the order was placed if the order was placed externally.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Version for concurrency purposes",
            "nullable": true
          },
          "parentOrderId": {
            "type": "string",
            "description": "If this Order has a parent order, this should be the parent's ID.",
            "nullable": true
          },
          "parentOrderNumber": {
            "type": "integer",
            "description": "If this order has a parent order, this should be the parent's Mozu.CommerceRuntime.Contracts.Orders.Order.OrderNumber.",
            "format": "int32",
            "nullable": true
          },
          "parentCheckoutId": {
            "type": "string",
            "description": "If this order originated from a multi-ship enabled site, this is the identifier of the originating checkout.",
            "nullable": true
          },
          "parentCheckoutNumber": {
            "type": "integer",
            "description": "If this order originated from a multi-ship enabled site, this is the number of the originating checkout.",
            "format": "int32",
            "nullable": true
          },
          "partialOrderNumber": {
            "type": "integer",
            "description": "If this order originated from a checkout, this is a sequence number out of the total orders created from that checkout.",
            "format": "int32",
            "nullable": true
          },
          "partialOrderCount": {
            "type": "integer",
            "description": "If this order originated from a checkout, this is the total number of orders created from that checkout.",
            "format": "int32",
            "nullable": true
          },
          "isPartialOrder": {
            "type": "boolean",
            "description": "Returns {true} if this order originated from a checkout and has sibling partial orders, otherwise {false}."
          },
          "parentReturnId": {
            "type": "string",
            "description": "If this order was created as part of a return, this should be the return's ID.",
            "nullable": true
          },
          "parentReturnNumber": {
            "type": "integer",
            "description": "If this order was created as part of a return, this should be the return's ReturnNumber.",
            "format": "int32",
            "nullable": true
          },
          "originalCartId": {
            "type": "string",
            "description": "Unique identifier for the cart that was converted to order.",
            "nullable": true
          },
          "originalQuoteId": {
            "type": "string",
            "description": "If this order originated from a quote, this is the identifier of the originating quote.",
            "nullable": true
          },
          "originalQuoteNumber": {
            "type": "integer",
            "description": "If this order originated from a quote, this is the number of the originating quote.",
            "format": "int32",
            "nullable": true
          },
          "priceListCode": {
            "type": "string",
            "description": "Pricelist code for the order",
            "nullable": true
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Actions available to the payment",
            "nullable": true
          },
          "shopperNotes": {
            "$ref": "#/components/schemas/CommerceRuntimeShopperNotes"
          },
          "customerAccountId": {
            "type": "integer",
            "description": "Unique identifier of the customer account.",
            "format": "int32",
            "nullable": true
          },
          "customerTaxId": {
            "type": "string",
            "description": "The customers tax ID.  If Customer Account ID exists in the system, will set this.",
            "nullable": true
          },
          "isTaxExempt": {
            "type": "boolean",
            "description": "Unique identifier of the customer account.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email address of the customer at the time the order is placed.",
            "nullable": true
          },
          "alternateContact": {
            "$ref": "#/components/schemas/AlternateContact"
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address of the user placing the order. (User or customer?)",
            "nullable": true
          },
          "sourceDevice": {
            "type": "string",
            "description": "Source device of the user placing the order. (User or customer?)",
            "nullable": true
          },
          "acceptsMarketing": {
            "type": "boolean",
            "description": "Does the customer accept marketing",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Current status of the order, which can be viewed in OrderStatusConst. System-supplied and read-only.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Is this Order Online or Offline? Online means shopper entered at checkout, offline means a phone order.",
            "nullable": true
          },
          "paymentStatus": {
            "type": "string",
            "description": "Current status of payment, which can be \"Null,\" \"AwaitingCheck,\" \"AwaitingPayment,\" \"Paid,\" \"Authorized,\" or \"Void.\" \r\nSystem-supplied and read-only.",
            "nullable": true
          },
          "returnStatus": {
            "type": "string",
            "description": "System-supplied and read-only.",
            "nullable": true
          },
          "isEligibleForReturns": {
            "type": "boolean",
            "description": "Marker for determining if the order is a) complete or b) has some items that are shipped and not part of any other return"
          },
          "totalCollected": {
            "type": "number",
            "description": "Total amount of money collected on the order via payments.",
            "format": "double"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeOrderAttribute"
            },
            "nullable": true
          },
          "adjustment": {
            "$ref": "#/components/schemas/Adjustment"
          },
          "shippingAdjustment": {
            "$ref": "#/components/schemas/Adjustment"
          },
          "handlingAdjustment": {
            "$ref": "#/components/schemas/Adjustment"
          },
          "shippingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDiscount"
            },
            "nullable": true
          },
          "handlingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
            },
            "description": "The list of historically-applied handling discounts.  The active one will have IsExcluded == false",
            "nullable": true
          },
          "handlingAmount": {
            "type": "number",
            "description": "Order level handling fees excluding any discounts.",
            "format": "double",
            "nullable": true
          },
          "handlingSubTotal": {
            "type": "number",
            "description": "Handling fees for the Order as well as OrderItems (e.g. if the Order has a $5 handling fee and an OrderItem has a $2 handling fee per item quantity and the quantity of items is 2 then the value in this property would be $9)",
            "format": "double",
            "nullable": true
          },
          "handlingTotal": {
            "type": "number",
            "description": "Handling fees including any discounts.",
            "format": "double",
            "nullable": true
          },
          "dutyAmount": {
            "type": "number",
            "description": "Order level duty or tariff amount. Does not take into account duties or tariffs specifically on items on the order",
            "format": "double",
            "nullable": true
          },
          "dutyTotal": {
            "type": "number",
            "description": "Duties or tariffs for the Order as well as OrderItems (e.g. if the Order has a $5 duty or tariff for any reason and an OrderItem has a $2 duty or tariff then the value in this property would be $7)",
            "format": "double",
            "nullable": true
          },
          "fulfillmentStatus": {
            "type": "string",
            "description": "Current fulfillment status, which can be \"NotFulfilled,\", \"PartiallyFulfilled\", or \"Fufilled.\" \r\nSystem-supplied and read-only.  Values are available in FulfillmentStatusConst of this class.",
            "nullable": true
          },
          "isFulfillable": {
            "type": "boolean",
            "description": "Flag to indicate whether it is safe to proceed with fulfillment on shipments on the order."
          },
          "submittedDate": {
            "type": "string",
            "description": "When the customer placed (submitted) the order.",
            "format": "date-time",
            "nullable": true
          },
          "shipmentCreationOffset": {
            "type": "integer",
            "description": "Release Shipment After(in minutes) (Order Submitted Date).",
            "format": "int32",
            "nullable": true
          },
          "releaseShipmentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cancelledDate": {
            "type": "string",
            "description": "Date the order was cancelled.",
            "format": "date-time",
            "nullable": true
          },
          "closedDate": {
            "type": "string",
            "description": "Date the order was closed. A closed order means that the order has been processed and items shipped.",
            "format": "date-time",
            "nullable": true
          },
          "acceptedDate": {
            "type": "string",
            "description": "When the order was accepted by the merchant",
            "format": "date-time",
            "nullable": true
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderNote"
            },
            "description": "Internal notes that a merchant may add to the order. Maximum 250 characters.",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
            },
            "description": "List of items in the order.",
            "nullable": true
          },
          "validationResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderValidationResult"
            },
            "description": "Validation results for the order when processes against validation capabilities.",
            "nullable": true
          },
          "billingInfo": {
            "$ref": "#/components/schemas/BillingInfo"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            },
            "description": "Payment transaction associated with this order. It is the entire payment interchange between the merchant \r\nwho is forwarding the customer's payment information and the payment service who is authorizing and \r\ncapturing payment. Payment can be either by credit card, check, or PayPal.",
            "nullable": true
          },
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Refund"
            },
            "description": "Refunds associated with this order. A refund is a single exchange of money from merchant to customer\r\nthat either encapsulates a refund to a credit card or an issuance of a store credit.\r\nRefunds does not reduce the 'amount collected' on an order and it is possible for refunds to exceed the total order amount.",
            "nullable": true
          },
          "credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeCredit"
            },
            "nullable": true
          },
          "packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimePackage"
            },
            "description": "Shipping package associated with this order.",
            "nullable": true
          },
          "pickups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pickup"
            },
            "description": "Fulfillment pickups associated with this order.",
            "nullable": true
          },
          "digitalPackages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DigitalPackage"
            },
            "description": "Fulfillment digital packages associated with this order.",
            "nullable": true
          },
          "shipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeShipment"
            },
            "description": "Package shipments associated with this order.",
            "nullable": true
          },
          "isDraft": {
            "type": "boolean",
            "description": "Is this order a draft version",
            "nullable": true
          },
          "hasDraft": {
            "type": "boolean",
            "description": "Does this order have a draft version.",
            "nullable": true
          },
          "isImport": {
            "type": "boolean",
            "description": "Was this order initiated from an external system",
            "nullable": true
          },
          "isHistoricalImport": {
            "type": "boolean",
            "description": "Indicates this was an order in a terminal state (completed/canceled) that was imported into the system for historical purposes.",
            "nullable": true
          },
          "importDate": {
            "type": "string",
            "description": "Date this item was imported",
            "format": "date-time",
            "nullable": true
          },
          "isUnified": {
            "type": "boolean",
            "description": "Was this order created by the Unified platform."
          },
          "externalId": {
            "type": "string",
            "description": "An order number to link this order to an external system",
            "nullable": true
          },
          "couponCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Coupon codes associated with this order.  Only set on order import.",
            "nullable": true
          },
          "invalidCoupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvalidCoupon"
            },
            "description": "A list of invalid coupons that were attempted on the order",
            "nullable": true
          },
          "amountAvailableForRefund": {
            "type": "number",
            "description": "This property represents AmountCaptured - AmountRefunded via returns.\r\nIt is read only.",
            "format": "double"
          },
          "amountRemainingForPayment": {
            "type": "number",
            "description": "A counter for how much of the order total has not been claimed by payments.\r\nThis is computed by Order.Total-(sum of Order.Payments where State is not voided/declined)",
            "format": "double"
          },
          "amountRefunded": {
            "type": "number",
            "description": "A counter for how much money has been issued in refunds.\r\nThis calculated field does NOT include refunds issued in returns.",
            "format": "double"
          },
          "readyToCapture": {
            "type": "boolean"
          },
          "isOptInForSms": {
            "type": "boolean",
            "description": "Whether the shopper opts in to curbside text notifications."
          },
          "forceSTHConsolidationOnSplitShipments": {
            "type": "boolean",
            "description": "Overrides the Fulfillment SiteSetting value for `ForceSTHConsolidationOnSplitShipments`.\r\nTODO autogen instead of manual addition",
            "nullable": true
          },
          "subscriptionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "All the subscriptions associated with the current order.",
            "nullable": true
          },
          "continuityOrderOrdinal": {
            "type": "integer",
            "description": "The ordinal to track the Continuity order.",
            "format": "int32"
          },
          "reservationId": {
            "type": "string",
            "description": "Inventory Reservation id for order.",
            "nullable": true
          },
          "restrictEdit": {
            "type": "boolean",
            "description": "Setting this flag on the order will restrict user from editing the order",
            "nullable": true
          },
          "restrictCancellation": {
            "type": "boolean",
            "description": "Settings this flag on the order will restrict user from Cancelling the order",
            "nullable": true
          }
        },
        "description": "Order form."
      },
      "PaymentCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            },
            "nullable": true
          }
        },
        "description": "A collection of payment transactions."
      },
      "ReasonItemBase": {
        "type": "object",
        "properties": {
          "reasonCode": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "needsMoreInfo": {
            "type": "boolean"
          }
        }
      },
      "RefundReasonItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReasonItemBase"
          }
        ]
      },
      "RefundReasonCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundReasonItem"
            },
            "nullable": true
          }
        }
      },
      "OrderReturnableItem": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "The product code of the associated item.",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "description": "The name of the associated product.",
            "nullable": true
          },
          "shipmentNumber": {
            "type": "integer",
            "description": "Shipment Number associated with product",
            "format": "int32",
            "nullable": true
          },
          "shipmentItemId": {
            "type": "integer",
            "description": "Shipment Item Id Number associated with product",
            "format": "int32",
            "nullable": true
          },
          "quantityOrdered": {
            "type": "integer",
            "description": "The number of units ordered.",
            "format": "int32"
          },
          "quantityFulfilled": {
            "type": "integer",
            "description": "The number of units fulfilled.",
            "format": "int32"
          },
          "quantityReturned": {
            "type": "integer",
            "description": "The number if times this item configuration was found in live returns (not cancelled or rejected).",
            "format": "int32"
          },
          "quantityRejected": {
            "type": "integer",
            "format": "int32"
          },
          "quantityReturnable": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "fulfillmentStatus": {
            "type": "string",
            "nullable": true
          },
          "orderItemId": {
            "type": "string",
            "nullable": true
          },
          "orderLineId": {
            "type": "integer",
            "format": "int32"
          },
          "orderItemOptionAttributeFQN": {
            "type": "string",
            "nullable": true
          },
          "unitQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "parentProductCode": {
            "type": "string",
            "nullable": true
          },
          "parentProductName": {
            "type": "string",
            "nullable": true
          },
          "fulfillmentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeFulfillmentField"
            },
            "description": "List of unique product identifiers for an item on shipment",
            "nullable": true
          },
          "sku": {
            "type": "string",
            "nullable": true
          },
          "mfgPartNumber": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrderReturnableItemCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderReturnableItem"
            },
            "nullable": true
          }
        },
        "description": "Collection of fulfillment information for items on an order."
      },
      "RepriceShipmentObject": {
        "type": "object",
        "properties": {
          "originalShipment": {
            "$ref": "#/components/schemas/CommerceRuntimeShipment"
          },
          "newShipment": {
            "$ref": "#/components/schemas/CommerceRuntimeShipment"
          }
        }
      },
      "RepriceCanceledShipmentObject": {
        "type": "object",
        "properties": {
          "canceledShipment": {
            "$ref": "#/components/schemas/CommerceRuntimeShipment"
          },
          "activeShipment": {
            "$ref": "#/components/schemas/CommerceRuntimeShipment"
          }
        },
        "description": "<param name=\"CanceledShipment\">Shipment being canceled</param>\r\n<param name=\"ActiveShipment\">One of the active shipment</param>"
      },
      "ShipmentAdjustment": {
        "type": "object",
        "properties": {
          "itemAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "itemTaxAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shippingAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shippingTaxAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "handlingAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "handlingTaxAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "dutyAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "appeasementReason": {
            "$ref": "#/components/schemas/CommerceRuntimeAppeasementReason"
          }
        }
      },
      "ShipmentItemAdjustment": {
        "type": "object",
        "properties": {
          "overridePrice": {
            "type": "number",
            "description": "Unit price override",
            "format": "double",
            "nullable": true
          },
          "appeasementReason": {
            "$ref": "#/components/schemas/CommerceRuntimeAppeasementReason"
          }
        }
      },
      "SplitShipmentsObject": {
        "type": "object",
        "properties": {
          "originalShipment": {
            "$ref": "#/components/schemas/CommerceRuntimeShipment"
          },
          "newShipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeShipment"
            },
            "nullable": true
          }
        }
      },
      "GiftMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Gift Message",
            "nullable": true
          }
        }
      },
      "CancelReasonItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReasonItemBase"
          }
        ]
      },
      "CancelReasonCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CancelReasonItem"
            },
            "nullable": true
          }
        }
      },
      "OrderCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "nullable": true
          }
        },
        "description": "Paged collection of orders. This is paged in case it's returning a long list the orders. \r\nfor a store."
      },
      "OrderAction": {
        "type": "object",
        "properties": {
          "actionName": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PricingTaxContext": {
        "type": "object",
        "properties": {
          "taxContextId": {
            "type": "string",
            "nullable": true
          },
          "customerId": {
            "type": "string",
            "nullable": true
          },
          "taxExemptId": {
            "type": "string",
            "nullable": true
          },
          "originAddress": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          },
          "destinationAddress": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          }
        }
      },
      "PricingProductPropertyValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "stringValue": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PricingProductAttribute": {
        "type": "object",
        "properties": {
          "inputType": {
            "type": "string",
            "nullable": true
          },
          "valueType": {
            "type": "string",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PricingProductProperty": {
        "type": "object",
        "properties": {
          "attributeFQN": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingProductPropertyValue"
            },
            "nullable": true
          },
          "attributeDetail": {
            "$ref": "#/components/schemas/PricingProductAttribute"
          },
          "isHidden": {
            "type": "boolean",
            "nullable": true
          },
          "isMultiValue": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "PricingDiscountTarget": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "includedCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "excludedCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "includedCategoriesOperator": {
            "type": "string",
            "nullable": true
          },
          "excludedCategoriesOperator": {
            "type": "string",
            "nullable": true
          },
          "includedProductCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "excludedProductCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "includeAllProducts": {
            "type": "boolean"
          },
          "shippingMethods": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "shippingZones": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "PricingDiscountCondition": {
        "type": "object",
        "properties": {
          "requiresCoupon": {
            "type": "boolean"
          },
          "couponCode": {
            "type": "string",
            "nullable": true
          },
          "minimumQuantityProductsRequiredInCategories": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "includedCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "excludedCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "minimumQuantityRequiredProducts": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "includedProductCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "excludedProductCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "paymentWorkflows": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "customerSegmentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "minimumOrderAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maximumOrderAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "minimumLifetimeValueAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "minimumCategorySubtotalBeforeDiscounts": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "minDistinctProductsRequired": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "PricingDiscount": {
        "type": "object",
        "properties": {
          "discountId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "friendlyDescription": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "scope": {
            "type": "string",
            "nullable": true
          },
          "maxRedemptions": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maximumUsesPerUser": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "requiresAuthenticatedUser": {
            "type": "boolean"
          },
          "doesNotApplyToProductsWithSalePrice": {
            "type": "boolean"
          },
          "maximumRedemptionsPerOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maximumDiscountValuePerOrder": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxDiscountValuePerRedemption": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "doesNotApplyToMultiShipToOrders": {
            "type": "boolean",
            "nullable": true
          },
          "includedPriceLists": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "redemptions": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "amountType": {
            "type": "string",
            "nullable": true
          },
          "target": {
            "$ref": "#/components/schemas/PricingDiscountTarget"
          },
          "condition": {
            "$ref": "#/components/schemas/PricingDiscountCondition"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "deprecated": true
          },
          "stackingLayer": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PricingAppliedDiscount": {
        "type": "object",
        "properties": {
          "impact": {
            "type": "number",
            "format": "double"
          },
          "discount": {
            "$ref": "#/components/schemas/PricingDiscount"
          },
          "couponCode": {
            "type": "string",
            "nullable": true
          },
          "couponSetId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "PricingAppliedLineItemDiscount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PricingAppliedDiscount"
          }
        ],
        "properties": {
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "impactPerUnit": {
            "type": "number",
            "format": "double"
          },
          "isForced": {
            "type": "boolean"
          },
          "normalizedImpact": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "PricingAppliedLineItemProductDiscount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PricingAppliedLineItemDiscount"
          }
        ],
        "properties": {
          "appliesToSalePrice": {
            "type": "boolean"
          }
        }
      },
      "PricingAppliedLineItemShippingDiscount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PricingAppliedLineItemDiscount"
          }
        ],
        "properties": {
          "shippingMethodCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PricingTaxableLineItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "productCode": {
            "type": "string",
            "nullable": true
          },
          "variantProductCode": {
            "type": "string",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "productProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingProductProperty"
            },
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "lineItemPrice": {
            "type": "number",
            "format": "double"
          },
          "discountTotal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "discountedTotal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shippingAmount": {
            "type": "number",
            "format": "double"
          },
          "handlingAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "feeTotal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "isTaxable": {
            "type": "boolean",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "object",
            "nullable": true
          },
          "productDiscount": {
            "$ref": "#/components/schemas/PricingAppliedLineItemProductDiscount"
          },
          "shippingDiscount": {
            "$ref": "#/components/schemas/PricingAppliedLineItemShippingDiscount"
          },
          "productDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingAppliedLineItemProductDiscount"
            },
            "nullable": true
          },
          "shippingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingAppliedLineItemShippingDiscount"
            },
            "nullable": true
          },
          "originAddress": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          },
          "destinationAddress": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          }
        }
      },
      "PricingTaxAttribute": {
        "type": "object",
        "properties": {
          "fullyQualifiedName": {
            "type": "string",
            "nullable": true
          },
          "attributeDefinitionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {},
            "nullable": true
          }
        }
      },
      "PricingAppliedOrderShippingDiscount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PricingAppliedDiscount"
          }
        ],
        "properties": {
          "shippingMethodCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PricingTaxableOrder": {
        "type": "object",
        "properties": {
          "orderDate": {
            "type": "string",
            "format": "date-time"
          },
          "taxContext": {
            "$ref": "#/components/schemas/PricingTaxContext"
          },
          "lineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingTaxableLineItem"
            },
            "nullable": true
          },
          "shippingAmount": {
            "type": "number",
            "format": "double"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "handlingFee": {
            "type": "number",
            "format": "double"
          },
          "originalDocumentCode": {
            "type": "string",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "orderNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "originalOrderDate": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "object",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingTaxAttribute"
            },
            "nullable": true
          },
          "shippingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingAppliedOrderShippingDiscount"
            },
            "nullable": true
          },
          "shippingDiscount": {
            "$ref": "#/components/schemas/PricingAppliedOrderShippingDiscount"
          },
          "orderDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingAppliedDiscount"
            },
            "nullable": true
          },
          "orderDiscount": {
            "$ref": "#/components/schemas/PricingAppliedDiscount"
          },
          "handlingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingAppliedDiscount"
            },
            "nullable": true
          },
          "handlingDiscount": {
            "$ref": "#/components/schemas/PricingAppliedDiscount"
          },
          "shippingMethodCode": {
            "type": "string",
            "nullable": true
          },
          "shippingMethodName": {
            "type": "string",
            "nullable": true
          },
          "taxRequestType": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "FulfillmentAction": {
        "type": "object",
        "properties": {
          "actionName": {
            "type": "string",
            "description": "Name of the fulfillment action to perform",
            "nullable": true
          },
          "packageIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ids of packages to mark as fulfilled",
            "nullable": true
          },
          "pickupIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ids of pickups to mark as fulfilled",
            "nullable": true
          },
          "digitalPackageIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ids of digital packages to mark as fulfilled",
            "nullable": true
          }
        },
        "description": "Action to perform a fulfillment operation on the order."
      },
      "OrderItemCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
            },
            "nullable": true
          }
        },
        "description": "Collection of items listed on the order."
      },
      "AttributeValueLocalizedContent": {
        "required": [
          "localeCode",
          "value"
        ],
        "type": "object",
        "properties": {
          "localeCode": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "QuoteComment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the comment. System-supplied and read-only.",
            "nullable": true
          },
          "text": {
            "type": "string",
            "description": "Text of the comment.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "description": "Quote Comments submitted by B2B buyer/seller."
      },
      "AuditRecordChangeField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Field/Property name which got Modified.",
            "nullable": true
          },
          "oldValue": {
            "type": "string",
            "description": "Old value of the field.",
            "nullable": true
          },
          "newValue": {
            "type": "string",
            "description": "Newly updated value of the field.",
            "nullable": true
          }
        },
        "description": "This will contains actual change in the AuditHistory."
      },
      "AuditRecordChange": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Indicate type of change like Add, Update, Remove.",
            "nullable": true
          },
          "path": {
            "type": "string",
            "description": "This will applicable only to the nested objects (Collection) on the quote like Quote Items, Destination contacts.\r\nThis field will indicate which item in the collection got modified exactly.\r\nNull path means it's not nested on the quote object.",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditRecordChangeField"
            },
            "description": "List of actual changes.",
            "nullable": true
          }
        },
        "description": "Group all related audit changes into AuditRecordChange."
      },
      "AuditRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditRecordChange"
            },
            "description": "List of changes for this audit history entry.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "description": "Group a set of changes made by a single user into a single audit history entry."
      },
      "Quote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the quote",
            "nullable": true
          },
          "siteId": {
            "type": "integer",
            "description": "Unique identifier of the Site.",
            "format": "int32"
          },
          "tenantId": {
            "type": "integer",
            "description": "Unique identifier of the Tenant.",
            "format": "int32"
          },
          "number": {
            "type": "integer",
            "description": "Auto generated number that is assigned to the quote when creation.",
            "format": "int32",
            "nullable": true
          },
          "submittedDate": {
            "type": "string",
            "description": "When the customer placed (submitted) the Quote.",
            "format": "date-time",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
            },
            "description": "List of items in the Quote.",
            "nullable": true
          },
          "auditHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditRecord"
            },
            "description": "User modified Audit History",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteComment"
            },
            "description": "Comments on a quote",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "When the quote will no longer be active. That is, the quote is considered abandoned. \r\nDate in UTC Date/Time.",
            "format": "date-time",
            "nullable": true
          },
          "fulfillmentInfo": {
            "$ref": "#/components/schemas/FulfillmentInfo"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "customerAccountId": {
            "type": "integer",
            "description": "Unique identifier of the customer account.",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email address for checkout",
            "nullable": true
          },
          "customerTaxId": {
            "type": "string",
            "description": "The customers tax ID. If Customer Account ID exists in the system, will set this.",
            "nullable": true,
            "readOnly": true
          },
          "isTaxExempt": {
            "type": "boolean",
            "description": "Unique identifier of the customer account.",
            "nullable": true,
            "readOnly": true
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO Currency Code.",
            "nullable": true
          },
          "priceListCode": {
            "type": "string",
            "description": "Pricelist code for the checkout",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data for a given vendor set within the commerce process.",
            "nullable": true
          },
          "taxData": {
            "type": "object",
            "description": "Storage for any additional/custom tax data.",
            "nullable": true
          },
          "channelCode": {
            "type": "string",
            "description": "Unique identifier of the channel for this item.",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "Identifies the location at which the order was placed if the order was placed externally.",
            "nullable": true
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address of the user placing the order. (User or customer?)",
            "nullable": true
          },
          "sourceDevice": {
            "type": "string",
            "description": "Source device of the user placing the order. (User or customer?)",
            "nullable": true
          },
          "visitId": {
            "type": "string",
            "description": "Identifies the Visit ID that was current when the order was placed or when the cart was last updated.",
            "nullable": true
          },
          "webSessionId": {
            "type": "string",
            "description": "Identifies the web session used to place the order or last update the cart.",
            "nullable": true
          },
          "customerInteractionType": {
            "type": "string",
            "description": "Determines the interaction type that a customer will use to create this object.\r\nValid values are: Website, Store, Call, Unknown",
            "nullable": true
          },
          "orderDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
            },
            "nullable": true
          },
          "subTotal": {
            "type": "number",
            "description": "Subtotal before any coupon codes, taxes, fees, etc.",
            "format": "double"
          },
          "itemLevelProductDiscountTotal": {
            "type": "number",
            "description": "The total value of item-level product discounts.",
            "format": "double"
          },
          "orderLevelProductDiscountTotal": {
            "type": "number",
            "description": "The total value of order-level (group-level) product discounts.",
            "format": "double"
          },
          "itemTaxTotal": {
            "type": "number",
            "description": "Total tax on products.",
            "format": "double"
          },
          "adjustment": {
            "$ref": "#/components/schemas/Adjustment"
          },
          "itemTotal": {
            "type": "number",
            "description": "The total product cost, accounting for discounts and tax.",
            "format": "double"
          },
          "total": {
            "type": "number",
            "description": "Final total",
            "format": "double"
          },
          "shippingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDiscount"
            },
            "nullable": true
          },
          "itemLevelShippingDiscountTotal": {
            "type": "number",
            "format": "double"
          },
          "orderLevelShippingDiscountTotal": {
            "type": "number",
            "format": "double"
          },
          "shippingAmount": {
            "type": "number",
            "format": "double"
          },
          "shippingAdjustment": {
            "$ref": "#/components/schemas/Adjustment"
          },
          "shippingSubTotal": {
            "type": "number",
            "format": "double"
          },
          "shippingTax": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shippingTaxTotal": {
            "type": "number",
            "format": "double"
          },
          "shippingTotal": {
            "type": "number",
            "format": "double"
          },
          "handlingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
            },
            "nullable": true
          },
          "itemLevelHandlingDiscountTotal": {
            "type": "number",
            "format": "double"
          },
          "orderLevelHandlingDiscountTotal": {
            "type": "number",
            "format": "double"
          },
          "handlingAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "handlingAdjustment": {
            "$ref": "#/components/schemas/Adjustment"
          },
          "handlingSubTotal": {
            "type": "number",
            "format": "double"
          },
          "handlingTax": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "handlingTaxTotal": {
            "type": "number",
            "format": "double"
          },
          "handlingTotal": {
            "type": "number",
            "format": "double"
          },
          "dutyAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "dutyTotal": {
            "type": "number",
            "format": "double"
          },
          "feeTotal": {
            "type": "number",
            "format": "double"
          },
          "isDraft": {
            "type": "boolean",
            "description": "Is this quote a draft"
          },
          "hasDraft": {
            "type": "boolean",
            "description": "Does this quote have a draft"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "couponCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Coupon codes associated with this Quote.",
            "nullable": true
          },
          "invalidCoupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvalidCoupon"
            },
            "description": "A list of invalid coupons that were attempted on the quote",
            "nullable": true
          }
        }
      },
      "QuoteCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Quote"
            },
            "nullable": true
          }
        }
      },
      "QuoteAdjustment": {
        "type": "object",
        "properties": {
          "adjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shippingAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "handlingAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        }
      },
      "ReturnReason": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The reason this item has been returned.",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity associated with this Reason.",
            "format": "int32"
          }
        },
        "description": "Represents a quantity associated with a given reason for a return"
      },
      "ReturnBundle": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Merchant-created code that uniquely identifies the product.",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The amount of this particular product in a bundle that is in this Return",
            "format": "int32"
          }
        }
      },
      "ReturnItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifer of the return",
            "nullable": true
          },
          "orderItemId": {
            "type": "string",
            "description": "The OrderItem that this ReturnItem is associated with. Either the Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.Product or the OrderItemId must be present.",
            "nullable": true
          },
          "orderLineId": {
            "type": "integer",
            "description": "The OrderLineId that this ReturnItem is associated with. If Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.OrderItemId is present, the OrderLineId should be present also.",
            "format": "int32",
            "nullable": true
          },
          "orderItemOptionAttributeFQN": {
            "type": "string",
            "description": "If this item refers to a product extra, provide the item's corresponding OptionAttributeFQN.",
            "nullable": true
          },
          "product": {
            "$ref": "#/components/schemas/CommerceRuntimeProduct"
          },
          "reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnReason"
            },
            "description": "For a given return reason (Damaged, Defective, MissingParts, DifferentExpectations, Late, NoLongerWanted, Other),\r\nhow many of the above OrderItem are to be replaced.  This value is provided by the Shopper when they request a Return.",
            "nullable": true
          },
          "excludeProductExtras": {
            "type": "boolean",
            "description": "If this return item refers to a product/bundle that has product extras, this specifies whether those child items should be included or excluded.\r\nFor backward compatibility, a null value will be treated as false, i.e. include the extras.",
            "nullable": true
          },
          "returnType": {
            "type": "string",
            "description": "Specifies whether the requested resolution for this item is Refund or Replace.",
            "nullable": true
          },
          "returnNotRequired": {
            "type": "boolean",
            "description": "Specifies whether this item should be returned to the merchant, e.g. if the item is irreparably damaged and it's not worth shipping back.\r\nEven if this is set to true, Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.QuantityShipped should still be set to the quantity of items involved in the return."
          },
          "quantityReceived": {
            "type": "integer",
            "description": "The amount of this item actually received from the shopper. It may differ from the sum of the ReturnReasons.\r\nThis is populated by the system when the Receive action is performed.",
            "format": "int32"
          },
          "receiveStatus": {
            "type": "string",
            "description": "Describes the receive status of this item.\r\nIf Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ReturnNotRequired is {true}, then this should be Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReceiveStatusConst.NOT_REQUESTED.\r\nOtherwise the value should be Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReceiveStatusConst.RECEIVED or Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReceiveStatusConst.WAITING depending on Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.QuantityReceived.",
            "nullable": true
          },
          "quantityShipped": {
            "type": "integer",
            "description": "The quantity of this item fulfilled on the parent order.",
            "format": "int32"
          },
          "replaceStatus": {
            "type": "string",
            "description": "Describes the replace status of this item.\r\nIf Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ReturnType is Mozu.CommerceRuntime.Contracts.Returns.Return.ReturnTypeConst.REFUND, then this should be Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReplaceStatusConst.NOT_REQUESTED.\r\nOtherwise the value should be Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReplaceStatusConst.REPLACED or Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReplaceStatusConst.NOT_REPLACED depending on Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.QuantityReplaced.",
            "nullable": true
          },
          "quantityRestockable": {
            "type": "integer",
            "description": "Of the quantity returned, how many of this item can be added back into the inventory? This item is set by the merchant via an UpdateReturn call.\r\nIt is used during the Restock action to set some quantity of this item back into the inventory management system.",
            "format": "int32"
          },
          "quantityRestocked": {
            "type": "integer",
            "description": "Field to specify How many items added to inventory",
            "format": "int32"
          },
          "refundAmount": {
            "type": "number",
            "description": "If a refund is issued for the return, how much of the refund amount is for this particular item.",
            "format": "double",
            "nullable": true
          },
          "returnProcessingFeeApplied": {
            "type": "number",
            "description": "The processing fee on the item that gets persisted into the database",
            "format": "double",
            "nullable": true
          },
          "shippingAndHandlingRefunded": {
            "type": "boolean",
            "description": "Determines if shipping and handling is returned on the item",
            "nullable": true
          },
          "quantityRefunded": {
            "type": "integer",
            "description": "The quantity of the item being refunded is specified in this field",
            "format": "int32"
          },
          "refundStatus": {
            "type": "string",
            "description": "Describes the refund status of this item.\r\nIf Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ReturnType is Mozu.CommerceRuntime.Contracts.Returns.Return.ReturnTypeConst.REPLACE, then this should be Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemRefundStatusConst.NOT_REQUESTED.\r\nOtherwise the value should be Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemRefundStatusConst.REFUNDED or Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemRefundStatusConst.NOT_REFUNDED depending on Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.RefundAmount.",
            "nullable": true
          },
          "quantityReplaced": {
            "type": "integer",
            "description": "Specifies the quantity of this item that has been marked as replaced, i.e. it has been used to generate a replacement order for the return.\r\nNote that the quantity replaced may not line up with the quantity of the item actually sent back to the shopper,\r\nsuch as in the case of an exchange, e.g. swapping a medium shirt for a large shirt.",
            "format": "int32",
            "nullable": true
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderNote"
            },
            "description": "Any merchant-supplied notes for this ReturnItem.",
            "nullable": true
          },
          "productLossAmount": {
            "type": "number",
            "description": "The loss incurred of the returned products, used for accounting purposes.",
            "format": "double",
            "nullable": true
          },
          "productLossTaxAmount": {
            "type": "number",
            "description": "The tax on the returned products, used for accounting purposes.",
            "format": "double",
            "nullable": true
          },
          "shippingLossAmount": {
            "type": "number",
            "description": "The loss incurred of the returned product shipping, used for accounting purposes.",
            "format": "double",
            "nullable": true
          },
          "shippingLossTaxAmount": {
            "type": "number",
            "description": "The tax on the returned product shipping, used for accounting purposes.",
            "format": "double",
            "nullable": true
          },
          "bundledProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnBundle"
            },
            "description": "Deprecated. Not used.",
            "nullable": true,
            "deprecated": true
          },
          "totalWithoutWeightedShippingAndHandling": {
            "type": "number",
            "description": "Taxable Subtotal including Weighted Order amounts",
            "format": "double",
            "nullable": true
          },
          "totalWithWeightedShippingAndHandling": {
            "type": "number",
            "description": "Line item total with line item, Tax, Weighted Tax with Weighted shipping and handling costs",
            "format": "double",
            "nullable": true
          },
          "shipmentItemId": {
            "type": "integer",
            "description": "The identifer of the item",
            "format": "int32",
            "nullable": true
          },
          "shipmentNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data for a given vendor set within the commerce process.",
            "nullable": true
          },
          "inventoryTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryTags"
            },
            "nullable": true
          }
        },
        "description": ""
      },
      "Return": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Identifier for this Return",
            "nullable": true
          },
          "customerAccountId": {
            "type": "integer",
            "description": "Unique identifier of the customer account.",
            "format": "int32",
            "nullable": true
          },
          "visitId": {
            "type": "string",
            "description": "Identifies the Visit ID that was current when the order was placed or when the cart was last updated.",
            "nullable": true
          },
          "webSessionId": {
            "type": "string",
            "description": "Identifies the web session used to place the order or last update the cart.",
            "nullable": true
          },
          "customerInteractionType": {
            "type": "string",
            "description": "Determines the interaction type that a customer will use to create this object.\r\nValid values are: Website, Store, Call, Unknown",
            "nullable": true
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Current available actions.",
            "nullable": true
          },
          "returnNumber": {
            "type": "integer",
            "description": "A human-facing identifier that is unique within a tenant to represent the sequential ordering of Returns.",
            "format": "int32",
            "nullable": true
          },
          "contact": {
            "$ref": "#/components/schemas/CommerceRuntimeContact"
          },
          "locationCode": {
            "type": "string",
            "description": "Location code where the return was made/processed",
            "nullable": true
          },
          "originalOrderId": {
            "type": "string",
            "description": "The Id of the Order that this Return was generated from.",
            "nullable": true
          },
          "originalOrderNumber": {
            "type": "integer",
            "description": "The order number that this return was generated from.",
            "format": "int32",
            "nullable": true
          },
          "returnOrderId": {
            "type": "string",
            "description": "The Id of the Order that represents the items shipped to the shopper for this Return.",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO Currency Code. Currently, only USD is supported.",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "The Status of the Return.  Valid values are \r\n    Null, Created, ReturnAuthorized, ReturnPending, ReturnReceived, ReplacementShipped, Cancelled, and Closed.",
            "nullable": true
          },
          "receiveStatus": {
            "type": "string",
            "description": "A rollup status describing whether the return items have been received.\r\nSee Mozu.CommerceRuntime.Contracts.Returns.Return.ReceiveStatusConst for possible values.",
            "nullable": true
          },
          "refundStatus": {
            "type": "string",
            "description": "A rollup status describing whether the return items have been refunded.\r\nSee Mozu.CommerceRuntime.Contracts.Returns.Return.RefundStatusConst for possible values.",
            "nullable": true
          },
          "replaceStatus": {
            "type": "string",
            "description": "A rollup status describing whether the return items have been marked as replaced.\r\nSee Mozu.CommerceRuntime.Contracts.Returns.Return.ReplaceStatusConst for possible values.",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnItem"
            },
            "description": "The list of items being returned by the Shopper and replaced by the Merchant in this Return.",
            "nullable": true
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderNote"
            },
            "description": "Any Merchant Notes for this Return.",
            "nullable": true
          },
          "rmaDeadline": {
            "type": "string",
            "description": "The deadline for a Shopper to ship the items in this Return to the Merchant.",
            "format": "date-time",
            "nullable": true
          },
          "returnType": {
            "type": "string",
            "description": "Specifies whether this Return was a Refund or a Replace",
            "nullable": true
          },
          "refundAmount": {
            "type": "number",
            "description": "If this Return was refunded,  how much was credited to the shopper? This amount is summed from the refund payments.",
            "format": "double",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            },
            "description": "Any Refund payments associated with this Return.",
            "nullable": true
          },
          "packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimePackage"
            },
            "description": "Shipping package associated with this return.",
            "nullable": true
          },
          "productLossTotal": {
            "type": "number",
            "description": "The Total Loss Amount is equal to the (cost of item) * quantity of item returned.\r\nIt is meant to represent the product value to the merchant of the items damaged or returned by a shopper.",
            "format": "double",
            "nullable": true
          },
          "shippingLossTotal": {
            "type": "number",
            "description": "The Shipping Loss Total is equal to the (shipping cost of item) * quantity of item returned.\r\nIt is meant to represent the product value to the merchant of the items damaged or returned by a shopper.",
            "format": "double",
            "nullable": true
          },
          "lossTotal": {
            "type": "number",
            "description": "Sum of the ProductLossTotal and the ShippingLossTotal.",
            "format": "double",
            "nullable": true
          },
          "productLossTaxTotal": {
            "type": "number",
            "description": "The Total Taxes assessed on the product loss.",
            "format": "double",
            "nullable": true
          },
          "shippingLossTaxTotal": {
            "type": "number",
            "description": "The Total Taxes assessed on the shipping loss.",
            "format": "double",
            "nullable": true
          },
          "tenantId": {
            "type": "integer",
            "description": "Unique identifier of the Tenant.",
            "format": "int32",
            "nullable": true
          },
          "siteId": {
            "type": "integer",
            "description": "Unique identifier of the Site.",
            "format": "int32",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the current user.",
            "nullable": true
          },
          "channelCode": {
            "type": "string",
            "description": "Unique identifier of the channel for this item.",
            "nullable": true
          },
          "changeMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeChangeMessage"
            },
            "description": "Change messages related to the return.",
            "nullable": true
          },
          "actionRequired": {
            "type": "boolean",
            "description": "To find Returns that have failed to refund."
          },
          "isUnified": {
            "type": "boolean",
            "description": "Was this return created by the Unified platform."
          },
          "canInitiateRefund": {
            "type": "boolean",
            "description": "To identify Return is refundable or not."
          },
          "refundToGC": {
            "type": "boolean",
            "description": "If this Flag is true, Refund will be done on new Gift Card."
          },
          "shipOrBillCountryCode": {
            "type": "string",
            "description": "ShipOrBillCountryCode contains country code of shipping address or Billing address",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "description": "A return can be created from an external system. This field is used to store the external id.",
            "nullable": true
          }
        },
        "description": ""
      },
      "ReturnCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Return"
            },
            "nullable": true
          }
        },
        "description": "Paged collection of returns. This is paged in case it's returning a long list of returns. \r\nfor a store."
      },
      "ReturnAction": {
        "type": "object",
        "properties": {
          "actionName": {
            "type": "string",
            "description": "The name of the action to perform, query the Return for Available actions to get valid values. This is required.",
            "nullable": true
          },
          "returnIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of Returns upon which to perform the action. This is required.",
            "nullable": true
          }
        },
        "description": ""
      },
      "ReasonCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "ReturnItemSpecifier": {
        "type": "object",
        "properties": {
          "returnItemId": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RestockableReturnItem": {
        "type": "object",
        "properties": {
          "returnItemId": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "locationCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Money": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ShippingLabel": {
        "type": "object",
        "properties": {
          "imageFormat": {
            "type": "string",
            "nullable": true
          },
          "imageData": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "labelUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CustomAttribute": {
        "type": "object",
        "properties": {
          "childAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttribute"
            },
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AutoRefundRequest": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string",
            "nullable": true
          },
          "returnProcessingFee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "refundShippingAndHandling": {
            "type": "boolean",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RefundPaymentAction": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "nullable": true
          },
          "paymentType": {
            "type": "string",
            "nullable": true
          },
          "paymentSource": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "amountCollected": {
            "type": "number",
            "format": "double"
          },
          "amountRefunded": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ReturnRefundDetails": {
        "type": "object",
        "properties": {
          "returnId": {
            "type": "string",
            "nullable": true
          },
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundPaymentAction"
            },
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnItem"
            },
            "nullable": true
          },
          "defaultReturnProcessingFee": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ReturnItemCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnItem"
            },
            "nullable": true
          }
        },
        "description": "Collection of return items listed on the order."
      },
      "WishlistItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommerceItem"
          }
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the wishlist line item. System-supplied and read-only.",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "description": "Comments for the wishlist item that are entered by the wishlist owner",
            "nullable": true
          },
          "priorityType": {
            "type": "string",
            "description": "Wishlist item priority that is a hint to how much this item is needed or desired",
            "nullable": true
          },
          "purchasableStatusType": {
            "type": "string",
            "description": "Is the item purchasable?",
            "nullable": true
          }
        },
        "description": "A single line item of an order."
      },
      "Wishlist": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommerceAggregate"
          }
        ],
        "properties": {
          "customerAccountId": {
            "type": "integer",
            "description": "Unique identifier of the customer account.",
            "format": "int32",
            "nullable": true
          },
          "typeTag": {
            "type": "string",
            "description": "Open-ended Wishlist type, e.g. giftlist, gift, wish, wishlist, wedding, baby.  If the merchant does not need this level of granularity this is always null.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the list that is display or potentially shared (e.g. friends and family may view this description if the list is public and the list owner may see this description when viewing the list)",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WishlistItem"
            },
            "description": "List of items in the wishlist.",
            "nullable": true
          },
          "privacyType": {
            "type": "string",
            "description": "Is the wishlist public, viewable only through a shared link, or private (only the owner of the list may view the wishlist)?",
            "nullable": true
          },
          "sortOrder": {
            "type": "integer",
            "description": "The wishlist sort order.  Useful for scenarios where there is a default wishlist and other wishlists or arbitrary ordering",
            "format": "int32",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Version for concurrency purposes",
            "nullable": true
          },
          "isImport": {
            "type": "boolean",
            "description": "Was this object imported from an external system?",
            "nullable": true
          },
          "importDate": {
            "type": "string",
            "description": "Date this item was imported",
            "format": "date-time",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "description": "Id in an external system this item may have been imported from",
            "nullable": true
          }
        },
        "description": "Details of the wishlist, items listed in the wishlist, and any system messages."
      },
      "WishlistCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Wishlist"
            },
            "nullable": true
          }
        },
        "description": "Paged collection of wishlists."
      },
      "WishlistItemCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WishlistItem"
            },
            "nullable": true
          }
        },
        "description": "Paged collection of wishlists."
      },
      "AdminUserAuditInfo": {
        "type": "object",
        "properties": {
          "updateDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updateBy": {
            "type": "string",
            "nullable": true
          },
          "createBy": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeAttribute": {
        "required": [
          "attributeCode",
          "displayGroup",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "adminName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "namespace": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "attributeCode": {
            "maxLength": 50,
            "type": "string"
          },
          "inputType": {
            "type": "string",
            "nullable": true
          },
          "valueType": {
            "type": "string"
          },
          "dataType": {
            "type": "string",
            "nullable": true
          },
          "attributeMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAttributeMetadataItem"
            },
            "nullable": true
          },
          "attributeFQN": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/CommerceRuntimeAttributeLocalizedContent"
          },
          "validation": {
            "$ref": "#/components/schemas/CommerceRuntimeAttributeValidation"
          },
          "vocabularyValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "isActive": {
            "type": "boolean",
            "nullable": true
          },
          "isRequired": {
            "type": "boolean",
            "nullable": true
          },
          "isReadOnly": {
            "type": "boolean"
          },
          "isMultiValued": {
            "type": "boolean",
            "nullable": true
          },
          "isVisible": {
            "type": "boolean",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "displayGroup": {
            "type": "string"
          },
          "availableForOrderRouting": {
            "type": "boolean"
          }
        }
      },
      "CommerceRuntimePackage": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionOfPackageItem"
          }
        ],
        "properties": {
          "shippingMethodCode": {
            "type": "string",
            "description": "Code describing the shipping method.",
            "nullable": true
          },
          "shippingMethodName": {
            "type": "string",
            "description": "Name of the shipping method",
            "nullable": true
          },
          "shipmentId": {
            "type": "string",
            "description": "ID of the related shipment",
            "nullable": true
          },
          "trackingNumber": {
            "type": "string",
            "description": "Tracking number of this package (to support classic use cases)",
            "nullable": true
          },
          "trackingNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tracking number of this package",
            "nullable": true
          },
          "packagingType": {
            "type": "string",
            "description": "Packaging type of this package",
            "nullable": true
          },
          "hasLabel": {
            "type": "boolean",
            "description": "If there is a shipping label present for this Package, this will be set to true"
          },
          "measurements": {
            "$ref": "#/components/schemas/CommerceRuntimePackageMeasurements"
          },
          "carrier": {
            "type": "string",
            "description": "Carrier of this package",
            "nullable": true
          },
          "signatureRequired": {
            "type": "boolean",
            "description": "SignatureRequired for this package",
            "nullable": true
          },
          "trackings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeTracking"
            },
            "description": "Tracking number and url data for this package",
            "nullable": true
          },
          "packingSlipItemDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackingSlipItemDetail"
            },
            "description": "PackingSlipItemDetails for this package",
            "nullable": true
          },
          "packingSlipNumber": {
            "type": "integer",
            "description": "PackingSlipNumber for this package",
            "format": "int32",
            "nullable": true
          },
          "returnTrackings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeTracking"
            },
            "nullable": true
          },
          "returnTrackingNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "returnCarrier": {
            "type": "string",
            "nullable": true
          },
          "packageId": {
            "type": "string",
            "nullable": true
          },
          "manifestId": {
            "type": "string",
            "nullable": true
          },
          "labelFormat": {
            "type": "string",
            "nullable": true
          },
          "integratorId": {
            "type": "string",
            "nullable": true
          },
          "fxcbPackNotificationId": {
            "type": "string",
            "nullable": true
          },
          "fxcbDocumentsUrl": {
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          }
        },
        "description": "Describes a package that will be shipped to somebody"
      },
      "CommerceRuntimePhone": {
        "type": "object",
        "properties": {
          "home": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "work": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeAddress": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "address3": {
            "type": "string",
            "nullable": true
          },
          "address4": {
            "type": "string",
            "nullable": true
          },
          "cityOrTown": {
            "type": "string",
            "nullable": true
          },
          "stateOrProvince": {
            "type": "string",
            "nullable": true
          },
          "postalOrZipCode": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "addressType": {
            "type": "string",
            "nullable": true
          },
          "isValidated": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeContact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "middleNameOrInitial": {
            "type": "string",
            "nullable": true
          },
          "lastNameOrSurname": {
            "type": "string",
            "nullable": true
          },
          "companyOrOrganization": {
            "type": "string",
            "nullable": true
          },
          "phoneNumbers": {
            "$ref": "#/components/schemas/CommerceRuntimePhone"
          },
          "address": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          }
        }
      },
      "CommerceRuntimeDiscount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the discount.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the discount in the language specified by LocaleCode.",
            "nullable": true
          },
          "itemIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of discounts for each order item.",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Date when the discount expires. Default is null (no expiration date).",
            "format": "date-time",
            "nullable": true
          },
          "hasMultipleTargetProducts": {
            "type": "boolean",
            "description": "Indicates that the discount targets more than a product.  Used\r\nprimarily for BoGa discounts with multiple targets."
          }
        },
        "description": "Discounts that apply to the order, if any. For example, when the \r\nsubtotal of the order exceeds a certain amount, or for free shipping."
      },
      "CommerceRuntimeAppliedDiscount": {
        "type": "object",
        "properties": {
          "impact": {
            "type": "number",
            "description": "Value of the discount applied. This is a negative number to be subtracted from the original price to get the final price.",
            "format": "double",
            "nullable": true
          },
          "discount": {
            "$ref": "#/components/schemas/CommerceRuntimeDiscount"
          },
          "couponCode": {
            "type": "string",
            "description": "Code of the coupon associated with the discount if a coupon code is required to get the discount.",
            "nullable": true
          },
          "excluded": {
            "type": "boolean",
            "description": "Determines whether or not this discount is set up to be ignored by the pricing runtime.",
            "nullable": true
          }
        },
        "description": "Discount applied to the order, which is a negative number to be subtracted from the original price to get the final price. \r\nIf multiple discounts for the order exist, this is the value most advantageous to the shopper."
      },
      "CommerceRuntimeChangeMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the  message. System-supplied. Read-only.",
            "nullable": true
          },
          "correlationId": {
            "type": "string",
            "description": "Correlation Id",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "User Id that identifies the user that performed the related change",
            "nullable": true
          },
          "userFirstName": {
            "type": "string",
            "description": "User First Name",
            "nullable": true
          },
          "userLastName": {
            "type": "string",
            "description": "User Last Name",
            "nullable": true
          },
          "userScopeType": {
            "type": "string",
            "description": "User Type (e.g. Shopper, Admin, etc.)",
            "nullable": true
          },
          "appId": {
            "type": "string",
            "description": "App Id that identifies the user that performed the related change",
            "nullable": true
          },
          "appKey": {
            "type": "string",
            "description": "App Key",
            "nullable": true
          },
          "appName": {
            "type": "string",
            "description": "App Name",
            "nullable": true
          },
          "subjectType": {
            "type": "string",
            "description": "Subject of the message, for example, \"Product.\" System-supplied. Read-only.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "Indicates if the message is related to a success or failure.",
            "nullable": true
          },
          "identifier": {
            "type": "string",
            "description": "Unique identifier to what the message pertains, which can be a cart item, cart or another generic entity. System-supplied. Read-only.",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "description": "Text on the subject line of the message, for example, the product name. System-supplied. Read-only.",
            "nullable": true
          },
          "verb": {
            "type": "string",
            "description": "Action applicable to the message. This can be \"Increased,\" when the product price has increased, \"Decreased,\" when the \r\nproduct price has decreased, and \"Invalidated,\" when the product is no longer available. System-supplied. Read-only.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Human readable message. System-supplied. Read-only.",
            "nullable": true
          },
          "metadata": {
            "description": "Data. This property will be a JSON array that will contain 0-N items, when there is 1 item it will still be an array containing only one item. System-supplied. Read-only.",
            "nullable": true
          },
          "oldValue": {
            "type": "string",
            "description": "Original price of the item. System-supplied. Read-only.",
            "nullable": true,
            "deprecated": true
          },
          "newValue": {
            "type": "string",
            "description": "Current price of the item. System-supplied. Read-only.",
            "nullable": true,
            "deprecated": true
          },
          "amount": {
            "type": "number",
            "description": "Monetary amount that pertains to the change if applicable",
            "format": "double",
            "nullable": true,
            "deprecated": true
          },
          "createDate": {
            "type": "string",
            "description": "When the message was created. System-supplied. Read-only.",
            "format": "date-time",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {},
            "description": "Additional Data. This property will be a Dictionary of objects.",
            "nullable": true
          }
        },
        "description": "A message displayed by the system based on the last  action, for example, when a product price has changed. System-supplied and read-only."
      },
      "CommerceRuntimeThresholdMessage": {
        "type": "object",
        "properties": {
          "discountId": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "thresholdValue": {
            "type": "number",
            "format": "double"
          },
          "showOnCheckout": {
            "type": "boolean"
          },
          "showInCart": {
            "type": "boolean"
          },
          "requiresCouponCode": {
            "type": "boolean"
          }
        }
      },
      "CommerceRuntimeFutureInventory": {
        "type": "object",
        "properties": {
          "futureInventoryID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "onhand": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "available": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "allocated": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pending": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "deliveryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeMeasurement": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        }
      },
      "CommerceRuntimePackageMeasurements": {
        "type": "object",
        "properties": {
          "height": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "width": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "length": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "weight": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          }
        },
        "description": "Physical dimensions of the package required to ship the product and its weight."
      },
      "CommerceRuntimeProductOption": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the product option that appears with the order item in the language specified by LocaleCode.",
            "nullable": true
          },
          "value": {
            "description": "Value of the product option.",
            "nullable": true
          },
          "shopperEnteredValue": {
            "description": "The value entered by the shopper if this is an option that requires shopper input, for example, a monogram.",
            "nullable": true
          },
          "attributeFQN": {
            "type": "string",
            "description": "Value of the product option.",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "description": "Value of the product option.",
            "nullable": true
          },
          "stringValue": {
            "type": "string",
            "description": "Value of the product option.",
            "nullable": true
          }
        },
        "description": "Product option for the product listed on this order item. If the product contains \r\nconfigurable or stand-alone options, this is a product option that the shopper has selected."
      },
      "CommerceRuntimeProductPropertyValue": {
        "type": "object",
        "properties": {
          "stringValue": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        }
      },
      "CommerceRuntimeProductProperty": {
        "type": "object",
        "properties": {
          "attributeFQN": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "nullable": true
          },
          "isMultiValue": {
            "type": "boolean"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeProductPropertyValue"
            },
            "nullable": true
          }
        }
      },
      "CommerceRuntimeCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the category. System-supplied and read-only.",
            "format": "int32",
            "nullable": true
          },
          "parent": {
            "type": "object"
          }
        },
        "description": "Categories to which the product belongs. Discounts can apply to categories where any product in the category is discounted."
      },
      "CommerceRuntimeProductPrice": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "description": "Price of the product. This is the price that the merchant intends to sell the product if no sale price is present.",
            "format": "double",
            "nullable": true
          },
          "salePrice": {
            "type": "number",
            "description": "Current sale price of the product, which is a specific numerical amount (not a percentage off).",
            "format": "double",
            "nullable": true
          },
          "tenantOverridePrice": {
            "type": "number",
            "description": "An override price applied on the product by the tenant.",
            "format": "double",
            "nullable": true
          },
          "msrp": {
            "type": "number",
            "description": "MSRP of product.",
            "format": "double",
            "nullable": true
          },
          "creditValue": {
            "type": "number",
            "description": "Credit Value when the product happens to be a gift card or similar product",
            "format": "double",
            "nullable": true
          },
          "priceListCode": {
            "type": "string",
            "description": "Pricelist code for the product",
            "nullable": true
          },
          "priceListEntryMode": {
            "type": "string",
            "description": "Pricelist entry mode of the product.\r\nNote: possible values are below\r\n1. null : Product doesn't participate in pricelist\r\n2. Bulk : Bulk volume price available(unit price vary based on quantity)\r\n3. Simple:",
            "nullable": true
          }
        },
        "description": "Price of the product with any sale and discounts applied."
      },
      "CommerceRuntimeBundledProduct": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductBase"
          }
        ],
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "Quantity of the product included in the bundle.",
            "format": "int32"
          },
          "optionAttributeFQN": {
            "type": "string",
            "description": "Fully Qualified Name of the selected option's attribute",
            "nullable": true
          },
          "optionValue": {
            "description": "Value of the selected option",
            "nullable": true
          },
          "creditValue": {
            "type": "number",
            "description": "Credit value.  Only populated if the bundled product is a gift card or digital credit",
            "format": "double",
            "nullable": true
          },
          "deltaPrice": {
            "type": "number",
            "description": "Only populated for extras",
            "format": "double",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "ImageUrl of product",
            "nullable": true
          }
        },
        "description": "Describes products that are bundled inside of a main bundle product."
      },
      "CommerceRuntimeFulfillmentField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "userEnteredValue": {
            "nullable": true
          },
          "required": {
            "type": "boolean"
          }
        }
      },
      "CommerceRuntimeProduct": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductBase"
          }
        ],
        "properties": {
          "mfgPartNumber": {
            "type": "string",
            "description": "Manufacturing Part Number of the product.",
            "nullable": true
          },
          "upc": {
            "type": "string",
            "description": "Universal Product Code of the product.",
            "nullable": true
          },
          "sku": {
            "type": "string",
            "description": "Product Identifier specific to the store",
            "nullable": true
          },
          "fulfillmentTypesSupported": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Types of fulfillment that are supported for this product.",
            "nullable": true
          },
          "imageAlternateText": {
            "type": "string",
            "description": "Descriptive text of the image associated with the product in the language specified by LocaleCode.",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "URL of the image that appears next to the product on the order item. Optional.",
            "nullable": true
          },
          "variationProductCode": {
            "type": "string",
            "description": "For configurable products, the unique identifier of the product variation that has been selected.",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeProductOption"
            },
            "description": "If the product contains configurable or stand-alone options, the list of product options that the shopper selected for this product.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeProductProperty"
            },
            "description": "If the product contains properties, the list of properties that the shopper selected for this product.",
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeCategory"
            },
            "description": "Categories to which this product belongs.",
            "nullable": true
          },
          "price": {
            "$ref": "#/components/schemas/CommerceRuntimeProductPrice"
          },
          "discountsRestricted": {
            "type": "boolean",
            "description": "Is the product discount restricted",
            "nullable": true
          },
          "discountsRestrictedStartDate": {
            "type": "string",
            "description": "Product discount restriction start date",
            "format": "date-time",
            "nullable": true
          },
          "discountsRestrictedEndDate": {
            "type": "string",
            "description": "Product discount restriction end date",
            "format": "date-time",
            "nullable": true
          },
          "isRecurring": {
            "type": "boolean",
            "description": "If true, the product is purchased or fulfilled at regular intervals, for example, a monthly billing or a subscription.",
            "nullable": true
          },
          "isTaxable": {
            "type": "boolean",
            "description": "If true, the product is eligible for tax.",
            "nullable": true
          },
          "productType": {
            "type": "string",
            "description": "Type of product, which can be a product with configurable options, a product with stand-alone options, or a simple product with no options.",
            "nullable": true
          },
          "productUsage": {
            "type": "string",
            "description": "Usage of the product, primarily used to indicate a bundle in this context",
            "nullable": true
          },
          "bundledProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeBundledProduct"
            },
            "description": "Products bundled with this product (if the current product is a bundle)",
            "nullable": true
          },
          "fulfillmentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeFulfillmentField"
            },
            "description": "List of unique product identifiers for an item on shipment",
            "nullable": true
          }
        },
        "description": "The product as it appears on the order item."
      },
      "CommerceRuntimeAppliedLineItemProductDiscount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AppliedProductDiscount"
          }
        ],
        "properties": {
          "appliesToSalePrice": {
            "type": "boolean",
            "description": "Determines if the discount applies to the sale price of the order",
            "nullable": true
          },
          "discountQuantity": {
            "type": "integer",
            "description": "The number of the line item that can be used for this particular discount.",
            "format": "int32"
          }
        }
      },
      "CommerceRuntimeAppliedLineItemShippingDiscount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShippingDiscount"
          }
        ],
        "properties": {
          "methodCode": {
            "type": "string",
            "description": "Unique identifier of the shipping method discount.",
            "nullable": true
          },
          "discount": {
            "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
          },
          "discountQuantity": {
            "type": "integer",
            "description": "The number of the line item that can be used for this particular discount.",
            "format": "int32"
          },
          "impactPerUnit": {
            "type": "number",
            "description": "The impact of this discount pur discount quantity.",
            "format": "double"
          }
        }
      },
      "CommerceRuntimeOrderAttribute": {
        "type": "object",
        "properties": {
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "fullyQualifiedName": {
            "type": "string",
            "nullable": true
          },
          "attributeDefinitionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {},
            "nullable": true
          }
        }
      },
      "CommerceRuntimeOrderItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommerceItem"
          }
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the order line item. System-supplied and read-only.",
            "nullable": true
          },
          "destinationId": {
            "type": "string",
            "description": "The destination associated with this item when used with a multi-ship checkout.",
            "nullable": true
          },
          "originalCartItemId": {
            "type": "string",
            "description": "Unique identifier of the cart item that is associated with this line item. \r\n(This is the original Cart Item ID expressed as a GUID.)",
            "nullable": true
          },
          "fulfillmentLocationCode": {
            "type": "string",
            "description": "Location code from which to obtain this item",
            "nullable": true
          },
          "fulfillmentMethod": {
            "type": "string",
            "description": "Fulfillment method used to fulfill this item",
            "nullable": true
          },
          "dutyAmount": {
            "type": "number",
            "description": "Duty or Tariff for this item",
            "format": "double",
            "nullable": true
          },
          "expectedDeliveryDate": {
            "type": "string",
            "description": "Expected Delivery Date of shipment",
            "format": "date-time",
            "nullable": true
          },
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionInfo"
          },
          "isReservationEnabled": {
            "type": "boolean",
            "description": "Flag to indicate reserve inventory in cart"
          },
          "giftInfo": {
            "$ref": "#/components/schemas/GiftInfo"
          }
        },
        "description": "A single line item of an order."
      },
      "CommerceRuntimeDestination": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "An identifier for this entry.",
            "nullable": true
          },
          "destinationContact": {
            "$ref": "#/components/schemas/CommerceRuntimeContact"
          },
          "isDestinationCommercial": {
            "type": "boolean",
            "description": "Indicates that the destination is commercial",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data",
            "nullable": true
          }
        }
      },
      "CommerceRuntimePurchaseOrderPaymentTerm": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommerceRuntimePurchaseOrderCustomField": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeShopperNotes": {
        "type": "object",
        "properties": {
          "giftMessage": {
            "type": "string",
            "description": "Gift message associated with this order.",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "description": "Comments associated with this order.",
            "nullable": true
          },
          "deliveryInstructions": {
            "type": "string",
            "description": "DeliveryInstructions associated with this order.",
            "nullable": true
          }
        },
        "description": "Notes that the shopper has added to this order, for example, a gift message or other comments."
      },
      "CommerceRuntimeShippingRate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShippingPrice"
          }
        ],
        "properties": {
          "shippingMethodCode": {
            "type": "string",
            "description": "Code that uniquely identifies the selected shipping method.",
            "nullable": true
          },
          "shippingMethodName": {
            "type": "string",
            "description": "Shipping Method Name",
            "nullable": true
          },
          "shippingZoneCode": {
            "type": "string",
            "description": "The shipping zone to which this rate applies.",
            "nullable": true
          },
          "isValid": {
            "type": "boolean",
            "description": "If true, the shipping rate is valid.",
            "nullable": true
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Messages and detail about why the shipping rate may be invalid.",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data returned by the shipping service.",
            "nullable": true
          }
        },
        "description": "How much the customer and merchant pay for shipping based on the current shipping rate. \r\nThe cost can differ between the merchant and customer depending on any merchant discounts or \r\nextra fees."
      },
      "CommerceRuntimeTracking": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeCredit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of this order transaction.",
            "nullable": true
          },
          "parentPaymentId": {
            "type": "string",
            "description": "The paymentid of the Parent Payment associated with this Credit (if applicable).",
            "nullable": true
          },
          "parentPaymentInteractionId": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount credited.",
            "format": "double"
          },
          "giftCard": {
            "$ref": "#/components/schemas/GatewayGiftCard"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        }
      },
      "CommerceRuntimePickupItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractFulfillmentItem"
          }
        ],
        "description": "Item that goes into the pickup to determine which items will be picked up."
      },
      "CommerceRuntimeShipmentStatusReason": {
        "type": "object",
        "properties": {
          "reasonCode": {
            "type": "string",
            "nullable": true
          },
          "moreInfo": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeLink": {
        "type": "object",
        "properties": {
          "deprecation": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "hreflang": {
            "type": "string",
            "nullable": true
          },
          "media": {
            "type": "string",
            "nullable": true
          },
          "rel": {
            "type": "string",
            "nullable": true
          },
          "templated": {
            "type": "boolean",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeTaskInput": {
        "type": "object",
        "properties": {
          "helpMessage": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "maxLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maximum": {
            "type": "number",
            "format": "double"
          },
          "minLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minimum": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {},
            "nullable": true
          },
          "pattern": {
            "type": "string",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeWorkflowState": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "completedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "processInstanceId": {
            "type": "string",
            "nullable": true
          },
          "shipmentState": {
            "type": "string",
            "nullable": true
          },
          "taskList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentTask"
            },
            "nullable": true
          }
        }
      },
      "CommerceRuntimeGiftCard": {
        "type": "object",
        "properties": {
          "activationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cardNumber": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "creditType": {
            "type": "string",
            "nullable": true
          },
          "creditValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "currentBalance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "customerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "initialBalance": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeCanceledReason": {
        "type": "object",
        "properties": {
          "reasonCode": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "moreInfo": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeCanceledItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShipmentItem"
          }
        ],
        "properties": {
          "originalQuantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "canceledReason": {
            "$ref": "#/components/schemas/CommerceRuntimeCanceledReason"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        }
      },
      "CommerceRuntimeCustomer": {
        "type": "object",
        "properties": {
          "customerContact": {
            "$ref": "#/components/schemas/CommerceRuntimeContact"
          },
          "data": {
            "description": "Custom data",
            "nullable": true
          },
          "isDestinationCommercial": {
            "type": "boolean",
            "description": "Destination Commercial Flag",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeShipmentNote": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "noteId": {
            "type": "string",
            "nullable": true
          },
          "noteText": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeShipment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the shipment",
            "nullable": true
          },
          "externalShipmentId": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "orderNumber": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "customerAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "customerTaxId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "shipmentType": {
            "type": "string",
            "nullable": true
          },
          "shippingMethodCode": {
            "type": "string",
            "nullable": true
          },
          "shippingMethodName": {
            "type": "string",
            "nullable": true
          },
          "fulfillmentLocationCode": {
            "type": "string",
            "nullable": true
          },
          "origin": {
            "$ref": "#/components/schemas/CommerceRuntimeContact"
          },
          "destination": {
            "$ref": "#/components/schemas/CommerceRuntimeDestination"
          },
          "shipmentStatus": {
            "type": "string",
            "nullable": true
          },
          "shipmentStatusReason": {
            "$ref": "#/components/schemas/CommerceRuntimeShipmentStatusReason"
          },
          "transferShipmentNumbers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "isTransfer": {
            "type": "boolean",
            "nullable": true
          },
          "originalShipmentNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "parentCheckoutNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "parentShipmentNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "fulfillmentStatus": {
            "type": "string",
            "nullable": true
          },
          "workflowProcessId": {
            "type": "string",
            "nullable": true
          },
          "workflowProcessContainerId": {
            "type": "string",
            "nullable": true
          },
          "workflowState": {
            "$ref": "#/components/schemas/CommerceRuntimeWorkflowState"
          },
          "backorderCreatedDate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "fulfillmentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "futureDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "orderSubmitDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "pickStatus": {
            "type": "string",
            "nullable": true
          },
          "pickType": {
            "type": "string",
            "nullable": true
          },
          "changeMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeChangeMessage"
            },
            "nullable": true
          },
          "packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimePackage"
            },
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentItem"
            },
            "nullable": true
          },
          "canceledItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeCanceledItem"
            },
            "nullable": true
          },
          "data": {
            "type": "object",
            "nullable": true
          },
          "taxData": {
            "type": "object",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "shipmentAdjustment": {
            "type": "number",
            "format": "double"
          },
          "lineItemSubtotal": {
            "type": "number",
            "format": "double"
          },
          "lineItemTaxAdjustment": {
            "type": "number",
            "format": "double"
          },
          "lineItemTaxTotal": {
            "type": "number",
            "format": "double"
          },
          "lineItemTotal": {
            "type": "number",
            "format": "double"
          },
          "shippingAdjustment": {
            "type": "number",
            "format": "double"
          },
          "shippingSubtotal": {
            "type": "number",
            "format": "double"
          },
          "shippingTaxAdjustment": {
            "type": "number",
            "format": "double"
          },
          "shippingTaxTotal": {
            "type": "number",
            "format": "double"
          },
          "shippingTotal": {
            "type": "number",
            "format": "double"
          },
          "handlingAdjustment": {
            "type": "number",
            "format": "double"
          },
          "handlingSubtotal": {
            "type": "number",
            "format": "double"
          },
          "handlingTaxAdjustment": {
            "type": "number",
            "format": "double"
          },
          "handlingTaxTotal": {
            "type": "number",
            "format": "double"
          },
          "handlingTotal": {
            "type": "number",
            "format": "double"
          },
          "dutyAdjustment": {
            "type": "number",
            "format": "double"
          },
          "dutyTotal": {
            "type": "number",
            "format": "double"
          },
          "total": {
            "type": "number",
            "format": "double"
          },
          "cost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "externalOrderId": {
            "type": "string",
            "nullable": true
          },
          "isExpress": {
            "type": "boolean",
            "nullable": true
          },
          "isFlatRateShipping": {
            "type": "boolean",
            "nullable": true
          },
          "readyToCapture": {
            "type": "boolean"
          },
          "pickupInfo": {
            "type": "object",
            "nullable": true
          },
          "shopperNotes": {
            "$ref": "#/components/schemas/CommerceRuntimeFulfillmentShopperNotes"
          },
          "customer": {
            "$ref": "#/components/schemas/CommerceRuntimeCustomer"
          },
          "shipmentNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeShipmentNote"
            },
            "nullable": true
          },
          "alternateContact": {
            "$ref": "#/components/schemas/FulfillmentAlternateContact"
          },
          "substitutedItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubstitutedItem"
            },
            "nullable": true
          }
        }
      },
      "CommerceRuntimeAppeasementReason": {
        "type": "object",
        "properties": {
          "reasonCode": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "moreInfo": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeAttributeMetadataItem": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 50,
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "CommerceRuntimeAttributeLocalizedContent": {
        "type": "object",
        "properties": {
          "localeCode": {
            "maxLength": 8,
            "type": "string",
            "nullable": true
          },
          "value": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeAttributeValidation": {
        "type": "object",
        "properties": {
          "regularExpression": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "minStringLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxStringLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minNumericValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxNumericValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "minDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "maxDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeAttributeVocabularyValue": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 50,
            "type": "string"
          },
          "sequence": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isHidden": {
            "type": "boolean",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/AttributeValueLocalizedContent"
          }
        }
      },
      "CommerceRuntimeAttributeCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAttribute"
            },
            "nullable": true
          }
        }
      },
      "CommerceRuntimePackageResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "trackingNumber": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "$ref": "#/components/schemas/ShippingLabel"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttribute"
            },
            "nullable": true
          },
          "integratorId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeFulfillmentShopperNotes": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "string",
            "nullable": true
          },
          "deliveryInstructions": {
            "type": "string",
            "nullable": true
          },
          "giftMessage": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommerceRuntimeShipmentResponse": {
        "type": "object",
        "properties": {
          "shippingTotal": {
            "$ref": "#/components/schemas/Money"
          },
          "trackingNumber": {
            "type": "string",
            "nullable": true
          },
          "packageResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimePackageResponse"
            },
            "nullable": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttribute"
            },
            "nullable": true
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            },
            "nullable": true
          },
          "isSuccessful": {
            "type": "boolean"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer scheme.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "servers": [
    {
      "url": "https://t{tenantId}-s{siteId}.{env}.mozu.com/api",
      "description": "Site Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "siteId": {
          "default": "0",
          "description": "Id of the Site"
        },
        "env": {
          "default": "sandbox",
          "enum": [
            "sandbox",
            "tp1",
            "tp2",
            "tp3",
            "tp4",
            "tp5",
            "stg1"
          ]
        }
      }
    },
    {
      "url": "https://t{tenantId}.{env}.mozu.com/api",
      "description": "Tenant Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "env": {
          "default": "sandbox",
          "enum": [
            "sandbox",
            "tp1",
            "tp2",
            "tp3",
            "tp4",
            "tp5",
            "stg1",
            "stg2"
          ]
        }
      }
    },
    {
      "url": "https://home.mozu.com/api",
      "description": "HomePod Api"
    },
    {
      "url": "https://t{tenantId}.{env}.euw1.kibocommerce.com/api",
      "description": "EURO Tenant Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "env": {
          "default": "sb",
          "enum": [
            "sb",
            "tp1"
          ]
        }
      }
    },
    {
      "url": "https://t{tenantId}-s{siteId}.{env}.euw1.kibocommerce.com/api",
      "description": "EURO Site Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "siteId": {
          "default": "0",
          "description": "Id of the Site"
        },
        "env": {
          "default": "sb",
          "enum": [
            "sb",
            "tp1"
          ]
        }
      }
    },
    {
      "url": "https://home.euw1.kibocommerce.com/api",
      "description": "EURO HomePod Api"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ]
}