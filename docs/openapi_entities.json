{
  "openapi": "3.0.1",
  "info": {
    "title": "Entities",
    "description": "<div id=\"overview_ENTITIES\">\r\n            <h2>ENTITIES</h2>\r\n            <p>Entities are JSON entries within the Kibo database for handling large data sets to heavily filter (>2,000\r\n                items). Each entity is associated to an EntityList with schema, rules, and formatting for storing the\r\n                content. This content can be accessed via the API and Hypr tags.</p>\r\n            <p>The <strong>Entity Lists</strong> resource manages all dynamic entities in your Kibo eCommerce document store of the\r\n                cloud. The content is JSON and can have up to five indexed properties (integer, decimal, string, date,\r\n                and boolean) with support for additional customized elements as needed. Every document in the entity\r\n                list has a validated unique ID. A Content property is not supported for Entity List. Instead, the\r\n                MetaData JSON property should be used to supply content when needed. Otherwise, to populate an Entity\r\n                List the user should create an entity and then add that resource to the list using the InsertEntity\r\n                operation.</p>\r\n            <p>The <strong>Entity Containers</strong> resource provides all properties and data for entities within a site/tenant. This\r\n                data encapsulates all associated IDs including entity lists, entity views, site, tenant, entities, and\r\n                more.</p>\r\n            <p>The <strong>List Views</strong> resource provides settings and options for displaying associated content within a context\r\n                level of site, tenant, catalog, or master catalog. ListViews can be associated with entity lists and\r\n                entities.</p>\r\n        </div>",
    "version": "1.0.1"
  },
  "paths": {
    "/platform/entitylists/{entityListFullName}/entities/{id}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get Entity",
        "description": "Get a specific Entity from an EntityList instance",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The unique id of the Entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              },
              "text/plain": {
                "schema": {}
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Entities"
        ],
        "summary": "Update Entity",
        "description": "Update an existing Entity in an EntityList instance",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The unique id of the Entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Entity in json format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppDevHttpRequestMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              },
              "text/plain": {
                "schema": {}
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Entities"
        ],
        "summary": "Delete Entity",
        "description": "Delete an existing Entity from an EntityList instance",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The unique id of the Entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/entities": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get Entities",
        "description": "Get a filtered collection of Entities from an EntityList instance",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Entities"
        ],
        "summary": "Add Entity",
        "description": "Insert an Entity into an EntityList instance",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Entity in json format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppDevHttpRequestMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              },
              "text/plain": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/entityContainers/{id}": {
      "get": {
        "tags": [
          "EntityContainers"
        ],
        "summary": "Get Entity Container",
        "description": "Get a specific Entity Container from an  EntityList instance",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The unique id of the Entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainer"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainer"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainer"
                }
              }
            }
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/entityContainers": {
      "get": {
        "tags": [
          "EntityContainers"
        ],
        "summary": "Get Entity Containers",
        "description": "Get a filtered collection of Entity Containers from an Entity List instance",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainerCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainerCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainerCollection"
                }
              }
            }
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}": {
      "get": {
        "tags": [
          "EntityLists"
        ],
        "summary": "Get EntityList",
        "description": "Get an existing EntityList definition for a specific tenant",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "EntityLists"
        ],
        "summary": "Update Entitylist",
        "description": "Update an existing Entitylist for a specific tenant.",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The EntityList definition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EntityLists"
        ],
        "summary": "Delete EntityList",
        "description": "Delete an existing EntityList for a specific tenant. This will also delete all Entities in all instances of this EntityList for the tenant.",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/platform/entitylists": {
      "post": {
        "tags": [
          "EntityLists"
        ],
        "summary": "Add EntityList",
        "description": "Create a new EntityList for a specific tenant.",
        "requestBody": {
          "description": "The EntityList definition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "EntityLists"
        ],
        "summary": "Get EntityLists",
        "description": "Get a filtered list of EntityLists for a specific tenant.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityListCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityListCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityListCollection"
                }
              }
            }
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/views": {
      "get": {
        "tags": [
          "ListViews"
        ],
        "summary": "Get  ListViews",
        "description": "Get all of the defined ListViews for a specific EntityList for a specific tenant",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListViewCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListViewCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListViewCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ListViews"
        ],
        "summary": "Add ListView",
        "description": "Create a new ListView definition for a specific EntityList for a specific tenant",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new ListView definition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListView"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              }
            }
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/views/{viewName}": {
      "get": {
        "tags": [
          "ListViews"
        ],
        "summary": "Get ListView",
        "description": "Returns a specific ListView definition for a specific EntityList for a specific tenant",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewName",
            "in": "path",
            "description": "The name of the ListView",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ListViews"
        ],
        "summary": "Update ListView",
        "description": "Update an existing ListView definition for a specific EntityList for a specific tenant",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewName",
            "in": "path",
            "description": "The name of the ListView",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The udpated ListView definition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListView"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ListViews"
        ],
        "summary": "Delete ListView",
        "description": "Delete an existing ListView definition for a specific EntityList for a specific tenant",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewName",
            "in": "path",
            "description": "The name of the ListView to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/views/{viewName}/entityContainers": {
      "get": {
        "tags": [
          "EntityContainers"
        ],
        "summary": "Get Entity View Containers",
        "description": "Get a filtered collection of Entity Containers for a ListView on an EntityList",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewName",
            "in": "path",
            "description": "The name of the ListView",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainerCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainerCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainerCollection"
                }
              }
            }
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/views/{viewName}/entities": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get View Entities",
        "description": "Get a filtered collection of Entities for a ListView on an EntityList",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewName",
            "in": "path",
            "description": "The name of the ListView",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCollection"
                }
              }
            }
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/views/{viewName}/entityContainers/{entityId}": {
      "get": {
        "tags": [
          "EntityContainers"
        ],
        "summary": "Get  Entity View Container",
        "description": "Get an Entity Container for a specific Entity in a ListView on an EntityList",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewName",
            "in": "path",
            "description": "The name of the ListView",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The unique Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainer"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainer"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainer"
                }
              }
            }
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/views/{viewName}/entities/{entityId}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get View Entity",
        "description": "Get a specific Entity in a ListView on an EntityList",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewName",
            "in": "path",
            "description": "The name of the ListView",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The unique Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              },
              "text/plain": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "StringStringIEnumerableKeyValuePair": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HttpMethod": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EntityCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {},
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EntityContainer": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "masterCatalogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "catalogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "localeCode": {
            "type": "string",
            "description": "The localeCode for the Entity. This will only be populated for EntityLists that are created with IsLocaleSpecific set to true.",
            "nullable": true
          },
          "listFullName": {
            "type": "string",
            "description": "The nameSpace and name for the EntityList in the format name@nameSpace.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "The userId of the shopper account associated with this Entity. This will only be populated for EntityLists that are creaetd with IsShopperSpecific set to true.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the Entity.",
            "nullable": true
          },
          "item": {
            "description": "The entity in json format.",
            "nullable": true
          },
          "createBy": {
            "type": "string",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "updateBy": {
            "type": "string",
            "nullable": true
          },
          "updateDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The metadata and Entity contents for an entity persisted in an EntityList in MZDB. The Item property contains the json representation of the Entity"
      },
      "EntityContainerCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityContainer"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IndexedProperty": {
        "type": "object",
        "properties": {
          "propertyName": {
            "type": "string",
            "description": "A JPath query indicating the property that should be indexed to enable querying and sorting.  Non-indexed properties may be used in queries as long as at least one indexed property is also provided in the query.",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "description": "The datatype of the property. Valid values are \"string\", \"integer\", \"decimal\", \"date\", \"bool\". See SharedConstants.DataTypeConst",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListViewField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the field in the view.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The datatype of the field. Valid values are \"string\", \"integer\", \"decimal\", \"date\", \"bool\". See SharedConstants.DataTypeConst",
            "nullable": true
          },
          "target": {
            "type": "string",
            "description": "A JPath query to the source property for this ViewField.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "shared by cms/mzdb."
      },
      "ListView": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the ListView. This must be unique for the EntityList.",
            "nullable": true
          },
          "usages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Usages are arbitratry sting values used to provide instructions for other applications as to the intended areas where the view should be used. Mozu uses the \"admin\" usage valued to indicate that a ListView should appear in the EntityManager in the Admin UI.  The values are open ended and applications may provide any value for a usage. This field can be used in queries to the EntityList.",
            "nullable": true
          },
          "metaData": {
            "description": "An arbitrary json property to be used by external applications for any purpose. MZDB will persist and retrieve the metadata without any restrictions.",
            "nullable": true
          },
          "security": {
            "type": "string",
            "description": "less restrictive than collection/list security. public | admin | owner",
            "nullable": true
          },
          "filter": {
            "type": "string",
            "description": "Indicates a implicitly applied filter to the EntityList for to which the ListView is associated. All queries to the ListView will have this filter applied implicitly.",
            "nullable": true
          },
          "defaultSort": {
            "type": "string",
            "description": "Indicates a default sort to be applied to the ListView.",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListViewField"
            },
            "description": "The list of ViewFields for this view. ViewFields can be used to filter or transform the underlying Entity to provide an optimized format for applications which query the ListView.  If no ViewFields are specified, entities will be returned for the View with no transform applied.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EntityList": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "nameSpace": {
            "type": "string",
            "description": "The nameSpace for the EntityList which must be within the nameSpace scope of the developer Account for the creating application.  The name and namespace are formatted as name@nameSpace when specified as fullName. An EntityLists fullName must be unique within the tenant in which it is created.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name for the EntityList which must be unique within the namespace provided.  The name and namespace are formatted as name@nameSpace when specified as fullName. An EntityLists fullName must be unique within the tenant in which it is created.",
            "nullable": true
          },
          "contextLevel": {
            "type": "string",
            "description": "At which context level are entities stored in the list. Possible values are \"tenant\", \"site\", \"masterCatalog\" or \"catalog\".  Each list instance will exist at this context level for the tenant.",
            "nullable": true
          },
          "useSystemAssignedId": {
            "type": "boolean",
            "description": "Indicates whether or not Mozu should assign a generated identifier for each entity in the list or whether a unique identifier will be provided for each identity. If set to false, then a value must be provided for the IdProperty for the list."
          },
          "idProperty": {
            "$ref": "#/components/schemas/IndexedProperty"
          },
          "indexA": {
            "$ref": "#/components/schemas/IndexedProperty"
          },
          "indexB": {
            "$ref": "#/components/schemas/IndexedProperty"
          },
          "indexC": {
            "$ref": "#/components/schemas/IndexedProperty"
          },
          "indexD": {
            "$ref": "#/components/schemas/IndexedProperty"
          },
          "isVisibleInStorefront": {
            "type": "boolean",
            "description": "Indicates whether Enitities in the EntityList are allowed to be accessed from a Mozu storefront."
          },
          "isLocaleSpecific": {
            "type": "boolean",
            "description": "Indicates whether MZDB should store entities in the EntityList instance specific to the localeCode provided.  If true, all operations on the EntityList will be filtered by the provided localeCode on the request or using the defautLocaleCode for the context.  All entities created in the EntityList will be stored with the localeCode provided on the request or the defautLocaleCode for the context as an additional implicit key. The default value is false."
          },
          "isShopperSpecific": {
            "type": "boolean",
            "description": "Indicates whether MZDB should store entities in the EntityList instance specific to the current shopper on the request.  If true, all operations on the EntityList will be filtered by the id of the shopper from the shopper claims provided on the request.  All entities created in the EntityList will be stored with the id of the shopper from the shopper claims provided on the request as an additional implicit key. The default value is false."
          },
          "isSandboxDataCloningSupported": {
            "type": "boolean",
            "description": "Indicates whether MZDB should clone all of the Entities in the EntityList when cloning an existing sandbox for which this list is already defined.  The default value is false."
          },
          "views": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListView"
            },
            "description": "The ListViews defined for this EntityList.  ListViews may be used to automatically filter an EntityList or transform the Entities in the list to a new Schema.",
            "nullable": true
          },
          "usages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Usages are arbitratry sting values used to provide instructions for other applications as to the intended areas where the list should be used. Mozu uses the \"admin\" usage valued to indicate that an EntityList should appear in the EntityManager in the Admin UI.  The values are open ended and applications may provide any value for a usage. This field can be used in queries to the EntityList.",
            "nullable": true
          },
          "metadata": {
            "description": "An arbitrary json property to be used by external applications for any purpose. MZDB will persist and retrieve the metadata without any restrictions.",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "updateDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The definition of an MZDB EntityList which describes the characteristics of the EntityList on a per tenant basis. EntityLists are created at the tenant level, but instances of the EntityLists are implicitly created at the appropriate context level as entities are added or removed from the EntityList."
      },
      "EntityListCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityList"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListViewCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListView"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AppDevHttpContent": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StringStringIEnumerableKeyValuePair"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AppDevHttpRequestMessage": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/AppDevHttpContent"
          },
          "method": {
            "$ref": "#/components/schemas/HttpMethod"
          },
          "requestUri": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StringStringIEnumerableKeyValuePair"
            },
            "nullable": true,
            "readOnly": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer scheme.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "servers": [
    {
      "url": "https://t{tenantId}-s{siteId}.{env}.mozu.com/api",
      "description": "Site Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "siteId": {
          "default": "0",
          "description": "Id of the Site"
        },
        "env": {
          "default": "sandbox",
          "enum": [
            "sandbox",
            "tp1",
            "tp2",
            "tp3",
            "tp4",
            "tp5",
            "stg1"
          ]
        }
      }
    },
    {
      "url": "https://t{tenantId}.{env}.mozu.com/api",
      "description": "Tenant Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "env": {
          "default": "sandbox",
          "enum": [
            "sandbox",
            "tp1",
            "tp2",
            "tp3",
            "tp4",
            "tp5",
            "stg1",
            "stg2"
          ]
        }
      }
    },
    {
      "url": "https://home.mozu.com/api",
      "description": "HomePod Api"
    },
    {
      "url": "https://t{tenantId}.{env}.euw1.kibocommerce.com/api",
      "description": "EURO Tenant Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "env": {
          "default": "sb",
          "enum": [
            "sb",
            "tp1"
          ]
        }
      }
    },
    {
      "url": "https://t{tenantId}-s{siteId}.{env}.euw1.kibocommerce.com/api",
      "description": "EURO Site Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "siteId": {
          "default": "0",
          "description": "Id of the Site"
        },
        "env": {
          "default": "sb",
          "enum": [
            "sb",
            "tp1"
          ]
        }
      }
    },
    {
      "url": "https://home.euw1.kibocommerce.com/api",
      "description": "EURO HomePod Api"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ]
}