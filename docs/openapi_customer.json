{
  "openapi": "3.0.1",
  "info": {
    "title": "Customer",
    "description": "<div id=\"overview_CUSTOMER\">\n            <h2>CUSTOMER</h2>\n            <p>The Customer API manages a customer's information, including their billing and shipping address\n                information,\n                contact information, order history, lifetime value, and more. It allows for customers to be grouped into\n                sets\n                to control the specific sites they can access using the same login credentials, as well as supports the\n                B2B\n                commerce feature that includes a hierarchy of customer accounts. For more information about customer management and the Unified Commerce Admin UI, see the <a href=\"https://docs.kibocommerce.com/help/b2c\">general</a> and <a href=\"https://docs.kibocommerce.com/help/b2b\">B2B</a> customers guides.</p>\n            <p>Use the <strong>B2B</strong> and <strong>Customer Accounts</strong> resources to manage the components of shopper accounts, including\n                attributes, contact information, company notes, and groups associated with the customer account.</p>\n            <p>Use the <strong>Address Validation</strong> resource to validate addresses associated with a customer account contact.</p>\n            <p><strong>Customer Attributes</strong> are custom attributes that you can apply to customer accounts to add further\n                definition for special uses, such as marketing campaigns, or discounts. Refer to the <a href=\"https://docs.kibocommerce.com/help/customer-attributes\">Customer\n                    Attributes user guide</a> for more information.</p>\n            <p>Use the <strong>Customer Credits</strong> resource to manage the store credit associated with a customer account. Store\n                credit can represent a static amount the customer can redeem at any of the tenant's sites, or a gift\n                card registered for a customer account. At this time, gift card functionality is reserved for future\n                use.</p>\n            <p>Use the <strong>Customer Segments</strong> resource to manage groups of customers and target discounts for these segments. After a customer segment is defined, you can\n                associate any number of customer accounts with it. Meanwhile, the <strong>Customer Sets</strong> resource controls the specific sites your customers can access using the same\n                login credentials, as well as what My Account storefront customer information is shared between sites.</p>\n            <p>Use the <strong>Visits</strong> resource to manage all visits a customer makes to a tenant's sites and measure the level\n                of transactions a customer performs during a unique visit for customer account analytics. Track customer\n                visits by site (including online and in-person interactions), the transactions a customer performs\n                during the visit, and the device type associated with the visit, if any.</p>\n            <p>Use the <strong>Customer In-Stock Notification Subscription</strong> resource to manage the subscriptions customer\n                accounts use to send product notifications. This resource can send a notification when a product in a\n                catalog returns to a site's active inventory after it is out of stock, or when a new product becomes\n                available for the first time. (Not supported for bundled products.)</p>\n            <p>Use the <strong>Storefront Auth Ticket</strong> resource to generate and refresh authentication tickets for\n                customer accounts.</p>\n        </div>",
    "version": "1.0.1"
  },
  "paths": {
    "/commerce/customer/accountattributedefinition/attributes": {
      "get": {
        "tags": [
          "AttributeDefinitions"
        ],
        "summary": "Get Attributes",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              }
            }
          }
        },
        "description": "Retrieves the details of attributes."
      },
      "post": {
        "tags": [
          "AttributeDefinitions"
        ],
        "summary": "Create Attribute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "description": "Create a new customer attribute."
      }
    },
    "/commerce/customer/accountattributedefinition/attributes/{attributeFQN}/VocabularyValues": {
      "get": {
        "tags": [
          "AttributeDefinitions"
        ],
        "summary": "Get Attribute Vocabulary Values",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves the details of attribute vocabulary values."
      }
    },
    "/commerce/customer/accountattributedefinition/attributes/{attributeFQN}": {
      "get": {
        "tags": [
          "AttributeDefinitions"
        ],
        "summary": "Get Attribute",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "description": "Get a customer attribute by its attributeFQN."
      },
      "put": {
        "tags": [
          "AttributeDefinitions"
        ],
        "summary": "Update Attribute",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "description": "Update a customer attribute."
      }
    },
    "/commerce/customer/addressvalidation": {
      "post": {
        "tags": [
          "AddressValidation"
        ],
        "summary": "Validate Address",
        "description": "Allows merchants and services to validate an address against the configured AddressValidator capability in SiteSettings, fallback uses USPS Address Validation.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressValidationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressValidationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressValidationResponse"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AddressValidationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/authtickets": {
      "post": {
        "tags": [
          "StorefrontAuthTicket"
        ],
        "summary": "Create User Auth Ticket",
        "description": "Authenticates a user for a particular site given a set of user credentials.",
        "requestBody": {
          "description": "User's email address and password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUserAuthInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/authtickets/refresh": {
      "put": {
        "tags": [
          "StorefrontAuthTicket"
        ],
        "summary": "Refresh User Auth Ticket",
        "description": "Refreshes a user's authentication.",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "query",
            "description": "The user's refresh token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/authtickets/anonymousshopper": {
      "get": {
        "tags": [
          "StorefrontAuthTicket"
        ],
        "summary": "Create Anonymous Shopper Auth Ticket",
        "description": "Authenticates anonymous shopper for the site.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/attributes": {
      "get": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Get B2B Account Attributes",
        "description": "Retrieves a list of notes added to an account according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose notes you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttributeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttributeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttributeCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Add B2B Account tAttribute",
        "description": "Add a customer attribute to the B2B account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/attributes/{attributeFQN}": {
      "get": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Get B2B Account Attribute",
        "description": "Retrieves the contents of a particular attribute attached to a specified account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the b2b account that contains the attribute to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "Fully qualified name of the attribute that you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Delete B2B Account Attribute",
        "description": "Deletes a specific customer attribute specified by attributeFQN.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Update B2B Account Attribute",
        "description": "Modifies an existing attribute for a b2b account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the account whose attribute you want to modify.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new content to replace the existing attribute.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts": {
      "get": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Get B2B Accounts",
        "description": "Retrieves a list of B2B accounts according to any filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.\r\n            For example, applications can filter on UserId to get the single record of the current customer.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "a quick filter which will search a predefined set of fields for a match",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccountCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccountCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccountCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Add Account",
        "description": "Creates a new B2B account in the Pending Approval state. This account will not yet be active, as it requires a sales representative to be assigned (with .../b2baccounts/{accountId}/salesrep/{userId}) before it is approved (with .../b2baccounts/{accountId}/status/{actionName}).",
        "requestBody": {
          "description": "Properties of the new B2B account to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/B2BAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}": {
      "get": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Get B2B Account",
        "description": "Retrieves the details of a B2B account specified by its unique identifier.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the B2B account whose details you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Update Account",
        "description": "Modifies an existing B2B account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the B2B account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the B2B account to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/B2BAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/hierarchy": {
      "get": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Get B2B Account Hierarchy",
        "description": "Retrieves the account hierarchy for a B2B account specified by its unique identifier.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the B2B account whose account hierarchy you want to retrieve. This can be any account belonging to the same hierarchy.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccountHierarchyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccountHierarchyResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccountHierarchyResult"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/changeparent/{parentAccountId}": {
      "post": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Change Parent Account",
        "description": "Change the B2B parent account for an existing B2B account that belongs to an account hierarchy.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the B2B account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "parentAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/salesrep/{userId}": {
      "post": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Add Sales Rep To B2B Account",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        },
        "description": "Add Sales Rep To B2B Account"
      },
      "delete": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Remove Sales Rep From B2B Account",
        "description": "Removes a specific sales rep from B2B account .",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/addsalesreps": {
      "post": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Add Sales Reps To B2B Account",
        "description": "Adds lists of sales reps to a B2B account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/salesrep": {
      "put": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Update Sales Reps On B2B Account",
        "description": "Updates list of  sales reps on a B2B account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/status/{actionName}": {
      "put": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Update B2B Account Status",
        "description": "Updates the status on B2B account by transitioning it between states with the approve, deny, enable, and disable actions. An account that has been newly requested will be in the Pending Approval state and can be approved or denied. An account that has been previously approved can be disabled to deactivate it, while a disabled or denied account can be reinstated by enabling or approving it.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "actionName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/salesrep/{userId}": {
      "get": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Get Accounts For Sales Rep",
        "description": "Gets list of accounts for the B2B sales rep account.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/upgradeaccounts": {
      "put": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Upgrade B2C Accounts To B2B",
        "description": "Upgrades bulk B2C accounts to B2B",
        "requestBody": {
          "description": "List of accountIds(integers)",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeToB2BAccountResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeToB2BAccountResponse"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeToB2BAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/user": {
      "post": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Add User",
        "description": "Adds user to B2B account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/B2BUserAndAuthInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUser"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUser"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUser"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/users": {
      "get": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Get Users Async",
        "description": "Retrieves a list of user for a B2B account according to any filter criteria and sort options.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.\r\n            For example, applications can filter on UserId to get the single record of the current customer.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "a quick filter which will search a predefined set of fields for a match",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "description": "limit on quick filter which will search a predefined set of fields for a match",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUserCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUserCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUserCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/user/{userId}": {
      "put": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Update User",
        "description": "Updates a B2B user specified by user Id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/B2BUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUser"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUser"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUser"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/user/{userId}/remove": {
      "put": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Remove User",
        "description": "Removes a B2B user from an account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/user/{userId}/roles": {
      "get": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Get User Roles Async",
        "description": "Retrieves all the roles for a specified user of a b2b account. These roles may include Admin, Purchaser, and Non-Purchaser.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerUserRoleCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerUserRoleCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerUserRoleCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/user/{userId}/roles/{roleId}": {
      "post": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Add User Role Async",
        "description": "Add a role to B2B user. These roles include Admin, Purchaser, and Non-Purchaser.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user who receives the role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Unique identifier of the role to add.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "B2BAccount"
        ],
        "summary": "Remove User Role Async",
        "description": "Removes a role from the specified user.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user with the role to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Unique identifer of the role to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/b2bcontacts": {
      "get": {
        "tags": [
          "B2BContact"
        ],
        "summary": "Get B2B Contacts",
        "description": "Retrieves a list of B2B contacts according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCustomerContactCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCustomerContactCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCustomerContactCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/credits/{code}/auditentries": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "Get Audit Entries",
        "description": "Retrieves a list of audit entries according to any filter criteria and sort options.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditAuditEntryCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditAuditEntryCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreditAuditEntryCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/credits": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "Get Credits",
        "description": "Retrieves a list of credit collection according to any filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Credit"
        ],
        "summary": "Add Credit",
        "description": "Adds credit to user account. Store credit can represent a static amount the customer can redeem at any of the tenant's sites, or a gift card registered for a customer account.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCredit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/credits/{code}": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "Get credit",
        "description": "Get credit specified by code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Credit"
        ],
        "summary": "Update Credit",
        "description": "Updates a credit specified by a credit code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCredit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Credit"
        ],
        "summary": "Delete credit",
        "description": "Deletes a credit.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/credits/{code}/associate-to-shopper": {
      "put": {
        "tags": [
          "Credit"
        ],
        "summary": "Associate Credit To Shopper",
        "description": "Maps credit to the shopper.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/credits/{code}/Resend-Email": {
      "put": {
        "tags": [
          "Credit"
        ],
        "summary": "Resend Credit Created Email",
        "description": "Resend email when credit is created.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/credits/{code}/transactions": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "Get Transactions",
        "description": "Gets credit transactions according to any filter criteria and sort options.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditTransactionCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditTransactionCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreditTransactionCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Credit"
        ],
        "summary": "Add Transaction",
        "description": "Adds a credit transaction.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditTransaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditTransaction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditTransaction"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreditTransaction"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/attributes": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Account Attributes",
        "description": "Retrieves a collection of account attributes according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose notes you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttributeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttributeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttributeCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Add Account Attribute",
        "description": "Adds a new account attribute.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/attributes/{attributeFQN}": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Account Attribute",
        "description": "Retrieves the contents of a particular attribute attached to a specified account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the account that contains the attribute to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "Fully qualified name of the attribute that you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Delete Account Attribute",
        "description": "Deletes an account attribute specified by attributeFQN.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Update Account Attribute",
        "description": "Modifies an existing attribute for an account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the account whose attribute you want to modify.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new content to replace the existing attribute.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/cards": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Account Cards",
        "description": "Retrieves a list of cards for the specified customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Add Account Card",
        "description": "Creates a card on the specific customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Card"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/cards/{cardId}": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Account Card",
        "description": "Retrieves a card for the specified customer account and card ID.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Update Account Card",
        "description": "Updates a card on the specific customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Card"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Delete Account Card",
        "description": "Removes a card from the specified customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/contacts": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Account Contacts",
        "description": "Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose CustomerContact information you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "If provided, the primary markings on the contacts will be based on the user's preferred primary overrides",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContactCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContactCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContactCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Add Account Contact",
        "description": "Creates a new CustomerContact for a customer account, for example, a new shipping address.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account to contain the new CustomerContact.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the new CustomerContact. Required properties: CustomerContact.Email, ContactType.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerContact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Add Account Contact List",
        "description": "Creates a new CustomerContacts for a customer account in bulk to support adding multiple contacts in a multi-ship scenario.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account to contain the new CustomerContact.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "List of CustomerContact objects : Properties of each new CustomerContact. Required properties: CustomerContact.Email, ContactType.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContactCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContactCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContactCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/contacts/{contactId}": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Account Contact",
        "description": "Retrieves the specified CustomerContact for a customer account, for example, a billing or shipping CustomerContact.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose CustomerContact information you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Unique identifier of the CustomerContact whose details you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "If provided, the primary markings on the contact will be based on the user's preferred primary overrides",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Update Account Contact",
        "description": "Updates a CustomerContact for a specified customer account, for example to update addresses or change which CustomerContact is the primary CustomerContact for billing.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose CustomerContact information you want to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "If provided, the primary markings on the contact will be stored as the user's preferred primary override",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerContact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Delete Account Contact",
        "description": "Deletes a CustomerContact for the specified customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose CustomerContact you want to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Accounts",
        "description": "Retrieves a list of customer accounts according to any filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.\r\n            \r\n            For example, applications can filter on UserId to get the single record of the current customer.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "We added this test to demo new publishing @test@. Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "a quick filter which will search a predefined set of fields for a match",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isAnonymous",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccountCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccountCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccountCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Add Account",
        "description": "Creates a new customer account.",
        "requestBody": {
          "description": "Properties of the new customer account to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Account",
        "description": "Retrieves the details of a customer account specified by its unique identifier.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose details you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Update Account",
        "description": "Modifies an existing customer account, for example, to change the primary billing contact or change whether to accept marketing material. ote that attempting to disable an account by using the below PUT call to change the isActive parameter is unsupported, and attempts to do so will be ignored by the API. Instead, make a POST call to api/commerce/customer/accounts/{accountId}/action and provide only { \"actionName\": \"DisableAccount\" } in the request body. This will successfully disable the account and the isActive flag will be automatically set as false.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the customer account to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Delete Account",
        "description": "Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/current": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Retrieve Current Account",
        "parameters": [
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              }
            }
          }
        },
        "description": "Retrieves the details of a the current logged in customer account"
      }
    },
    "/commerce/customer/accounts/{accountId}/transactions": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Transactions",
        "description": "Gets the list of transactions on customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Add Transaction",
        "description": "Add a transaction on customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/transactions/{transactionId}": {
      "delete": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Remove Transaction",
        "description": "Removes a transaction on customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/recomputelifetimevalue": {
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Recompute Customer Lifetime Value",
        "description": "Triggers event to recompute customer lifetime value.  The lifetime value may not immediately be recalculated, but enters a queue.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/notes": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Account Notes",
        "description": "Retrieves a list of notes added to a customer account according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose notes you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNoteCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNoteCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNoteCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Add Account Note",
        "description": "Adds a new note to the specified customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account for which to create the note.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Contents of the new note.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerNote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/notes/{noteId}": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Account Note",
        "description": "Retrieves the contents of a particular note attached to a specified customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account that contains the note to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of a particular note that you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Update Account Note",
        "description": "Modifies an existing note for a customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose note you want to modify.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of the note to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The new content to replace the existing note.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerNote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Delete Account Note",
        "description": "Removes a note from the specified customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account that contains the note you want to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of the note to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/segments": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Account Segments",
        "description": "Retrieves a list of segments for the specified account according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the account for which you want the list of groups.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. \r\n            Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSegmentCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSegmentCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSegmentCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/AuditLog/Entries": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Account Audit Log",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuditEntryCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuditEntryCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuditEntryCollection"
                }
              }
            }
          }
        },
        "description": "Get Account Audit Log"
      }
    },
    "/commerce/customer/accounts/{accountId}/purchaseOrderAccount": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Customer Purchase Order Account",
        "description": "Gets a customer's purchase order account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Create Customer Purchase Order Account",
        "description": "Creates a customer's purchase order account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Update Customer Purchase Order Account",
        "description": "Updates a customer's purchase order account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/PurchaseOrderTransaction": {
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Create Purchase Order Transaction",
        "description": "Creates a purchase order transaction log (for public api use).",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "transaction log that needs to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderTransaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderTransaction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderTransaction"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderTransaction"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Customer Purchase Order Transactions",
        "description": "Gets a collection of Purchase order transaction logs associated with a customer account id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Customer Account Id for which transaction logs need to be retreived",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. \r\n            Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderTransactionCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderTransactionCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderTransactionCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/purchaseOrderAccounts": {
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Customers Purchase Order Accounts",
        "description": "Gets a collection of customer purchase order accounts.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "accountType",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "default": "B2C"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccountCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccountCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccountCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/loginstatebyusername": {
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Login State By UserName",
        "description": "Retrieves the log-in status details of a shopper specified by userName.",
        "parameters": [
          {
            "name": "userName",
            "in": "query",
            "description": "Unique userName of the customer whose details you want to view.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerSetCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/loginstatebyemailaddress": {
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Login State By Email Address",
        "description": "Retrieves the log-in status details of a shopper specified by emailAdress.",
        "parameters": [
          {
            "name": "emailAddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerSetCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/loginstate": {
      "get": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Get Login State",
        "description": "Retrieves the log-in status details of a shopper specified by account Id and user Id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "EmailAddress of the customer whose details you want to view.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/Change-Password": {
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Change Password",
        "description": "Changes a shopper's password.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the shopper for whom to change the password.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "unlockAccount",
            "in": "query",
            "description": "inidicates that the account should be unlocked on a successful password change.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Old password and new password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPasswordInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/Change-Passwords": {
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Change Passwords",
        "description": "Changes a collection of shopper passwords",
        "requestBody": {
          "description": "The collection of AccountPasswordInfo which are to be processed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountPasswordInfoCollection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordResultCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordResultCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordResultCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/Reset-Password": {
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Reset Password",
        "description": "Resets the password for a shopper specified by username or emailAddress.",
        "requestBody": {
          "description": "Username or EmailAddress of the shopper who has requested a password reset.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerResetPasswordInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/Update-Forgotten-Password": {
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Update Forgotten Password",
        "description": "Updates the password for a shopper who has requested a password change and provided the new password and confirmation code.",
        "requestBody": {
          "description": "Properties of the confirmation code. Required properties: UserName, NewPassword, and ConfirmationCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmationInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/Create-Login": {
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Add Login To Existing Customer",
        "description": "Creates a login for an existing customer and logs them in automatically.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerLoginInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/Add-Account-And-Login": {
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Add Account And Login",
        "description": "Adds a customer to the account.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAccountAndAuthInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/Set-Login-Locked": {
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Set Login Locked",
        "description": "Sets a flag indicating whether the customers login is locked or unlocked.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The customer account id to operate on.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "True for locking the login. False for unlocking the login (default).",
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/Set-Password-Change-Required": {
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Set Password Change Required",
        "description": "Sets a flag indicating whether the customers must change their password before logging in again.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The customer account id to operate on.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/Bulk": {
      "post": {
        "tags": [
          "CustomerAccount"
        ],
        "summary": "Add Accounts",
        "description": "Creates multiple new shopper accounts for a specified site. Allows you to create a number of new shopper accounts at one time.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomerAccountAndAuthInfo"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccountCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccountCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccountCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/attributedefinition/attributes": {
      "get": {
        "tags": [
          "CustomerAttributeDefinition"
        ],
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              }
            }
          }
        },
        "summary": "Get Attributes",
        "description": "Customer attributes are custom attributes that you can apply to customer accounts to add further definition for special uses, such as marketing campaigns, or discounts."
      },
      "post": {
        "tags": [
          "CustomerAttributeDefinition"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "summary": "Create Attribute",
        "description": "Customer attributes are custom attributes that you can apply to customer accounts to add further definition for special uses, such as marketing campaigns, or discounts."
      }
    },
    "/commerce/customer/attributedefinition/attributes/{attributeFQN}/VocabularyValues": {
      "get": {
        "tags": [
          "CustomerAttributeDefinition"
        ],
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              }
            }
          }
        },
        "summary": "Get Attribute Vocabulary Values",
        "description": "Retrieves the details of attribute vocabulary values."
      }
    },
    "/commerce/customer/attributedefinition/attributes/{attributeFQN}": {
      "get": {
        "tags": [
          "CustomerAttributeDefinition"
        ],
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "summary": "Get Attribute",
        "description": "Customer attributes are custom attributes that you can apply to customer accounts to add further definition for special uses, such as marketing campaigns, or discounts."
      },
      "put": {
        "tags": [
          "CustomerAttributeDefinition"
        ],
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "summary": "Update Attribute",
        "description": "Customer attributes are custom attributes that you can apply to customer accounts to add further definition for special uses, such as marketing campaigns, or discounts."
      }
    },
    "/commerce/customer/segments": {
      "get": {
        "tags": [
          "CustomerSegment"
        ],
        "summary": "Get Segments",
        "description": "Retrieves a list of all segments defined for the site according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. \r\n            Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSegmentCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSegmentCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSegmentCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CustomerSegment"
        ],
        "summary": "Adds Segment",
        "description": "Creates a new segment. Merchants create segments of customers, for example, \r\nto offer discounts to particular groups or assign VIP status to a set of customers.",
        "requestBody": {
          "description": "Name of the customer segment to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCustomerSegment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/segments/{id}": {
      "get": {
        "tags": [
          "CustomerSegment"
        ],
        "summary": "Get Segment",
        "description": "Retrieves a segment specified the segment Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerSegment"
        ],
        "summary": "Update Segment",
        "description": "Update the code, name, or description of an existing segment.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCustomerSegment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerSegment"
        ],
        "summary": "Delete Segment",
        "description": "Deletes a segement specified by its unique code. Note that the group is deleted in all accounts that contain this segment.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/segments/{id}/accounts": {
      "post": {
        "tags": [
          "CustomerSegment"
        ],
        "summary": "Add Segments Accounts",
        "description": "Adds segments to an account.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifer of the segment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Unique identifiers of the accounts.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/segments/{id}/accounts/{accountId}": {
      "delete": {
        "tags": [
          "CustomerSegment"
        ],
        "summary": "Remove Segment Account",
        "description": "Removes single account from a segment.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifer of the segment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifiers of the account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/customerSets": {
      "get": {
        "tags": [
          "CustomerSet"
        ],
        "summary": "Get Customer Sets",
        "description": "Retrieves a list of all customerSets defined for the site according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. \r\n            Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSetCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSetCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSetCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/customerSets/{code}": {
      "get": {
        "tags": [
          "CustomerSet"
        ],
        "summary": "Get Customer Set",
        "description": "Retrieves the name of a customer group specified the customer group ID.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Unique identifier of a customer group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSet"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/visits": {
      "post": {
        "tags": [
          "CustomerVisit"
        ],
        "summary": "Add Visit",
        "description": "Adds visit info on the customer.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Visit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "CustomerVisit"
        ],
        "summary": "Get Visits",
        "description": "Gets a collection of visit info specified by filter and sort order.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisitCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisitCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VisitCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/visits/{visitId}": {
      "put": {
        "tags": [
          "CustomerVisit"
        ],
        "summary": "Updates Visit",
        "description": "Updates an existing visit on the customer.",
        "parameters": [
          {
            "name": "visitId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Visit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "CustomerVisit"
        ],
        "summary": "Get Visit",
        "description": "Gets visit info specified by visit Id.",
        "parameters": [
          {
            "name": "visitId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/instocknotifications": {
      "get": {
        "tags": [
          "InStockNotificationSubscription"
        ],
        "summary": "Get In Stock Notification Subscriptions",
        "description": "Retrieves a list of inventory back in stock notification subscriptions according to any filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscriptionCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscriptionCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscriptionCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "InStockNotificationSubscription"
        ],
        "summary": "Add In Stock Notification Subscription",
        "description": "Creates a new notification subscription.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InStockNotificationSubscription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscription"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscription"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/instocknotifications/{id}": {
      "get": {
        "tags": [
          "InStockNotificationSubscription"
        ],
        "summary": "Get In Stock Notification Subscription",
        "description": "Retrieves the details of an inventory back in stock notification.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscription"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscription"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscription"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InStockNotificationSubscription"
        ],
        "summary": "Delete In Stock Notification Subscription",
        "description": "Deletes an in stock notification subscription.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AttributeValueLocalizedContent": {
        "required": [
          "localeCode",
          "value"
        ],
        "type": "object",
        "properties": {
          "localeCode": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AddressValidationRequest": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          }
        },
        "additionalProperties": false,
        "description": "Address Validation Request"
      },
      "AddressValidationResponse": {
        "type": "object",
        "properties": {
          "addressCandidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAddress"
            },
            "description": "Address Candidates",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Address Validation Response"
      },
      "CustomerUserAuthInfo": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CurrencyAmount": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "Currency code for the amount of the order. Currently, only \"USD\" is supported.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Total amount of the order. Currently, only US dollar amounts are supported.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "The currency code and amount of an order listed in the order history of a customer account. Currently, only USD is supported."
      },
      "CommerceSummary": {
        "type": "object",
        "properties": {
          "totalOrderAmount": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "orderCount": {
            "type": "integer",
            "description": "Number of orders listed in the order history of a customer account.",
            "format": "int32"
          },
          "lastOrderDate": {
            "type": "string",
            "description": "When the last order was placed.",
            "format": "date-time",
            "nullable": true
          },
          "wishlistCount": {
            "type": "integer",
            "description": "Number of wishlists listed in the wishlist count of a customer account",
            "format": "int32"
          },
          "visitsCount": {
            "type": "integer",
            "description": "Number of visits for this customer across the entire tenant.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Commerce (orders and wishlists) on a customer account which lists all the orders the customer has made with the order date, order amount, and status. Includes cancellations and returns.  Also includes wishlist information."
      },
      "ContactType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "isPrimary": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CustomerContact": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "integer",
            "format": "int32"
          },
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactType"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "faxNumber": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "middleNameOrInitial": {
            "type": "string",
            "nullable": true
          },
          "lastNameOrSurname": {
            "type": "string",
            "nullable": true
          },
          "companyOrOrganization": {
            "type": "string",
            "nullable": true
          },
          "phoneNumbers": {
            "$ref": "#/components/schemas/CommerceRuntimePhone"
          },
          "address": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          }
        },
        "additionalProperties": false,
        "description": "CustomerContact information for a customer account including the name, company, phone numbers, email addresses, and billing and shipping addresses (if supplied)."
      },
      "CustomerNote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the note.",
            "format": "int32"
          },
          "content": {
            "type": "string",
            "description": "Content of the note that the merchant added.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Note added to the customer account. Merchants can add internal notes, for example, to keep track of a customer's interests or complaints."
      },
      "CustomerAttribute": {
        "type": "object",
        "properties": {
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "fullyQualifiedName": {
            "type": "string",
            "nullable": true
          },
          "attributeDefinitionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {},
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the account, also known as a customer number.",
            "format": "int32"
          },
          "customerSet": {
            "type": "string",
            "nullable": true
          },
          "commerceSummary": {
            "$ref": "#/components/schemas/CommerceSummary"
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerContact"
            },
            "description": "List of contacts for this account. A customer account can have multiple contacts for billing and shipping addresses.",
            "nullable": true
          },
          "companyOrOrganization": {
            "type": "string",
            "description": "The company or organization name for an account.",
            "nullable": true
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerNote"
            },
            "description": "List of notes for the account. Merchants use these internal notes, for example, to make a note of a customer's interests or complaints. \r\nNotes are available only from the merchant's view, customers cannot view these notes.",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAttribute"
            },
            "description": "List of attributes for the account.",
            "nullable": true
          },
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerCustomerSegment"
            },
            "description": "List of segments assigned to account. Merchants create segments, for example, to manage discounts or assign VIP status. \r\nThen they assign the account to the segment. An account can belong to several segments or none at all.",
            "nullable": true
          },
          "taxExempt": {
            "type": "boolean"
          },
          "taxId": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "customerSinceDate": {
            "type": "string",
            "description": "Date when the customer account is created.",
            "format": "date-time",
            "nullable": true
          },
          "accountType": {
            "type": "string",
            "description": "Type of account.",
            "nullable": true
          },
          "migrationRequired": {
            "type": "boolean",
            "description": "Indicates Subscription migration is required or not."
          }
        },
        "additionalProperties": false,
        "description": "Customer account. Customers provide contact information, view order history, and set email preferences on their account. \r\nMerchants can edit accounts to add internal notes or assign them to segments."
      },
      "CustomerAccount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountBase"
          }
        ],
        "properties": {
          "emailAddress": {
            "type": "string",
            "description": "\"Email addresss of the customer.",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "User name for the customer account.",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "First name of the customer.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the customer.",
            "nullable": true
          },
          "localeCode": {
            "type": "string",
            "description": "Locale Code.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user who is currently logged in. This is null if the user is anonymous (not logged in).  Unicode data with a maximum length of 55 characters.",
            "nullable": true
          },
          "isAnonymous": {
            "type": "boolean",
            "description": "Is the account Anonymous?"
          },
          "isLocked": {
            "type": "boolean",
            "description": "Is the account locked?"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is the account active?"
          },
          "acceptsMarketing": {
            "type": "boolean",
            "description": "If true, the customer prefers to receive marketing material such as newsletters or email offers."
          },
          "hasExternalPassword": {
            "type": "boolean",
            "description": "Indicates if an external password is set on this account"
          }
        },
        "additionalProperties": false,
        "description": "Customer account. Customers provide contact information, view order history, and set email preferences on their account. \r\nMerchants can edit accounts to add internal notes or assign them to segments."
      },
      "CustomerAuthTicket": {
        "type": "object",
        "properties": {
          "customerAccount": {
            "$ref": "#/components/schemas/CustomerAccount"
          },
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "accessTokenExpiration": {
            "type": "string",
            "format": "date-time"
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "refreshTokenExpiration": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "jwtAccessToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerAttributeCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAttribute"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of notes added to a customer account returned as a whole. A collection is not paged."
      },
      "UserScope": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Resource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserRole": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "assignedInScope": {
            "$ref": "#/components/schemas/UserScope"
          },
          "roleId": {
            "type": "integer",
            "format": "int32"
          },
          "roleName": {
            "type": "string",
            "nullable": true
          },
          "roleResources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Resource"
            },
            "nullable": true
          },
          "roleTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "B2BUser": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "localeCode": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user who is currently logged in. This is null if the user is anonymous (not logged in).  Unicode data with a maximum length of 55 characters.",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRole"
            },
            "nullable": true
          },
          "isLocked": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "isRemoved": {
            "type": "boolean"
          },
          "acceptsMarketing": {
            "type": "boolean",
            "description": "If true, the customer prefers to receive marketing material such as newsletters or email offers."
          },
          "hasExternalPassword": {
            "type": "boolean",
            "description": "Indicates if an external password is set on this account"
          }
        },
        "additionalProperties": false,
        "description": "Customer account. Customers provide contact information, view order history, and set email preferences on their account. \r\nMerchants can edit accounts to add internal notes or assign them to segments."
      },
      "AccountSalesRep": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "integer",
            "format": "int32"
          },
          "adminUserId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BAccount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountBase"
          }
        ],
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BUser"
            },
            "description": "List of B2B users on the account.",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Is the B2B account active?",
            "nullable": true
          },
          "priceList": {
            "type": "string",
            "description": "Price list on B2B account.",
            "nullable": true
          },
          "salesReps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountSalesRep"
            },
            "description": "List of sales rep on B2B account.",
            "nullable": true
          },
          "rootAccountId": {
            "type": "integer",
            "description": "Root account Id in B2B hierarchy",
            "format": "int32",
            "nullable": true
          },
          "parentAccountId": {
            "type": "integer",
            "description": "Parent account Id in B2B hierarchy",
            "format": "int32",
            "nullable": true
          },
          "approvalStatus": {
            "type": "string",
            "description": "Status on B2B account.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Customer account. Customers provide contact information, view order history, and set email preferences on their account. \r\nMerchants can edit accounts to add internal notes or assign them to segments."
      },
      "B2BAccountCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BAccount"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of all the B2B Accounts returned as a whole. A collection is not paged."
      },
      "AccountHierarchyNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "B2BAccountHierarchyResult": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BAccount"
            },
            "description": "All accounts belonging to this account hierarchy.",
            "nullable": true
          },
          "hierarchy": {
            "$ref": "#/components/schemas/AccountHierarchyNode"
          }
        },
        "additionalProperties": false
      },
      "UpgradeToB2BAccountError": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "integer",
            "format": "int32"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This class is used for reporting errors while upgrading the B2C account to B2B."
      },
      "UpgradeToB2BAccountResponse": {
        "type": "object",
        "properties": {
          "successAccountIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "skippedAccountIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "errorAccountIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpgradeToB2BAccountError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This class is used for sending custom response while upgrading the B2C accounts to B2B.\r\nThe custom response returns a list of success, skipped and error accountIDs while upgrade."
      },
      "B2BUserAndAuthInfo": {
        "type": "object",
        "properties": {
          "b2BUser": {
            "$ref": "#/components/schemas/B2BUser"
          },
          "externalPassword": {
            "type": "string",
            "nullable": true
          },
          "isImport": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "B2BUserCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BUser"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of users in a B2B account."
      },
      "ExtendedCustomerContact": {
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "nullable": true
          },
          "accountId": {
            "type": "integer",
            "format": "int32"
          },
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactType"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "faxNumber": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "middleNameOrInitial": {
            "type": "string",
            "nullable": true
          },
          "lastNameOrSurname": {
            "type": "string",
            "nullable": true
          },
          "companyOrOrganization": {
            "type": "string",
            "nullable": true
          },
          "phoneNumbers": {
            "$ref": "#/components/schemas/CommerceRuntimePhone"
          },
          "address": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          }
        },
        "additionalProperties": false
      },
      "ExtendedCustomerContactCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtendedCustomerContact"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of contacts returned as a whole."
      },
      "CreditAuditEntry": {
        "type": "object",
        "properties": {
          "activityType": {
            "type": "string",
            "description": "Mozu.Customer.Contracts.Credit.CreditAuditEntry.CreditAuditActivityType",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Detials of what was done",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "activityTypeId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Log entry for any change made to a Credit.\r\n\r\nThe system will generate all entries.  Contract is for display only.\r\nAll values are ReadOnly."
      },
      "CreditAuditEntryCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditAuditEntry"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreditCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerCredit"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreditTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id unique within the tenant\r\nReadOnly",
            "format": "int32",
            "nullable": true
          },
          "transactionType": {
            "type": "string",
            "description": "Mozu.Customer.Contracts.Credit.CreditTransaction.CreditTransactionType\r\n            Requried",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "description": "Comments about the transaction.  Depending on the user interface, these comments may be readable by authorized users or customers.",
            "nullable": true
          },
          "impactAmount": {
            "type": "number",
            "description": "Amount to apply to Credit Balance\r\nRequired",
            "format": "double",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "description": "Custom data for credit transactions",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Credit Transactions are used to make adjustments to a Credit Balance"
      },
      "CreditTransactionCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditTransaction"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Card": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Card ID from Payment Service",
            "nullable": true
          },
          "nameOnCard": {
            "type": "string",
            "nullable": true
          },
          "cardType": {
            "type": "string",
            "nullable": true
          },
          "expireMonth": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "expireYear": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cardNumberPart": {
            "type": "string",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "isDefaultPayMethod": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CardCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Card"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerContactCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerContact"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of contacts returned as a whole."
      },
      "CustomerAccountCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAccount"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of all the merchant's customers returned as a whole. A collection is not paged."
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "nullable": true
          },
          "visitId": {
            "type": "string",
            "nullable": true
          },
          "transactionType": {
            "type": "string",
            "nullable": true
          },
          "interactionType": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerNoteCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerNote"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of notes added to a customer account returned as a whole. A collection is not paged."
      },
      "CustomerSegmentCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerCustomerSegment"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of customer segements returned as a whole. A collection is not paged."
      },
      "CustomerAuditEntry": {
        "type": "object",
        "properties": {
          "customerAccountId": {
            "type": "integer",
            "description": "Customer associated with this entry",
            "format": "int32"
          },
          "customerAuditEntryId": {
            "type": "integer",
            "description": "Id of this entry",
            "format": "int32"
          },
          "entryDate": {
            "type": "string",
            "description": "Date of the Entry",
            "format": "date-time"
          },
          "entryUser": {
            "type": "string",
            "description": "User ID associated with this Entry",
            "nullable": true
          },
          "application": {
            "type": "string",
            "description": "Applicattion associated with this entry",
            "nullable": true
          },
          "site": {
            "type": "string",
            "description": "Site associated wit this entry",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the change (UI Displayable)",
            "nullable": true
          },
          "fieldPath": {
            "type": "string",
            "description": "Path of the field value being changed (e.g. /Customer/Contacts/1/FirstName)",
            "nullable": true
          },
          "oldValue": {
            "type": "string",
            "description": "Original value before this event",
            "nullable": true
          },
          "newValue": {
            "type": "string",
            "description": "New Value after this event",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerAuditEntryCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAuditEntry"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerPurchaseOrderPaymentTerm": {
        "type": "object",
        "properties": {
          "siteId": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "CustomerPurchaseOrderAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "accountId": {
            "type": "integer",
            "format": "int32"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "creditLimit": {
            "type": "number",
            "format": "double"
          },
          "availableBalance": {
            "type": "number",
            "format": "double"
          },
          "totalAvailableBalance": {
            "type": "number",
            "format": "double"
          },
          "overdraftAllowance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "overdraftAllowanceType": {
            "type": "string",
            "description": "Indicates type of overdraft. Possible values are \"Percent\" and \"Amount\"",
            "nullable": true
          },
          "customerPurchaseOrderPaymentTerms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerPurchaseOrderPaymentTerm"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderTransaction": {
        "type": "object",
        "properties": {
          "customerPurchaseOrderAccountId": {
            "type": "integer",
            "description": "Unique identifier for Customer purchase order account",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "siteId": {
            "type": "integer",
            "description": "Site Id associated with transaction log",
            "format": "int32"
          },
          "tenantId": {
            "type": "integer",
            "description": "Tenant Id associated with transaction log",
            "format": "int32"
          },
          "transactionDate": {
            "type": "string",
            "description": "Date when the transaction was made on a purchase order account",
            "format": "date-time"
          },
          "orderId": {
            "type": "string",
            "description": "Unique identifier for an order",
            "nullable": true
          },
          "purchaseOrderNumber": {
            "type": "string",
            "description": "Purchase order number",
            "nullable": true
          },
          "transactionAmount": {
            "type": "number",
            "description": "Transaction amount in transaction log for a purchase order account",
            "format": "double"
          },
          "creditLimit": {
            "type": "number",
            "description": "Maximum credit available on a purchase order account",
            "format": "double"
          },
          "additionalTransactionDetail": {
            "type": "string",
            "description": "Any additional transaction detail other than transaction description",
            "nullable": true
          },
          "availableBalance": {
            "type": "number",
            "description": "Current available balance on Purchase Order account",
            "format": "double"
          },
          "transactionTypeId": {
            "type": "integer",
            "description": " Purchase Order transaction type\r\n1 - Line of Credit Change\r\n2 - Order Submitted\r\n3 - Payment Collected\r\n4 - Payment Voided\r\n5 - Payment Refund\r\n6 - Manual Adjustment",
            "format": "int32"
          },
          "transactionDescription": {
            "type": "string",
            "description": "Purchase Order transaction description\r\nLine of Credit Change\r\nOrder Submitted\r\nPayment Collected\r\nPayment Voided\r\nPayment Refund\r\nManual Adjustment",
            "nullable": true
          },
          "author": {
            "type": "string",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Customer purchase order transaction log"
      },
      "PurchaseOrderTransactionCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderTransaction"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of purchase order transactions returned as a whole. \r\nA collection is not paged."
      },
      "CustomerPurchaseOrderAccountCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginState": {
        "type": "object",
        "properties": {
          "isPasswordChangeRequired": {
            "type": "boolean"
          },
          "lastPasswordChangeOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isLocked": {
            "type": "boolean"
          },
          "lastLockedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "failedLoginAttemptCount": {
            "type": "integer",
            "format": "int32"
          },
          "remainingLoginAttempts": {
            "type": "integer",
            "format": "int32"
          },
          "firstFailedLoginAttemptOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastLoginOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountPasswordInfo": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "integer",
            "description": "The Id of the Account which this password info applies",
            "format": "int32"
          },
          "userId": {
            "type": "string",
            "description": "If the account has multiple users, provide the Id of a specific user",
            "nullable": true
          },
          "unlockAccount": {
            "type": "boolean",
            "description": "Indicates to unlock the Account",
            "nullable": true
          },
          "passwordInfo": {
            "$ref": "#/components/schemas/CustomerPasswordInfo"
          }
        },
        "additionalProperties": false,
        "description": "Password information for an Account"
      },
      "AccountPasswordInfoCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountPasswordInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordResult": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "integer",
            "format": "int32"
          },
          "succeeded": {
            "type": "boolean"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordResultCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangePasswordResult"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfirmationInfo": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "UserName of the user who has requested a new password.",
            "nullable": true
          },
          "confirmationCode": {
            "type": "string",
            "description": "Confirmation code that a user supplies when requesting a new password.",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "description": "The user's new password.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to update a user's forgotten password. Contains the user's email address, new password, and the confirmation code \r\nthat is required to update the password."
      },
      "CustomerLoginInfo": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "externalPassword": {
            "type": "string",
            "nullable": true
          },
          "isImport": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerAccountAndAuthInfo": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/CustomerAccount"
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "externalPassword": {
            "type": "string",
            "nullable": true
          },
          "isImport": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CustomerSetSite": {
        "type": "object",
        "properties": {
          "siteId": {
            "type": "integer",
            "format": "int32"
          },
          "customerSetCode": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerSetAggregateInfo": {
        "type": "object",
        "properties": {
          "customerCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CustomerSet": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique identifier of the customer segment.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the customer segment.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the customer segment.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "sites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerSetSite"
            },
            "nullable": true
          },
          "isDefault": {
            "type": "boolean"
          },
          "aggregateInfo": {
            "$ref": "#/components/schemas/CustomerSetAggregateInfo"
          }
        },
        "additionalProperties": false,
        "description": "A customer segment."
      },
      "CustomerSetCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerSet"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Visit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "accountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "nullable": true
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "webSiteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "webReferrer": {
            "type": "string",
            "nullable": true
          },
          "webSessionId": {
            "type": "string",
            "nullable": true
          },
          "webUserAgent": {
            "type": "string",
            "nullable": true
          },
          "browserLocationCode": {
            "type": "string",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VisitCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Visit"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InStockNotificationSubscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email.  E-mail or CustomerId are required.",
            "nullable": true
          },
          "customerId": {
            "type": "integer",
            "description": "Id of the N:Mozu.Customer\r\nthat this subscription is assigned to.\r\nOptional.  E-mail or CustomerId are required.",
            "format": "int32",
            "nullable": true
          },
          "productCode": {
            "type": "string",
            "description": "Product Code",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "Location Code",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "User Id for multi-user b2b accounts",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Inventory in-stock notification subscription.  Notification sender/processor view.  Generally for internal consumption only."
      },
      "InStockNotificationSubscriptionCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InStockNotificationSubscription"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of InStockNotificationSubscriptions"
      },
      "AdminUserAuditInfo": {
        "type": "object",
        "properties": {
          "updateDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updateBy": {
            "type": "string",
            "nullable": true
          },
          "createBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerUserRoleCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRole"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerPasswordInfo": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "description": "Old password.",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "description": "New password.",
            "nullable": true
          },
          "externalPassword": {
            "type": "string",
            "description": "The External Password, typically used for imports in conjunction with a custom action",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Old password and new password."
      },
      "CustomerResetPasswordInfo": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "customerSetCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeAttribute": {
        "required": [
          "attributeCode",
          "displayGroup",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "adminName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "namespace": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "attributeCode": {
            "maxLength": 50,
            "type": "string"
          },
          "inputType": {
            "type": "string",
            "nullable": true
          },
          "valueType": {
            "type": "string"
          },
          "dataType": {
            "type": "string",
            "nullable": true
          },
          "attributeMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAttributeMetadataItem"
            },
            "nullable": true
          },
          "attributeFQN": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/CommerceRuntimeAttributeLocalizedContent"
          },
          "validation": {
            "$ref": "#/components/schemas/CommerceRuntimeAttributeValidation"
          },
          "vocabularyValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "isActive": {
            "type": "boolean",
            "nullable": true
          },
          "isRequired": {
            "type": "boolean",
            "nullable": true
          },
          "isReadOnly": {
            "type": "boolean"
          },
          "isMultiValued": {
            "type": "boolean",
            "nullable": true
          },
          "isVisible": {
            "type": "boolean",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "displayGroup": {
            "type": "string"
          },
          "availableForOrderRouting": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimePhone": {
        "type": "object",
        "properties": {
          "home": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "work": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeAddress": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "address3": {
            "type": "string",
            "nullable": true
          },
          "address4": {
            "type": "string",
            "nullable": true
          },
          "cityOrTown": {
            "type": "string",
            "nullable": true
          },
          "stateOrProvince": {
            "type": "string",
            "nullable": true
          },
          "postalOrZipCode": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "addressType": {
            "type": "string",
            "nullable": true
          },
          "isValidated": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerCredit": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique number identifier representing this credit.\r\nNumber may be generated or set by the Tenant\r\nNumber is unique within the Tenant context.\r\nReadOnly after credit creation",
            "nullable": true
          },
          "activationDate": {
            "type": "string",
            "description": "Date the credit was activated.  Null if card is not active.\r\nCredits must be activated before they can be used.\r\nReadOnly after activation",
            "format": "date-time",
            "nullable": true
          },
          "creditType": {
            "type": "string",
            "description": "Type of Credit.\r\nMozu.Customer.Contracts.Credit.Credit.CreditTypeConst\r\nRequired.\r\nReadOnly after credit creation",
            "nullable": true
          },
          "customCreditType": {
            "type": "string",
            "description": "Name of custom credit type\r\nOptional.",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "Currency Code",
            "nullable": true
          },
          "initialBalance": {
            "type": "number",
            "description": "Balance assigned when credit was initially created.\r\nMay be zero and updated later.\r\nReadOnly after intial credit creation",
            "format": "double",
            "nullable": true
          },
          "currentBalance": {
            "type": "number",
            "description": "Do we want to track this here?\r\nCurrent Balance\r\nReadOnly",
            "format": "double",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Date after which this credit is no longer valid\r\nOptional\r\nDefaults to 365 days",
            "format": "date-time",
            "nullable": true
          },
          "customerId": {
            "type": "integer",
            "description": "Id of the N:Mozu.Customer\r\nthat this credit is assigned to.\r\nOptional.",
            "format": "int32",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "creditTypeId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represetation of a store credit or gift card."
      },
      "CommerceRuntimeAttributeMetadataItem": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 50,
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeAttributeLocalizedContent": {
        "type": "object",
        "properties": {
          "localeCode": {
            "maxLength": 8,
            "type": "string",
            "nullable": true
          },
          "value": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeAttributeValidation": {
        "type": "object",
        "properties": {
          "regularExpression": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "minStringLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxStringLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minNumericValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxNumericValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "minDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "maxDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeAttributeVocabularyValue": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 50,
            "type": "string"
          },
          "sequence": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isHidden": {
            "type": "boolean",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/AttributeValueLocalizedContent"
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeAttributeCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAttribute"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerCustomerSegment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the customer segment.",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "description": "Unique identifier of the customer segment.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the customer segment.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the customer segment.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "A customer segment."
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer scheme.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "servers": [
    {
      "url": "https://t{tenantId}-s{siteId}.{env}.mozu.com/api",
      "description": "Site Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "siteId": {
          "default": "0",
          "description": "Id of the Site"
        },
        "env": {
          "default": "sandbox",
          "enum": [
            "sandbox",
            "tp1",
            "tp2",
            "tp3",
            "tp4",
            "tp5",
            "stg1"
          ]
        }
      }
    },
    {
      "url": "https://t{tenantId}.{env}.mozu.com/api",
      "description": "Tenant Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "env": {
          "default": "sandbox",
          "enum": [
            "sandbox",
            "tp1",
            "tp2",
            "tp3",
            "tp4",
            "tp5",
            "stg1",
            "stg2"
          ]
        }
      }
    },
    {
      "url": "https://home.mozu.com/api",
      "description": "HomePod Api"
    },
    {
      "url": "https://t{tenantId}.{env}.euw1.kibocommerce.com/api",
      "description": "EURO Tenant Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "env": {
          "default": "sandbox",
          "enum": [
            "sb",
            "tp1"
          ]
        }
      }
    },
    {
      "url": "https://t{tenantId}-s{siteId}.{env}.euw1.kibocommerce.com/api",
      "description": "EURO Site Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "siteId": {
          "default": "0",
          "description": "Id of the Site"
        },
        "env": {
          "default": "sandbox",
          "enum": [
            "sb",
            "tp1"
          ]
        }
      }
    },
    {
      "url": "https://home.euw1.kibocommerce.com/api",
      "description": "EURO HomePod Api"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ]
}