{
  "openapi": "3.0.1",
  "info": {
    "title": "Admin User",
    "description": "OpenAPI Spec for Kibo Admin User Service",
    "version": "1.0.1"
  },
  "paths": {
    "/platform/adminuser/groups": {
      "get": {
        "tags": [
          "adminuser_AdminGroup"
        ],
        "summary": "Get Admin Groups",
        "description": "Gets a collection of user groups",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminGroupCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminGroupCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminGroupCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "adminuser_AdminGroup"
        ],
        "summary": "Add a admin group",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminGroup"
                }
              }
            }
          }
        },
        "description": "Add a admin group"
      }
    },
    "/platform/adminuser/groups/{groupCode}": {
      "get": {
        "tags": [
          "adminuser_AdminGroup"
        ],
        "summary": "Get Admin Group",
        "description": "Gets a Admin group by id",
        "parameters": [
          {
            "name": "groupCode",
            "in": "path",
            "description": "groupCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminGroup"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "adminuser_AdminGroup"
        ],
        "summary": "Update an existing adminGroup",
        "parameters": [
          {
            "name": "groupCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminGroup"
                }
              }
            }
          }
        },
        "description": "Update an existing adminGroup"
      },
      "delete": {
        "tags": [
          "adminuser_AdminGroup"
        ],
        "summary": "Deletes a Admin Group",
        "parameters": [
          {
            "name": "groupCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Deletes a Admin Group"
      }
    },
    "/platform/adminuser/groups/{groupCode}/addusers": {
      "post": {
        "tags": [
          "adminuser_AdminGroup"
        ],
        "summary": "Add users to admin group",
        "parameters": [
          {
            "name": "groupCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminGroup"
                }
              }
            }
          }
        },
        "description": "Add users to admin group"
      }
    },
    "/platform/adminuser/groups/{groupCode}/removeusers": {
      "post": {
        "tags": [
          "adminuser_AdminGroup"
        ],
        "summary": "Remove users from admin group",
        "parameters": [
          {
            "name": "groupCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Remove users from admin group"
      }
    },
    "/platform/adminuser/authtickets/wsfed/auth/{id}": {
      "post": {
        "tags": [
          "adminuser_AdminAuthTicket"
        ],
        "summary": "Create User Auth Ticket With Ws Fed",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scopeid",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scopeType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAdminUserAuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAdminUserAuthTicket"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAdminUserAuthTicket"
                }
              }
            }
          }
        },
        "description": "Create User Auth Ticket With Ws Fed"
      }
    },
    "/platform/adminuser/authtickets/wsfed/SignOut/{id}": {
      "get": {
        "tags": [
          "adminuser_AdminAuthTicket"
        ],
        "summary": "Get Ws Fed Sign Out Url",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Get Ws Fed Sign Out Url"
      }
    },
    "/platform/adminuser/authtickets/wsfed/challenge/{id}": {
      "get": {
        "tags": [
          "adminuser_AdminAuthTicket"
        ],
        "summary": "Get Ws Fed Challenge Url",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scopeid",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "scopeType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Get Ws Fed Challenge Url"
      }
    },
    "/platform/adminuser/authtickets/tenants": {
      "post": {
        "tags": [
          "adminuser_AdminAuthTicket"
        ],
        "summary": "Create User Auth Ticket",
        "description": "Authenticates a user for a particular tenant given a set of user credentials adn a tenantId.",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "Optional tenant Id parameter",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "User's email address and password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAuthInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAdminUserAuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAdminUserAuthTicket"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAdminUserAuthTicket"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "adminuser_AdminAuthTicket"
        ],
        "summary": "Refresh Auth Ticket",
        "description": "Reauthenticates the current user for a different tenant. If the user does not have access to the tenant, the operation fails.",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "The tenant to authenticate the user in",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "An existing valid auth ticket containing the refresh token.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TenantAdminUserAuthTicket"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAdminUserAuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAdminUserAuthTicket"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAdminUserAuthTicket"
                }
              }
            }
          }
        }
      }
    },
    "/platform/adminuser/authtickets": {
      "delete": {
        "tags": [
          "adminuser_AdminAuthTicket"
        ],
        "summary": "Delete User Auth Ticket",
        "description": "Logs out a user by deleting the refresh token",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "query",
            "description": "The refresh token to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/platform/adminuser/accounts/{userId}/tenants": {
      "get": {
        "tags": [
          "adminuser_AdminUser"
        ],
        "summary": "Get tenant scope for users",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TenantCollection"
                }
              }
            }
          }
        },
        "description": "Get tenant scope for users"
      }
    },
    "/platform/adminuser/accounts/{userId}": {
      "get": {
        "tags": [
          "adminuser_AdminUser"
        ],
        "summary": "Get User",
        "description": "Retrieves the details of a user specified by user ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user whose details you want to view.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "adminuser_AdminUser"
        ],
        "summary": "Update User",
        "description": "Modifies user information for a specified user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user whose login information you want to change.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the new user account. Required properties: EmailAddress, FirstName, LastName, and Password. Note that the site ID is passed in the request header.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "adminuser_AdminUser"
        ],
        "summary": "Delete User",
        "description": "Removes a user account from the site.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user account to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/platform/adminuser/accounts/{userId}/userbyid": {
      "get": {
        "tags": [
          "adminuser_AdminUser"
        ],
        "summary": "Get User By Id",
        "description": "Retrieves the details of a user specified by user ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user whose details you want to view.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/platform/adminuser/accounts": {
      "get": {
        "tags": [
          "adminuser_AdminUser"
        ],
        "summary": "Get Users",
        "description": "Retrieves a list of Admin users for a specified site according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "emailAddress",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "adminuser_AdminUser"
        ],
        "summary": "Creates a new user",
        "requestBody": {
          "description": "The user to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "description": "Creates a new user"
      }
    },
    "/platform/adminuser/accounts/{userId}/roles": {
      "get": {
        "tags": [
          "adminuser_AdminUser"
        ],
        "summary": "Get User Roles",
        "description": "Retrieves all the roles for a specified user on the specified tenant.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserUserRoleCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserUserRoleCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserUserRoleCollection"
                }
              }
            }
          }
        }
      }
    },
    "/platform/adminuser/accounts/{userId}/roles/{roleId}": {
      "post": {
        "tags": [
          "adminuser_AdminUser"
        ],
        "summary": "Add User Role",
        "description": "Adds a role to the specified user's Admin account.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user who receives the role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Unique identifier of the role to add.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "adminuser_AdminUser"
        ],
        "summary": "Remove User Role",
        "description": "Removes a role from the specified Admin account.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user with the role to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Unique identifer of the role to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/platform/adminuser/accounts/{userId}/Change-Password": {
      "post": {
        "tags": [
          "adminuser_AdminUser"
        ],
        "summary": "Changes a user's password",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user for whom to change the password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Old password and new password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUserPasswordInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": ""
      }
    },
    "/platform/adminuser/accounts/{userId}/Change-User-Password": {
      "post": {
        "tags": [
          "adminuser_AdminUser"
        ],
        "summary": "Change User Password",
        "description": "Changes a user's password to the provided new password",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user for whom to change the password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New password info for this user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeUserPasswordInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/platform/adminuser/accounts/Reset-Password": {
      "post": {
        "tags": [
          "adminuser_AdminUser"
        ],
        "summary": "Reset Password",
        "description": "Resets the password for a user specified by email address.",
        "requestBody": {
          "description": "Email address of the user who has requested a password reset. \r\n            Note that the site ID is passed in the request header.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUserResetPasswordInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/platform/developer/authtickets": {
      "post": {
        "tags": [
          "adminuser_DeveloperAdminAuthTicket"
        ],
        "summary": "Create Developer User Auth Ticket",
        "description": "Authenticates a user for a particular tenant given a set of user credentials adn a tenantId.",
        "parameters": [
          {
            "name": "developerAccountId",
            "in": "query",
            "description": "The users developer account Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "User's email address and password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAuthInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeveloperAdminUserAuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeveloperAdminUserAuthTicket"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeveloperAdminUserAuthTicket"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "adminuser_DeveloperAdminAuthTicket"
        ],
        "summary": "Refresh Developer Auth Ticket",
        "description": "Reauthenticates the current user for a different tenant. If the user does not have access to the tenant, the operation fails.",
        "parameters": [
          {
            "name": "developerAccountId",
            "in": "query",
            "description": "The users developer account Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "An existing valid auth ticket containing the refresh token.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeveloperAdminUserAuthTicket"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeveloperAdminUserAuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeveloperAdminUserAuthTicket"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeveloperAdminUserAuthTicket"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "adminuser_DeveloperAdminAuthTicket"
        ],
        "summary": "Delete User Auth Ticket",
        "description": "Logs out a user by deleting the refresh token",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "query",
            "description": "The refresh token to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/platform/adminuser/roles": {
      "get": {
        "tags": [
          "adminuser_Role"
        ],
        "summary": "Get Roles",
        "description": "Retrieves a list of all roles defined for this tenant.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional filter param to filter the roles",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCollection"
                }
              }
            }
          }
        }
      }
    },
    "/platform/applications/authtickets": {
      "post": {
        "tags": [
          "appdev_AppAuthTickets"
        ],
        "summary": "App Authenticate",
        "description": "Authenticates an application using shared secret and application id. The method returns a set of authentication tokens used to manage application authentication.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppAuthInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTicket"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTicket"
                }
              }
            }
          }
        }
      }
    },
    "/platform/applications/authtickets/oauth": {
      "post": {
        "tags": [
          "appdev_AppAuthTickets"
        ],
        "summary": "Oauth Authenticate App",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OauthAuthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthAccessTokenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthAccessTokenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthAccessTokenResponse"
                }
              }
            }
          }
        },
        "description": "Oauth Authenticate App"
      }
    },
    "/platform/applications/authtickets/refresh-ticket": {
      "put": {
        "tags": [
          "appdev_AppAuthTickets"
        ],
        "summary": "Refresh App Auth Ticket",
        "description": "Returns the AppAuthTicket with a refreshed AccessToken",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthTicketRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTicket"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTicket"
                }
              }
            }
          }
        }
      }
    },
    "/platform/applications/authtickets/{refreshToken}": {
      "delete": {
        "tags": [
          "appdev_AppAuthTickets"
        ],
        "summary": "Delete App Auth Ticket",
        "description": "This method is used to expire an application's current refresh token which \r\nwill force the application to reauthenticate once the current access token expires.",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/platform/appdev/filebasedpackage/packages/{applicationKey}": {
      "get": {
        "tags": [
          "appdev_FilebasedPackage"
        ],
        "summary": "Get File",
        "parameters": [
          {
            "name": "applicationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HttpResponseMessage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpResponseMessage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpResponseMessage"
                }
              }
            }
          }
        },
        "description": "Get File"
      }
    },
    "/platform/appdev/apppackages/project": {
      "post": {
        "tags": [
          "appdev_Package"
        ],
        "summary": "Create Package",
        "description": "",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppDevPackage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AppDevPackage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDevPackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDevPackage"
                }
              }
            }
          }
        }
      }
    },
    "/platform/appdev/apppackages/{applicationKey}": {
      "put": {
        "tags": [
          "appdev_Package"
        ],
        "summary": "Update Package",
        "description": "",
        "parameters": [
          {
            "name": "applicationKey",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppDevPackage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AppDevPackage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDevPackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDevPackage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "appdev_Package"
        ],
        "summary": "Get Package",
        "description": "Use this operation to retrieve the package for the requested\r\npackage and its associated application core information.",
        "parameters": [
          {
            "name": "applicationKey",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeChildren",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "skipDevAccountCheck",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AppDevPackage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDevPackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDevPackage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "appdev_Package"
        ],
        "summary": "Delete Package",
        "description": "Use thi operatin to logically delete a package.",
        "parameters": [
          {
            "name": "applicationKey",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/platform/appdev/apppackages/collection": {
      "get": {
        "tags": [
          "appdev_Package"
        ],
        "summary": "Get Application Summary Parents",
        "description": "",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationSummaryCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationSummaryCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationSummaryCollection"
                }
              }
            }
          }
        }
      }
    },
    "/platform/appdev/apppackages/apps/{appId}": {
      "get": {
        "tags": [
          "appdev_Package"
        ],
        "summary": "Get Application Summary Children",
        "description": "",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationSummary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationSummary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/platform/appdev/apppackages/{applicationKey}/clone/{packageName}": {
      "post": {
        "tags": [
          "appdev_Package"
        ],
        "summary": "Clone Package",
        "description": "Use this operation to clone an existing package.",
        "parameters": [
          {
            "name": "applicationKey",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AppDevPackage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDevPackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDevPackage"
                }
              }
            }
          }
        }
      }
    },
    "/platform/appdev/apppackages/applications/{applicationKey}/packages": {
      "get": {
        "tags": [
          "appdev_Package"
        ],
        "summary": "Get Packages",
        "description": "Use this operation to retieve all packages for a given applicationKey.",
        "parameters": [
          {
            "name": "applicationKey",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PackageCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageCollection"
                }
              }
            }
          }
        }
      }
    },
    "/platform/appdev/apppackages": {
      "get": {
        "tags": [
          "appdev_Package"
        ],
        "summary": "Get All Packages",
        "description": "Get all packages for a given Developer Account.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PackageSummaryCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageSummaryCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageSummaryCollection"
                }
              }
            }
          }
        }
      }
    },
    "/platform/appdev/apppackages/create": {
      "post": {
        "tags": [
          "appdev_Package"
        ],
        "summary": "Create New Core Package",
        "description": "Save as new version of the application core with only a release package included.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AppDevPackage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDevPackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDevPackage"
                }
              }
            }
          }
        }
      }
    },
    "/platform/developer/packages/{applicationKey}/files/{filepath}": {
      "post": {
        "tags": [
          "appdev_PublicApplication"
        ],
        "summary": "Upsert Package File",
        "description": "",
        "parameters": [
          {
            "name": "applicationKey",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filepath",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastModifiedTime",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FileMetadata"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileMetadata"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileMetadata"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "appdev_PublicApplication"
        ],
        "summary": "Delete Package File",
        "description": "",
        "parameters": [
          {
            "name": "applicationKey",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filepath",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/platform/developer/packages/{applicationKey}/files_rename": {
      "post": {
        "tags": [
          "appdev_PublicApplication"
        ],
        "summary": "Rename Package File",
        "description": "",
        "parameters": [
          {
            "name": "applicationKey",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FileMetadata"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileMetadata"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileMetadata"
                }
              }
            }
          }
        }
      }
    },
    "/platform/developer/packages/{applicationKey}/metadata": {
      "get": {
        "tags": [
          "appdev_PublicApplication"
        ],
        "summary": "Get Package Metadata",
        "description": "",
        "parameters": [
          {
            "name": "applicationKey",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMetadata"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMetadata"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMetadata"
                }
              }
            }
          }
        }
      }
    },
    "/platform/developer/packages/{applicationKey}/filemetadata/{filepath}": {
      "get": {
        "tags": [
          "appdev_PublicApplication"
        ],
        "summary": "Get Package File Metadata",
        "description": "",
        "parameters": [
          {
            "name": "applicationKey",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filepath",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FileMetadata"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileMetadata"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileMetadata"
                }
              }
            }
          }
        }
      }
    },
    "/platform/developer/applications/versions/{nsAndAppId}": {
      "get": {
        "tags": [
          "appdev_PublicApplication"
        ],
        "summary": "Get App Versions",
        "description": "",
        "parameters": [
          {
            "name": "nsAndAppId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVersionsCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVersionsCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVersionsCollection"
                }
              }
            }
          }
        }
      }
    },
    "/platform/developer/applications/{applicationKey}/packagenames": {
      "get": {
        "tags": [
          "appdev_PublicApplication"
        ],
        "summary": "Get App Package Names",
        "description": "",
        "parameters": [
          {
            "name": "applicationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PackageNamesCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageNamesCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageNamesCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/summary": {
      "get": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Get Cart Summary",
        "description": "Retrieves the number of items in the active cart, total cost of items in the cart and the cart expiration. (Anonymous shoppers cart expires in 14 days.)",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/user/{userId}/summary": {
      "get": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Get User Cart Summary",
        "description": "Retrieves the number of items in the active cart, total cost of items in the cart and the cart expiration by userId. All anonymous idle carts that do not proceed to checkout expire after 14 days.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/{cartId}/summary": {
      "get": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Get Cart Summary By Cart Id",
        "description": "Retrieves the number of items in the specified cart, total cost of items in the cart, and whether the cart has expired by cartId. All anonymous idle carts that do not proceed to checkout expire after 14 days.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartSummary"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/user/{userId}": {
      "get": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Get User Cart",
        "description": "Retrieves the details of the user's cart from the user ID.Shoppers are not allowed to execute this call. If this ever changes, then auth logic will need to be added",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Get Or Create User Cart",
        "description": "Get the current cart or create a new cart for the user specified by user ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Update User Cart",
        "description": "Updates the cart of the user specified by user ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the cart to update. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cart"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/current": {
      "get": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Get Or Create Cart",
        "description": "Retrieves a cart's contents for the current shopper.  If the shopper does not have an active cart on the site, one is created.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Update Cart",
        "description": "Updates the cart of the current shopper.",
        "requestBody": {
          "description": "All properties of the cart to update. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cart"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Delete Current Cart",
        "description": "eletes the cart of the current shopper.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/{cartId}": {
      "get": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Get Cart",
        "description": "Retrieves the details of the cart specified by cart ID.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Update Cart By Cart Id",
        "description": "Updates the cart specified by cart ID",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the cart to update. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cart"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Delete cart",
        "description": "Deletes the cart by cart ID.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/{userId}": {
      "delete": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Delete User Cart",
        "description": "Deletes the cart of the user by user ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/{cartId}/rejectautodiscount/{discountId}": {
      "post": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Reject Suggested Discount",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique Identifier of the Cart",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        },
        "description": "Reject Suggested Discount"
      }
    },
    "/commerce/carts/{cartId}/coupons/{couponCode}": {
      "put": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Apply Coupon",
        "description": "Apply coupon to the cart.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code that the customer supplies to get the discounted price.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Remove Coupon",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        },
        "description": "Remove Coupon"
      }
    },
    "/commerce/carts/{cartId}/coupons": {
      "delete": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Remove Coupons",
        "description": "Removes all coupons that had been previously applied to the cart.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/current/extendedproperties": {
      "get": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Get Extended Properties",
        "description": "Get extended properties on a cart.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Adds extended properties",
        "description": "Add Extended Properties on the current cart. Store an arbitrary number of cart extended properties such as tracking strings, marketing sources, affiliates, sales personnel/data, and so on, on a per cart basis. Each cart may have none, one, or more than one entry in the extended properties collection, and all values in the extended properties collection are represented as strings. When you create an order from a cart, all extended properties are retained from the cart and copied to the order.",
        "requestBody": {
          "description": "Extended properties",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Update Extended Properties",
        "description": "Update extended properties on the current cart.",
        "parameters": [
          {
            "name": "upsert",
            "in": "query",
            "description": "Allow insert or update",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Extended properties",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Delete extended properties.",
        "description": "Delete extended properties on the current cart.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/current/extendedproperties/{key}": {
      "put": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Update extended property",
        "description": "Update extended property on the current cart using the key.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Unique identifier of the cart item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upsert",
            "in": "query",
            "description": "Extended property",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Extended property",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedProperty"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Delete Extended Property",
        "description": "Delete extended property on the current cart using the key.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Unique identifier of the extended property",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/current/items": {
      "get": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Get Cart Items",
        "description": "Retrieves the details of each cart item such as the product name, stock count, unit price, discounts, quantity ordered and total price",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItemCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItemCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItemCollection"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Remove All Cart Items",
        "description": "Clears all the cart items from the cart of a current shopper.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Add Item To Cart",
        "description": "Adds a product or other item to the cart of the current shopper.",
        "requestBody": {
          "description": "All properties of the new cart item. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/{cartId}/items": {
      "get": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Get Cart Items By CartId",
        "description": "Retrieves the details of each cart item such as the product name, stock count, unit price, discounts, quantity ordered and total price for the cart by cartId.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItemCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItemCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItemCollection"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Remove All Cart Items By CartId",
        "description": "Clears all the cart items from the cart by the cartId.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Add Item To Cart By CartId",
        "description": "\"Adds a product or a cart item to the cart specified by the cart ID.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the new cart item. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/current/items/{cartItemId}": {
      "get": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Get Cart Item",
        "description": "Retrieves an individual cart item from the cart of the current shopper specified by its cart item Id.",
        "parameters": [
          {
            "name": "cartItemId",
            "in": "path",
            "description": "Unique identifier of the cart item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Update Cart Item",
        "description": "Updates a particular cart item in the cart of the current shopper.",
        "parameters": [
          {
            "name": "cartItemId",
            "in": "path",
            "description": "Unique identifier of the cart item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the updated cart item. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Delete Cart Item",
        "description": "Removes a particular cart item from the cart of the current shopper.",
        "parameters": [
          {
            "name": "cartItemId",
            "in": "path",
            "description": "Unique identifier of the cart item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/{cartId}/items/{cartItemId}": {
      "get": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Get Cart Item By CartId",
        "description": "Retrieves an individual cart item from the cart by cart Id and cart item Id.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartItemId",
            "in": "path",
            "description": "Unique identifier of the cart item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Update Cart Item By CartId",
        "description": "Updates a particular cart item in the cart specified by card Id.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartItemId",
            "in": "path",
            "description": "Unique identifier of the cart item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the updated cart item. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Delete Cart Item By CartId",
        "description": "Removes a particular cart item from the cart specified by cart item Id and cart Id.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartItemId",
            "in": "path",
            "description": "Unique identifier of the cart item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/current/bulkitems": {
      "post": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Add Items To Cart",
        "description": "Adds multiple cart items to the cart of the current shopper.",
        "parameters": [
          {
            "name": "throwErrorOnInvalidItems",
            "in": "query",
            "description": "When set to true none of the items will be added when some items are invalid. when set to false valid items are added and invalid items are removed",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "The items to add to the cart",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/{cartId}/bulkitems": {
      "post": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Add Items To Cart By CartId",
        "description": "Adds multiple cart items to the cart specified by cartId.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "throwErrorOnInvalidItems",
            "in": "query",
            "description": "When set to true none of the items will be added when some items are invalid. when set to false valid items are added and invalid items are removed",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "The items to add to the cart",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/current/items/{cartItemId}/{quantity}": {
      "put": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Update Cart Item Quantity",
        "description": "Updates the quantity of an individual cart item in the cart of the current shopper.",
        "parameters": [
          {
            "name": "cartItemId",
            "in": "path",
            "description": "Unique identifier of the cart item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quantity",
            "in": "path",
            "description": "New quantity for the specified cart item.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/{cartId}/items/{cartItemId}/{quantity}": {
      "put": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Update Cart Item Quantity By CartId",
        "description": "Updates the quantity of an individual cart item in the cart specified by cart Id.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cartItemId",
            "in": "path",
            "description": "Unique identifier of the cart item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quantity",
            "in": "path",
            "description": "New quantity for the specified cart item.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/carts/current/messages": {
      "get": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Get Messages",
        "description": "Retrieves messages to and from the current shopper. These are messages supplied by the system to notify the shopper of price increases or decreases or product unavailability.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartChangeMessageCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartChangeMessageCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartChangeMessageCollection"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Remove All Messages",
        "description": "Removes all messages associated with the cart of the current shopper.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/carts/current/messages/{messageId}": {
      "delete": {
        "tags": [
          "commerceruntime_Cart"
        ],
        "summary": "Remove Message",
        "description": "Removes a single message associated with the cart of the current shopper specified by messageId.",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Unique identifier of the message to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/channels": {
      "get": {
        "tags": [
          "commerceruntime_Channel"
        ],
        "summary": "Get Channels",
        "description": "Retrieves a list of channels according to any specified filter criteria and sort options. All orders include a channel association that enables the company to perform financial reporting for each defined channel. Because channels are managed at the tenant level, you must associate all the tenant's sites with a channel. Sites that do not have a defined channel association cannot successfully submit orders.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, \r\n            gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Channel"
        ],
        "summary": "Creates channel.",
        "description": "Creates a new channel that defines a new logical business division to use for financial reporting.",
        "requestBody": {
          "description": "All properties of the channel to place.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Channel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/channels/{code}": {
      "get": {
        "tags": [
          "commerceruntime_Channel"
        ],
        "summary": "Get Channel",
        "description": "Retrieves the details of an channel specified by the channel ID.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Unique identifier of the channel whose details you want.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Channel"
        ],
        "summary": "Update channel.",
        "description": "Updates a channel.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "ID of the channel to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the channel to place.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Channel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Channel"
        ],
        "summary": "Delete Channel",
        "description": "Deletes a channel specified by channel Id. After deleting this channel, assign its associated sites to another channel. Because channels are managed at the tenant level, you must associate all the tenant's sites with a channel. Sites that do not have a defined channel association cannot successfully submit orders.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "ID of the channel to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/channelgroups": {
      "get": {
        "tags": [
          "commerceruntime_ChannelGroup"
        ],
        "summary": "Get Channel Groups",
        "description": "Retrieves a list of channel groups according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, \r\n            gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroupCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroupCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroupCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_ChannelGroup"
        ],
        "summary": "Creates Channel Group.",
        "description": "Creates a new channel group.",
        "requestBody": {
          "description": "All properties of the channel group to place.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/channelgroups/{code}": {
      "get": {
        "tags": [
          "commerceruntime_ChannelGroup"
        ],
        "summary": "Get Channel Group",
        "description": "Retrieves the details of an channel group specified by the code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Unique identifier of the channel whose details you want.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_ChannelGroup"
        ],
        "summary": "Updates Channel Group.",
        "description": "Updates a specific channel group.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "ID of the channel to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the channel group to place.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelGroup"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_ChannelGroup"
        ],
        "summary": "Delete Channel Group",
        "description": "Deletes a channel grop specified by group code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "ID of the channel to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/attributes": {
      "post": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Create Checkout Attributes",
        "description": "Creates list of checkout attributes specified by checkout Id.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderAttribute"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Get Checkout Attributes",
        "description": "Gets the list of attributes specified by checkout Id.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Update Checkout Attribute",
        "description": "Updates the list of checkout attributes specified by checkout id and removes the missing attributes if not passed when removeMissing flag is set.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "removeMissing",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderAttribute"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}": {
      "get": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Get Checkout",
        "description": "Retrieves the details of a checkout specified by the checkout ID.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout whose details you want.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Update Checkout",
        "description": "Updates the details of a checkout specified by the checkout ID.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout whose details you want.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Checkout that needs update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Checkout"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts": {
      "get": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Get Checkouts",
        "description": "Retrieves a list of checkouts according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, \r\n            gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Text to perform a search on",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "description": "Limit of the records to include in a search, used for global search",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Create Checkout From Cart",
        "description": "Creates a new checkout from an existing cart, that is, when the customer chooses to proceed to checkout.",
        "parameters": [
          {
            "name": "cartId",
            "in": "query",
            "description": "Unique identifier of the cart. This is the original cart ID expressed as a GUID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/shippingMethods": {
      "get": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Get Available Shipping Methods",
        "description": "Retrieves available shipping methods for groupings. Typically used to display available shipping method options on the checkout page.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout whose shipping methods you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckoutGroupRates"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckoutGroupRates"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckoutGroupRates"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Set Shipping Methods",
        "description": "Sets the shipping method for specified groupings.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout whose shipping methods you want to set.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pairings of checkout group to shipping method",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CheckoutGroupShippingMethod"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/actions": {
      "get": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Get Available Actions",
        "description": "Retrieves available actions which depends on the status of the checkout.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout whose available actions you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Perform Checkout Action",
        "description": "Perform an action on the checkout. Available actions depend on the current state of the checkout. If in doubt, get a list of available checkout actions first.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The action to perform",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/digitalWallet/{digitalWalletType}": {
      "put": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Process Digital Wallet",
        "description": "Processes the digital wallet sent specified by checkout id and digital     wallet type.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digitalWalletType",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DigitalWallet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/priceList": {
      "put": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Change Checkout PriceList",
        "description": "Changes the pricelist associated with a checkout.The desired price list code should be specified on the ApiContext.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout to change",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The code for the pricelist to apply",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/email/resend": {
      "post": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Resend Checkout Confirmation Email",
        "description": "esends email on checkout confirmation.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/coupons/{couponCode}": {
      "put": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Apply Coupon",
        "description": "Apply a coupon to the Checkout.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the Checkout with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code that the customer supplies to get the discounted price.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Remove Coupon",
        "description": "Removes a coupon that had been previously applied to the checkout.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/coupons": {
      "delete": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Remove Coupons",
        "description": "Removes all coupons that had been previously applied to the checkout.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the order with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/destinations/{destinationId}": {
      "get": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Get Destination",
        "description": "Gets a destination specified by the checkout Id and destination Id.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destinationId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Update Destination",
        "description": "Updates a destination specified by checkout Id and destination Id.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destinationId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeDestination"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Remove Destination",
        "description": "Removes a destination specified by checkout Id and destination Id.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destinationId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/destinations": {
      "get": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Get Destinations",
        "description": "Gets all the destinations specified by the checkout Id.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeDestination"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeDestination"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeDestination"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Add Destination",
        "description": "Adds a specific destination to the checkout.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeDestination"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeDestination"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/items": {
      "post": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Add Checkout Item",
        "description": "Adds a product or other item to the checkout of the current shopper.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of the checkout to add an item to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the new item. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/items/{itemId}": {
      "delete": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Delete Checkout Item",
        "description": "Removes a particular item from the checkout of the current shopper.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "Unique identifier of the item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/items/{itemId}/split": {
      "post": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Split Item",
        "description": "Splits an existing item into two. The new item's quantity will be !:quantity and the original item's quantity will be reduced accordingly.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of the checkout containing the item to split",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "The ID of the item to split",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "What quantity to split off. Defaults to 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/items/{itemId}/destination/{destinationId}": {
      "put": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Update Item Destination",
        "description": "Associate an item to a destination.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of the checkout",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "ID of the item to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destinationId",
            "in": "path",
            "description": "ID of the destination",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/items/{itemId}/subscriptionInfo": {
      "put": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Update Item Subscription Info",
        "description": "Updates the subscription info on the Item.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of the checkout",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "ID of the item to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Mozu.CommerceRuntime.Contracts.Subscriptions.SubscriptionInfo to use as update source on Item",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/items/destinations": {
      "post": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Bulk Update Item Destinations",
        "description": "Associate items to destinations in bulk.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of the checkout",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pairings of destination IDs with their associated items by ID",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ItemsForDestination"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/items/{itemId}/deliverydate": {
      "put": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Update the Delivery Date of the Item",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of the Checkout",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "ID of the item to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Delivery DateTme to update to",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        },
        "description": "Update the Delivery Date of the Item"
      }
    },
    "/commerce/checkouts/{checkoutId}/items/deliverydates": {
      "post": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Update Delivery Dates of Items in bulk",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "ID of the Checkout",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pairings of Delivery Date and associated ItemIds",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ItemsAndDeliveryDates"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        },
        "description": "Update Delivery Dates of Items in bulk"
      }
    },
    "/commerce/checkouts/{checkoutId}/payments/actions": {
      "post": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Create Payment Action",
        "description": "Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout whose payment action you want to change.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Action to be performed, along with any metadata.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/checkouts/{checkoutId}/payments/{paymentId}/actions": {
      "post": {
        "tags": [
          "commerceruntime_Checkout"
        ],
        "summary": "Perform Payment Action",
        "description": "Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction. \\r\\nIf in doubt, get a list of available payment actions first (such as AuthAndCapture, AuthorizePayment, CapturePayment, VoidPayment, CreditPayment, RequestCheck, ApplyCheck, or DeclineCheck). Note that for order management-only systems that use No-Operation payment gateways, such as due to the payments being processed by an external storefront or service instead of UCP, these actions will not actually be performed by UCP and instead will be automatically marked as a success.",
        "parameters": [
          {
            "name": "checkoutId",
            "in": "path",
            "description": "Unique identifier of the checkout whose payment action you want to change.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Action to be performed, along with any metadata.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Checkout"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/packages/{packageId}": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Delete an order package",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package to update on the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Package content to update on the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimePackage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              }
            }
          }
        },
        "description": ""
      },
      "delete": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Delete an order package",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package to remove from the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": ""
      },
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get an order package",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package to remove from the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              }
            }
          }
        },
        "description": "Get an order package"
      }
    },
    "/commerce/orders/{orderId}/packages/{packageId}/label": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get an order package label",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package to remove from the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Get an order package label"
      }
    },
    "/commerce/orders/{orderId}/packages/{packageId}/actions": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Retrieves available fulfillment actions",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order on which to get a list of available actions.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package ID to get fulfillment actions for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "description": ""
      }
    },
    "/commerce/orders/{orderId}/payments/actions": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Create Payment Action",
        "description": "Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose payment action you want to change.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Action to be performed, along with any metadata.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/payments/{paymentId}/actions": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Perform Payment Action",
        "description": "Performs a specific payment action. Available actions depend on the current status of the payment transaction. \r\nIf in doubt, get a list of available payment actions first.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose payment action you want to change.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Action to be performed, along with any metadata.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Available Payment Actions",
        "description": "Retrieves available payment actions which depends on the status of the order's payment transaction. \r\nPossible actions can be \"Create,\" \"Capture,\" \"Void,\" \"AuthCapture,\" or \"ReceiveCheck.\"",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose available payment actions you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/payments/{paymentId}": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Payment",
        "description": "Retrieves a specific payment transaction from the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose payment transaction you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "Unique identifier of the payment transaction you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/payments": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Payments",
        "description": "Retrieves payment transactions for an order. Allows filtering and sorting.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose payment transactions you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/payments/autocapture": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Auto Capture Payments",
        "description": "Amount to capture is total of fulfilled shipments - order adjustment - amount already captured.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order you want to auto capture.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCapture",
            "in": "query",
            "description": "Also capture unfulfilled shipments (excluding backorder). Used when credit card auths are about to expire.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/pickups": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Create Pickup",
        "description": "Apply a pickup to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the pickup.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pickup to create and add to the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pickup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/pickups/{pickupId}": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Update Pickup",
        "description": "Updates pickup details on the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the pickup.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pickupId",
            "in": "path",
            "description": "Pickup to update on the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pickup content to update on the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pickup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Delete Pickup",
        "description": "Delete an order pickup.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the pickup.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pickupId",
            "in": "path",
            "description": "Pickup to remove from the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Pickup",
        "description": "Gets a specified pickup on the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the pickup.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pickupId",
            "in": "path",
            "description": "Pickup to remove from the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/pickups/{pickupId}/actions": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Available Pickup Fulfillment Actions",
        "description": "Retrieves available fulfillment actions.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order on which to get a list of available actions.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pickupId",
            "in": "path",
            "description": "Pickup ID to get fulfillment actions for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/refunds": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Create Refund",
        "description": "Apply a refund to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Refund to create on the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Refund"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refund"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refund"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Refund"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/refunds/{refundId}": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Resend Refund Email",
        "description": "Resend refund email.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refundId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/orders/refunds/refundreasons": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Refund Reasons",
        "description": "Gets all the refund reasons.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundReasonCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundReasonCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RefundReasonCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/returnableitems": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Order Returnable Items",
        "description": "Provides fulfillment information for order items such as quantity ordered, fulfilled, and returned. Indicates which items are eligible for return.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReturnableItemCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReturnableItemCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReturnableItemCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/shipments": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Creates a shipment by grouping together multiple packages into logical shipments",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order which is ready to be shipped.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Package ids to use in creating shipments.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimePackage"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimePackage"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimePackage"
                  }
                }
              }
            }
          }
        },
        "description": ""
      }
    },
    "/commerce/orders/{orderId}/shipments/{shipmentId}": {
      "delete": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Deletes an existing order shipment",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipmentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Deletes an existing order shipment"
      },
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Shipment",
        "description": "Allows a shipment to be retrieved for the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipmentId",
            "in": "path",
            "description": "Shipment ID of the order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/shipments/methods": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Available Shipment Methods",
        "description": "Retrieves available shipping methods. Typically used to display available shipping method options on the checkout page.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose shipping methods you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "Gets a draft copy of the order if one is available.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShippingRate"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShippingRate"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShippingRate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/shipments/{shipmentNumber}/reprice": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Reprice Shipment",
        "description": "Allows a shipment to be repriced.",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepriceShipmentObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/shipments/{shipmentNumber}/adjustments": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Update Shipment Adjustments",
        "description": "Updates adjustments on shipments.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentAdjustment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/shipments/{shipmentNumber}/item/{itemId}/adjustments": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Update Shipment Item",
        "description": "Updates shipment item with new shipment adjustment.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentItemAdjustment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/shipments/{shipmentNumber}/split": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Split Shipments",
        "description": "Allows spliting an existing shipment.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipmentNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitShipmentsObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShipment"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShipment"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShipment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/validationresults": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Add Validation Result",
        "description": "Adds a validation result from an external system to an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order to which you want to add a note.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The order validation result.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderValidationResult"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderValidationResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderValidationResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderValidationResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Validation Results",
        "description": "Gets list of validation results on an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order to which you want to add a note.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderValidationResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderValidationResult"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderValidationResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/adjustment": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Apply Adjustment",
        "description": "Apply a pricing adjustment to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Adjustment to apply to the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Adjustment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Remove Adjustment",
        "description": "Removes an adjustment that had been previously applied to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/adjustment/shipping": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Apply Shipping Adjustment",
        "description": "Apply a shipping adjustment to the order specified by order Id.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Adjustment to apply to the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Adjustment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Remove Shipping Adjustment",
        "description": "Removes an adjustment that had been previously applied to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/adjustment/handling": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Apply Handling Adjustment",
        "description": "Apply a handling adjustment to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Adjustment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Remove Handling Adjustment",
        "description": "Removes a coupon that had been previously applied to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/attributes": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Create Order Attributes",
        "description": "Adds a attributeSet to the order. This is an internal attributeSet that the merchant might want to add to an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order to which you want to add a attributeSet.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Attributes to upsert.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderAttribute"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Order Attributes",
        "description": "Retrieves a list of all attribute sets for an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose attributeSets you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Update Order Attributes",
        "description": "Updates a specific order attribute set of an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose attributeSet you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "removeMissing",
            "in": "query",
            "description": "Indicates that items missing from the collection should be removed.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Attributes to upsert.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderAttribute"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAttribute"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/billinginfo": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Billing Info",
        "description": "Retrieves the customer's billing address.If paying by credit card, it retrieves the card's number, expiration date, card holder's name and billing address.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifer of the order whose customer's payment source you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "Determines whether the draft version should be retrieved if one exists.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfo"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Set Billing Info",
        "description": "Adds a payment source to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose payment source you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All the properties that you want the payment source object to contain.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfo"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BillingInfo"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/cancel/reasons": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Order Cancel Reasons",
        "description": "Gets order cancellation reasons based on a category.",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "SHOPPER"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelReasonCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelReasonCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CancelReasonCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/cancel/{orderId}": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Cancel Order",
        "description": "Cancel an order with the cancel reason.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeCanceledReason"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Orders",
        "description": "Retrieves a list of orders according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, \r\n            gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Text to perform a search on",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "description": "Limit of the records to include in a search, used for global search",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeBin",
            "in": "query",
            "description": "Whether to include BIN numbers on credit card payments",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Response groups to return or filter the order graph",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "'synthesized' to provide a synthesized order from shipment data",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Create Order",
        "description": "Creates a new order for no-cart quick-ordering scenarios. The full API payload required integration with the ecommerce front-end.",
        "parameters": [
          {
            "name": "cartId",
            "in": "query",
            "description": "Unique identifier of the cart. This is the original cart ID expressed as a GUID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteId",
            "in": "query",
            "description": "Unique identifier of the quote.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the order to place.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/users": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Change Order UserId",
        "description": "Changes the User ID associated with an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order to change.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/priceList": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Change Order Price List",
        "description": "Changes the pricelist associated with an order.The desired price list code should be specified on the ApiContext.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order to change",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The code for the pricelist to apply",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/email/resend": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Resend Order Confirmation Email",
        "description": "Resend order confirmation email specified by the order Id.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/orders/{orderId}": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Order",
        "description": "Retrieves the details of an order specified by the order ID.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose details you want.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "Gets a draft copy of the order if one is available",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeBin",
            "in": "query",
            "description": "Whether to include BIN numbers on credit card payments",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "'synthesized' to provide a synthesized order from shipment data",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Update Order",
        "description": "Updates the billing and/or shipping information of an existing order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The order ID to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the order to place.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/digitalWallet/{digitalWalletType}": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Process Digital Wallet",
        "description": "Process digital wallet (used to hold 3rd party payment and shipping information) on the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digitalWalletType",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DigitalWallet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/draft": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Delete Order Draft",
        "description": "Deletes a draft version of an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "The order ID to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/orders/{orderId}/actions": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Perform Order Action",
        "description": "Set an action on the order. Available actions depend on the current status of the order. If in doubt, get a list of available order actions first.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Action to perform, which can be \"Create,\" \"Submit,\" \"SetAsProcessing,\" \"Close,\" or \"Cancel.\"",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Available Actions",
        "description": "Retrieves available order actions which depends on the status of the order.Possible actions can be Create, Submit, SetAsProcessing, Close or Cancel.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose available order actions you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/taxableorders": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Taxable Orders",
        "description": "Gets an order divided up into \"TaxableOrders\" based on the source and delivery locations of the order items. Generally used for the purpose of splitting it into multiple taxable orders in order to fulfill the order in multiple locations.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose taxable orders you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricingTaxableOrder"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricingTaxableOrder"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PricingTaxableOrder"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/discounts/{discountId}": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Update Order Discount",
        "description": "Update existing discount on the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discountId",
            "in": "path",
            "description": "Identifies the discount to be updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Discount information to use as the update source.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/price": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Price Order",
        "description": "",
        "parameters": [
          {
            "name": "refreshShipping",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/sms/optout/{siteId}": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Sms Opt Out",
        "description": "Opting out from the sms notifications.",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/orders/{orderId}/evaluaterollupstatus": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Evaluate Order Rollup Status",
        "description": "Evaluate Order Rollup Status",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/upsertalternatecontact": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Endpoint to add/update alternate contact",
        "description": "",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlternateContact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/removealternatecontact": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Endpoint to remove alternate conatact from order and shipments.",
        "description": "",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/coupons/{couponCode}": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Apply Coupon",
        "description": "Apply a coupon to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code that the customer supplies to get the discounted price.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Remove Coupon",
        "description": "Removes a coupon that had been previously applied to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/coupons": {
      "delete": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Remove Coupons",
        "description": "Removes all coupons that had been previously applied to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/digitalpackages": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Create Digital Package",
        "description": "Apply a digital package to the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the digital package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Digital Package to create and add to the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DigitalPackage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Update Digital Package",
        "description": "Updates a digital package on the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digitalPackageId",
            "in": "path",
            "description": "Package to update on the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Package content to update on the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DigitalPackage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Delete Digital Package",
        "description": "Delete an order digital package.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digitalPackageId",
            "in": "path",
            "description": "Digital package to remove from the order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Digital Package",
        "description": "Get an order digital package.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digitalPackageId",
            "in": "path",
            "description": "Digital Package Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DigitalPackage"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}/actions": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Available Digital Package Fulfillment Actions",
        "description": "Retrieves available fulfillment actions.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order on which to get a list of available actions.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digitalPackageId",
            "in": "path",
            "description": "Package ID to get fulfillment actions for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/extendedproperties": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Extended Properties",
        "description": "Get extended properties on an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Adds Extended Properties",
        "description": "Adds extended properties.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Extended properties.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Updated extended properties",
        "description": "Update extended properties.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upsert",
            "in": "query",
            "description": "Allow insert or update",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Extended properties",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedProperty"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Delete Extended Properties",
        "description": "Delete extended properties on the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/orders/{orderId}/extendedproperties/{key}": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Update Extended Property",
        "description": "Updated specific extended property",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upsert",
            "in": "query",
            "description": "Allow insert or update",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Extended property",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedProperty"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedProperty"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Delete Extended Property",
        "description": "Removes a particular order item from the order of the current shopper.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/orders/{orderId}/fulfillment/actions": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Perform Fulfillment Action",
        "description": "Sets the fulfillment action to 'Ship'. To ship an order, the order must have a customer name, the 'Open' or 'OpenAdProcessing' status, full shipping address, and shipping method.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order which is ready to be shipped.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Action to perform along with metadata about which packages, digital packages, or pickups to perform the action on",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/fulfillment/email/resend": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Resend Package Fulfillment Email",
        "description": "Resends the package fulfillment email.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/fulfillmentinfo": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Fulfillment Info",
        "description": "Retrieves an order's fulfillment information specified by order ID.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "Determines whether the draft version should be retrieved if one exists.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentInfo"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Set Fulfillment Info",
        "description": "Modifies an order's fulfillment information. For example, to update the fulfillment address, estimated delivery date, or the merchant's fulfillment cost.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose fulfillment information you want to change.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties that you want the updated fulfillment information to have.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentInfo"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentInfo"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/giftcard/{giftcardId}/resend": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Resend Gateway Gift Card Email",
        "description": "Resend gateway giftcard email.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "giftcardId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Order Items",
        "description": "Retrieves the details of all items in an order specified by order Id.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose items you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "Gets a draft copy of the order if one is available",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Create Order Item",
        "description": "Adds a product or other item to the cart of the current shopper.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order to add an item to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipInventoryCheck",
            "in": "query",
            "description": "Determines wheter or not to check inventory on an item when adding an item to the order or when placing an order",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the new cart item. Required property: Product.ProductCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Order Item",
        "description": "Retrieves the details of a single order item.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose item you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item whose details you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "Gets a draft copy of the order if one is available",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Delete Order Item",
        "description": "Removes a particular order item from the order of the current shopper.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{lineId}": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Order Item Via LineId",
        "description": "Retrieves the details of a single order item via its line id.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose item you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lineId",
            "in": "path",
            "description": "Line ID of the order item whose details you want to get.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "Gets a draft copy of the order if one is available",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}/price/{price}": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Update Item Product Price",
        "description": "Updates the price of an individual order item in the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "price",
            "in": "path",
            "description": "Price to update the item product to.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}/quantity/{quantity}": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Update Item Quantity",
        "description": "Updates the quantity of an individual order item in the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quantity",
            "in": "path",
            "description": "New quantity for the specified order item.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}/dutyAmount/{dutyAmount}": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Update Item Duty",
        "description": "Updates the duty amount of an order item in the order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dutyAmount",
            "in": "path",
            "description": "Duty amount to update the item product to.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}/fulfillment": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Update Item Fulfillment",
        "description": "Updates the fullfillment method and/or location of an individual order item in the order of the current shopper.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The order item containing fulfilment information to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}/discounts/{discountId}": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Update Order Item Discount",
        "description": "Update a discount on the order item to ignore or unignore it.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discountId",
            "in": "path",
            "description": "Identifies the discount to be updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Discount information to use as the update source.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}/subscriptionInfo": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Update Order Item Subscription Info, applies only to Draft Order",
        "description": "Update a subscription info on the order item.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Mozu.CommerceRuntime.Contracts.Subscriptions.SubscriptionInfo to use as the update source",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/items/{orderItemId}/deliverydate": {
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Updates the Delivery Date of a particular Order Item",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "description": "Unique identifier of the order item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Determines whether or not to check versioning of items for concurrency purposes.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "description": "Updates the Delivery Date of a particular Order Item"
      }
    },
    "/commerce/orders/{orderId}/notes": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Create Order Note",
        "description": "Adds a note to the order. This is an internal note that the merchant might want to add to an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order to which you want to add a note.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Text of the note. Maximum 256 characters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderNote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Order Notes",
        "description": "Retrieves a list of all notes for an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose notes you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderNote"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderNote"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderNote"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/orders/{orderId}/notes/{noteId}": {
      "get": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Get Order Note",
        "description": "Retrieves a specific order note from an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose note you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of the note whose text you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Update Order Note",
        "description": "Updates a specific order note for an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose note you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of the note whose text you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Text of the note.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderNote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Delete Order Note",
        "description": "Deletes a specific order note on an order.",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order whose note you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of the note whose text you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/orders/{orderId}/packages": {
      "post": {
        "tags": [
          "commerceruntime_Order"
        ],
        "summary": "Apply a package to the order",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Unique identifier of the order with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Package to create and add to the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimePackage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              }
            }
          }
        },
        "description": ""
      }
    },
    "/commerce/orders/attributedefinition/attributes": {
      "get": {
        "tags": [
          "commerceruntime_OrderAttributeDefinitions"
        ],
        "summary": "Get Attributes",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              }
            }
          }
        },
        "description": "Retrieves the details of attributes."
      },
      "post": {
        "tags": [
          "commerceruntime_OrderAttributeDefinitions"
        ],
        "summary": "Create Attribute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "description": "Create a new attribute."
      }
    },
    "/commerce/orders/attributedefinition/attributes/{attributeFQN}/VocabularyValues": {
      "get": {
        "tags": [
          "commerceruntime_OrderAttributeDefinitions"
        ],
        "summary": "Get Attribute Vocabulary Values",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves the details of attribute vocabulary values."
      }
    },
    "/commerce/orders/attributedefinition/attributes/{attributeFQN}": {
      "get": {
        "tags": [
          "commerceruntime_OrderAttributeDefinitions"
        ],
        "summary": "Get Attribute",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "description": "Retrieves the details of an attribute."
      },
      "put": {
        "tags": [
          "commerceruntime_OrderAttributeDefinitions"
        ],
        "summary": "Update Attribute",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "description": "Update a category attribute."
      }
    },
    "/commerce/quotes/{quoteId}/comments/{commentId}": {
      "get": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Get Quote Comment",
        "description": "Retrieves a specific quote comment from an quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote whose comments you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Unique identifier of the comment whose text you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/comments": {
      "get": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Get All Quote Comments",
        "description": "Retrieves all quote comments from an quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote whose comments you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Create Comment",
        "description": "Create a comment on a specific quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote whose comments you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Comment which wanted to add on a quote.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteComment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}": {
      "get": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Get Quote",
        "description": "Retrieves the details of a quote specified by the quote ID.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote whose details you want.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Update Quote",
        "description": "Updates a quote specified by quote Id.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Quote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Delete Quote",
        "description": "Deletes the quote specified by quote Id.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/quotes": {
      "get": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Get Quotes",
        "description": "Retrieves a list of B2B Quotes according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, \r\n            gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Text to perform a search on",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "description": "Limit of the records to include in a search, used for global search",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Create quote",
        "description": "Creates a new B2B quote. With quotes, buyers can request an estimate based on a list of products they are interested in. Sellers can evaluate these requests and make adjustments to pricing, discounts, or other criteria before the buyer chooses whether to place the order or not. Comments can be left on the quote to communicate during this negotiation process.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Quote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/customers/{customerAccountId}/{quoteName}": {
      "get": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Get Quote By Name",
        "description": "Retrieves quote by its name.",
        "parameters": [
          {
            "name": "customerAccountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "quoteName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/copy": {
      "post": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Copy quote",
        "description": "Copies a source quote and creates a new quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/adjustments": {
      "post": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Update Quote Adjustments",
        "description": "Set product, shipping, and handling adjustments on the specified quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Adjustments to be added to the quote.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteAdjustment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/shippingMethods": {
      "get": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Get Available Shipping Methods",
        "description": "Retrieves available shipping methods for quotes. Typically used to display available shipping method options on the quote page.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote whose shipping methods you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShippingRate"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShippingRate"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeShippingRate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/fulfillmentInfo": {
      "post": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Update Fulfillment Info",
        "description": "Updates the fulfillmentInfo of quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/email": {
      "post": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Send Quote Email",
        "description": "Send Quote email to provided email addresses or email mentioned on the quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "optional list of email addresses",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/quotes/create/{cartId}": {
      "post": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Create Quote From Cart",
        "description": "Creates a new quote from an existing cart, that is, when the customer chooses to initate quote.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Unique identifier of the cart. This is the original cart ID expressed as a GUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/coupons/{couponCode}": {
      "put": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Apply Coupon",
        "description": "Apply a coupon to the quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote with which to associate the coupon.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code that the customer supplies to get the discounted price.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Remove Coupon",
        "description": "Removes a coupon that had been previously applied to the Quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the Quote with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "Coupon code to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/coupons": {
      "delete": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Remove Coupons",
        "description": "Removes all coupons that had been previously applied to the Quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the Quote with the coupon you want to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/items": {
      "get": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Get Quote Items",
        "description": "Returns a listing of Quotes",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Add Item To Quote",
        "description": "Adds an item to the Quote of the current shopper.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/customers/{customerAccountId}/{quoteName}/items": {
      "get": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Get Quote Items By Quote Name",
        "description": "Gets the quote specified by the quote name.",
        "parameters": [
          {
            "name": "customerAccountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "quoteName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/items/{quoteItemId}": {
      "get": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Get Quote Item",
        "description": "Retrieves an individual Quote item from a Quote specified by quote Id and quote item Id.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteItemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "draft",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Delete Quote Item",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteItemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete Quote Item"
      }
    },
    "/commerce/quotes/{quoteId}/items/{quoteItemId}/quantity/{quantity}": {
      "put": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Update Item Quantity",
        "description": "Updates the quantity of an individual Quote item.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteItemId",
            "in": "path",
            "description": "Unique identifier of the quote item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quantity",
            "in": "path",
            "description": "New quantity for the specified quote item.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/items/{quoteItemId}/price/{price}": {
      "put": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Update Item Product Price",
        "description": "Overrides the price of an individual quote item.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteItemId",
            "in": "path",
            "description": "Unique identifier of the quote item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "price",
            "in": "path",
            "description": "New Price for the specified quote item.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/quotes/{quoteId}/items/{quoteItemId}/fulfillment": {
      "put": {
        "tags": [
          "commerceruntime_Quote"
        ],
        "summary": "Update Item Fulfillment",
        "description": "Updates the fulfillment method and/or location of an individual quote item in the quote.",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "Unique identifier of the quote.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quoteItemId",
            "in": "path",
            "description": "Unique identifier of the quote item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updateMode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The quote item containing fulfillment information to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns": {
      "get": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Get Returns",
        "description": "Provides a paged, collection of returns for a Site.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Create Returns",
        "description": "Creates a new Return for an order or product list.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Return"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/email/resend": {
      "put": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Resend Return Email",
        "description": "Resends return email.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReturnAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/returns/reasons": {
      "get": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Get Reasons",
        "description": "Gets all the return reasons.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReasonCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}": {
      "put": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Get Reasons",
        "description": "Gets all the return reasons.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Return"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Delete Return",
        "description": "Deletes a return specified by return Id.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Get Return",
        "description": "Allows for retrieval for a return given only the return Id.  Further manipulation of that returns must be done off of the order.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/actions": {
      "post": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Delete Return",
        "description": "Perform Return Action.",
        "requestBody": {
          "description": "A ReturnAction instance that takes the name of the action to be performed and a list of Return Ids upon which to perform the action.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReturnAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/ship": {
      "post": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Create Return Shipping Order",
        "description": "Creates a child order for the return for processing replacments. The request body (a collection of ReturnItemSpecifier) is optional. If the body is empty, the operation replaces all remaining items marked for replace. If you want to replace only a specific item(s) marked for return, you must specify the item(s) in the request body.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "The ID of the parent return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Optionally specify which items to include and in what quantities",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReturnItemSpecifier"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/actions": {
      "get": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Get Available Return Actions",
        "description": "Gets all the available actions on the return specified by return Id.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/payments": {
      "get": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Get Payments",
        "description": "Gets payments on the return specified by return Id.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/payments/{paymentId}": {
      "get": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Get Payment",
        "description": "Gets specific payment on the return specified by return Id and payment Id.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/payments/actions": {
      "post": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Create Payment Action For Return",
        "description": "Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Action to specify. Possible actions can be \"Create,\" \"Capture,\" \"Void,\" \"AuthCapture,\" or \"ReceiveCheck.\"",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/payments/{paymentId}/actions": {
      "post": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Perform Payment Action For Return",
        "description": "Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.  To retrieve the list of available actions, use an operation like GetAvailableReturnActions to view the actions available for the resource you are updating.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Action to specify. Possible actions can be \"Create,\" \"Capture,\" \"Void,\" \"AuthCapture,\" or \"ReceiveCheck.\"",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/restock": {
      "post": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Restock Return Items",
        "description": "API to restock return item.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of return items with quantity to be restocked",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RestockableReturnItem"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/shipping/label": {
      "get": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Get Return Label",
        "description": "Gets the return label specified by returnId.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarrierServiceGenerateLabelResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarrierServiceGenerateLabelResponse"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CarrierServiceGenerateLabelResponse"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/autorefund": {
      "post": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Attempt to automatically refund the return",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of return item id with proccessing fee",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AutoRefundRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        },
        "description": "Attempt to automatically refund the return"
      }
    },
    "/commerce/returns/{returnId}/paymentDistribution": {
      "get": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Get Payment Distribution",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnRefundDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnRefundDetails"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnRefundDetails"
                }
              }
            }
          }
        },
        "description": "Get Payment Distribution"
      }
    },
    "/commerce/returns/{returnId}/items": {
      "get": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Get Return Items",
        "description": "Retrieves the details of all return items in an order.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return whose items you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnItemCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnItemCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnItemCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Create Return Item",
        "description": "Adds a return item to the return.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "ID of the order to add an item to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "All properties of the new return item.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReturnItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/items/{returnItemId}": {
      "get": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Get Return Item",
        "description": "Retrieves the details of a single return item.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return whose item you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnItemId",
            "in": "path",
            "description": "Unique identifier of the return item whose details you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnItem"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{orderId}/items/{orderItemId}": {
      "delete": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Delete Order Item",
        "description": "Removes a particular return item from the return of the current shopper.",
        "parameters": [
          {
            "name": "returnId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnItemId",
            "in": "query",
            "description": "Unique identifier of the order item.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderItemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/notes": {
      "post": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Create Return Note",
        "description": "Adds a note to the return. This is an internal note that the merchant might want to add to a return. This note is visible in Admin for customer service representatives to see.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return to which you want to add a note.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Text of the note. Maximum 256 characters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderNote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Get Return Notes",
        "description": "Retrieves a list of all notes for a return.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return whose notes you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderNote"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderNote"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderNote"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/returns/{returnId}/notes/{noteId}": {
      "get": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Get Return Note",
        "description": "Retrieves a specific note from a return.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return whose note you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of the note whose text you want to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Update Return Note",
        "description": "Updates a specific note for a return.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return whose note you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of the note whose text you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Text of the note.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderNote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderNote"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Delete Return Note",
        "description": "Deletes a specific note on a return.",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return whose note you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of the note whose text you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/returns/{returnId}/packages": {
      "post": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Apply a package to the return",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Package to create and add to the return",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimePackage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              }
            }
          }
        },
        "description": " package?"
      }
    },
    "/commerce/returns/{returnId}/packages/{packageId}": {
      "put": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Delete an order package",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package to update on the return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Package content to update on the return",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimePackage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              }
            }
          }
        },
        "description": ""
      },
      "delete": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Delete an order package",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package to remove from the return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": ""
      },
      "get": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Get an order package",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package to remove from the return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimePackage"
                }
              }
            }
          }
        },
        "description": "Get an order package"
      }
    },
    "/commerce/returns/{returnId}/packages/{packageId}/label": {
      "get": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Get an order package",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the return with which to associate the package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "Package to remove from the return",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnAsBase64Png",
            "in": "query",
            "description": "Return as base64 png",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Get an order package"
      }
    },
    "/commerce/returns/{returnId}/shipments": {
      "post": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Creates a shipment by grouping together multiple packages into logical shipments",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Unique identifier of the order which is ready to be shipped.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Package ids to use in creating shipments.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimePackage"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimePackage"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimePackage"
                  }
                }
              }
            }
          }
        },
        "description": ""
      }
    },
    "/commerce/returns/{returnId}/shipments/{shipmentId}": {
      "delete": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Deletes an existing return shipment",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "ID of the return",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipmentId",
            "in": "path",
            "description": "Shipment ID of the return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Deletes an existing return shipment"
      },
      "get": {
        "tags": [
          "commerceruntime_Return"
        ],
        "summary": "Allows a shipment to be retrieved for the order",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "ID of the return",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipmentId",
            "in": "path",
            "description": "Shipment ID of the return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeShipment"
                }
              }
            }
          }
        },
        "description": ""
      }
    },
    "/commerce/wishlists": {
      "get": {
        "tags": [
          "commerceruntime_Wishlist"
        ],
        "summary": "Get Wishlists",
        "description": "Retrieves a list of wishlists according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, \r\n            gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Text to perform a search on",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "description": "Limit of the records to include in a search, used for global search",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Wishlist"
        ],
        "summary": "Create Wishlist",
        "description": "Create wishlist.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Wishlist"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/wishlists/{wishlistId}": {
      "get": {
        "tags": [
          "commerceruntime_Wishlist"
        ],
        "summary": "Get Wishlist",
        "description": "Retrieves the details of a wishlist specified by the wishlist ID.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Wishlist"
        ],
        "summary": "Update Wishlist",
        "description": "Updates a wishlist specified by wishlist Id.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Wishlist"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Wishlist"
        ],
        "summary": "Deletes Wishlist",
        "description": "Deletes a wishlist specified by wishlist Id.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/wishlists/customers/{customerAccountId}/{wishlistName}": {
      "get": {
        "tags": [
          "commerceruntime_Wishlist"
        ],
        "summary": "Get Wishlist By Name",
        "description": "Retrieves wishlist by name.",
        "parameters": [
          {
            "name": "customerAccountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "wishlistName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/wishlists/{wishlistId}/items": {
      "get": {
        "tags": [
          "commerceruntime_Wishlist"
        ],
        "summary": "Get Wishlist Items",
        "description": "Returns a listing of wishlists.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItemCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItemCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItemCollection"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Wishlist"
        ],
        "summary": "Remove All Wishlist Items",
        "description": "Clears all items in the wishlist.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Wishlist"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "commerceruntime_Wishlist"
        ],
        "summary": "Add Item To Wishlist",
        "description": "Adds an item to the wishlist of the current shopper.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WishlistItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/wishlists/customers/{customerAccountId}/{wishlistName}/items": {
      "get": {
        "tags": [
          "commerceruntime_Wishlist"
        ],
        "summary": "Get Wishlist Items By WishlistName",
        "description": "Returns a listing of wishlists.",
        "parameters": [
          {
            "name": "customerAccountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "wishlistName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItemCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItemCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItemCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/wishlists/{wishlistId}/items/{wishlistItemId}": {
      "get": {
        "tags": [
          "commerceruntime_Wishlist"
        ],
        "summary": "Get Wishlist Item",
        "description": "Retrieves an individual wishlist item from a wishlist.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wishlistItemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "commerceruntime_Wishlist"
        ],
        "summary": "Update Wishlist Item",
        "description": "Updates a wishlist item.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wishlistItemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WishlistItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "commerceruntime_Wishlist"
        ],
        "summary": "Delete Wishlist Item",
        "description": "Delete/remove wishlist item.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wishlistItemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/wishlists/{wishlistId}/items/{wishlistItemId}/{quantity}": {
      "put": {
        "tags": [
          "commerceruntime_Wishlist"
        ],
        "summary": "Update Wishlist Item Quantity",
        "description": "Updates the quantity of an item in the wishlist.",
        "parameters": [
          {
            "name": "wishlistId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wishlistItemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quantity",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WishlistItem"
                }
              }
            }
          }
        }
      }
    },
    "/content/documentlists/{documentListName}/documents/{documentId}/content": {
      "get": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Get Document Content",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Get Document Content"
      },
      "head": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Get Document Content Headers",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Get Document Content Headers"
      },
      "put": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Update Document Content",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/ContentHttpRequestMessage"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/ContentHttpRequestMessage"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentHttpRequestMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Update Document Content"
      },
      "delete": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Delete Document Content",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete Document Content"
      }
    },
    "/content/documentlists/{documentListName}/documents/{documentId}/transform": {
      "get": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Get Resized Image",
        "description": "Returns transformations on a document. For example, resizing an image.",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "width",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "height",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxWidth",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxHeight",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quality",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/content/documentlists/{documentListName}/documentTree/{documentName}/content": {
      "get": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Get Document Content by Path",
        "description": "Returns transformations on a document. For example, resizing an image.",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "head": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Get Document Content Headers by Path",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Get Document Content Headers by Path"
      },
      "put": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Update Document Content by Path",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "The Mozu.Content.Contracts.DocumentList in which the document resides",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Binary document content to store must be less than 16M",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/ContentHttpRequestMessage"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/ContentHttpRequestMessage"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentHttpRequestMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Update Document Content by Path"
      },
      "delete": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Delete Document Content by Path",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete Document Content by Path"
      }
    },
    "/content/documentlists/{documentListName}/documentTree/{documentName}/transform": {
      "get": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Get Resized Image by Path",
        "description": "Returns transformations on a document. For example, resizing an image. By Path",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxWidth",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxHeight",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quality",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/content/documentlists/{documentListName}/documents": {
      "post": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Create Document",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Mozu.Content.Contracts.Document to Add to the Mozu.Content.Contracts.DocumentList",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        },
        "description": "Create Document"
      },
      "get": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Get Documents",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Mozu.Content.Contracts.PropertyType filter expression to match against document properties. <seealso cref=\"T:Mozu.Core.FilterParsing.FilterParser\" />",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort expression.  <seealso cref=\"T:Mozu.Core.FilterParsing.SortParser\" />",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "First item in the page to return from the total result set",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "if this call should include a adocument that isn't active in the given preview date",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "path from which to return documents",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeSubPaths",
            "in": "query",
            "description": "if true this call will populate Subpaths",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "queryScope",
            "in": "query",
            "description": "Determines if the path parameter is used to scope the query to the specified path or ignored for a global scope.\r\n            Defaults to specified path only. Valid values are: SpecifiedPathOnly, Global",
            "schema": {
              "type": "string",
              "default": "SpecifiedPathOnly"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCollection"
                }
              }
            }
          }
        },
        "description": "Get Documents"
      },
      "delete": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Delete Document",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete Document"
      }
    },
    "/content/documentlists/{documentListName}/documents/{documentId}": {
      "get": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Get Document",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "if this call should include a adocument that isn't active in the given preview date",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        },
        "description": "Get Document"
      },
      "put": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Update Document",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "DocumentListName name where the document resides",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Id of the document to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        },
        "description": "Update Document"
      },
      "patch": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Patch Document",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        },
        "description": "Patch Document"
      },
      "delete": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Delete Document",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete Document"
      }
    },
    "/content/documentlists/{documentListName}/documentTree/{documentName}": {
      "get": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Get Document by Path",
        "description": "Retrieves a specific Document within the specified ContentCollection using the specified document name, unique within a specific folder with the specified documentId, version, and status.",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "if this call should include a document that isn't active in the given preview date",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        }
      }
    },
    "/content/documentlists/{documentListName}/documents/move": {
      "put": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Move Document",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "DocumentListName name where the document resides",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourcePath",
            "in": "query",
            "description": "Source path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destPath",
            "in": "query",
            "description": "Destination path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "renameDuplicates",
            "in": "query",
            "description": "Flag to rename file if duplicate filename exists in destination (defaults to true)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "previewMode",
            "in": "query",
            "description": "Flag to denote whether to preview move operation or actually perform (defaults to false)",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentMoveSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentMoveSummary"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentMoveSummary"
                }
              }
            }
          }
        },
        "description": "Move Document"
      }
    },
    "/content/documentlists/{documentListName}/documents/copy": {
      "put": {
        "tags": [
          "content_Documents"
        ],
        "summary": "Copy Document",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "DocumentListName name where the documents reside",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing Document Ids to copy and the destination path",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DocumentCopyRequest"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/DocumentCopyRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentCopyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCopyResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCopyResponse"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCopyResponse"
                }
              }
            }
          }
        },
        "description": "Copy Document"
      }
    },
    "/content/documentlists": {
      "post": {
        "tags": [
          "content_DocumentList"
        ],
        "summary": "Create DocumentList",
        "requestBody": {
          "description": "DocumentListName",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DocumentList"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/DocumentList"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              }
            }
          }
        },
        "description": "Create DocumentList"
      },
      "get": {
        "tags": [
          "content_DocumentList"
        ],
        "summary": "Get Document Lists",
        "description": "Retrieve a paged documentListName of all document lists",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "maximum number of items to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListCollection"
                }
              }
            }
          }
        }
      }
    },
    "/content/documentlists/{documentListName}": {
      "get": {
        "tags": [
          "content_DocumentList"
        ],
        "summary": "Get Document List",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "Name of document documentListName to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              }
            }
          }
        },
        "description": "Get Document List"
      },
      "put": {
        "tags": [
          "content_DocumentList"
        ],
        "summary": "Update Document List",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "The name of the documentList to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content Collection values to apply",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DocumentList"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/DocumentList"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              }
            }
          }
        },
        "description": "Update Document List"
      },
      "delete": {
        "tags": [
          "content_DocumentList"
        ],
        "summary": "Delete Document List",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "Name of content documentListName to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete Document List"
      }
    },
    "/content/documentlists/{documentListName}/views/{viewName}/documents": {
      "get": {
        "tags": [
          "content_Views"
        ],
        "summary": "Get View Documents",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCollection"
                }
              }
            }
          }
        },
        "description": "Get View Documents"
      }
    },
    "/content/documentlistTypes": {
      "post": {
        "tags": [
          "content_DocumentListType"
        ],
        "summary": "Create Document List Type",
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DocumentListType"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/DocumentListType"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentListType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              }
            }
          }
        },
        "description": "Create Document List Type"
      },
      "get": {
        "tags": [
          "content_DocumentListType"
        ],
        "summary": "Get Document List Types",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListTypeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListTypeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListTypeCollection"
                }
              }
            }
          }
        },
        "description": "Get Document List Types"
      }
    },
    "/content/documentlistTypes/{documentListTypeFQN}": {
      "put": {
        "tags": [
          "content_DocumentListType"
        ],
        "summary": "Update Document List Type",
        "parameters": [
          {
            "name": "documentListTypeFQN",
            "in": "path",
            "description": "The name of the document documentListName to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content Collection values to apply",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DocumentListType"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/DocumentListType"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentListType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              }
            }
          }
        },
        "description": "Update Document List Type"
      },
      "get": {
        "tags": [
          "content_DocumentListType"
        ],
        "summary": "Get Document List Type",
        "parameters": [
          {
            "name": "documentListTypeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              }
            }
          }
        },
        "description": "Get Document List Type"
      }
    },
    "/content/documentpublishing/draft": {
      "get": {
        "tags": [
          "content_DocumentPublishing"
        ],
        "summary": "Get Document Draft Summaries",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "maximum number of items to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "documentLists",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDraftSummaryPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDraftSummaryPagedCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDraftSummaryPagedCollection"
                }
              }
            }
          }
        },
        "description": "Get Document Draft Summaries"
      },
      "post": {
        "tags": [
          "content_DocumentPublishing"
        ],
        "summary": "Delete Document Drafts",
        "description": "Remove draft of each Document associated with te id in documentIds. Send empty body to remove all drafts",
        "parameters": [
          {
            "name": "documentLists",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/octet-stream": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/content/documentpublishing/active": {
      "put": {
        "tags": [
          "content_DocumentPublishing"
        ],
        "summary": "Publish Documents",
        "description": "Publishes draft of each Document associated with the id in documentIds. Send empty body to publish all drafts",
        "parameters": [
          {
            "name": "documentLists",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/octet-stream": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/content/publishsets/{code}/items": {
      "get": {
        "tags": [
          "content_DocumentPublishSet"
        ],
        "summary": "Get Publish Set Items",
        "description": "Retrieve a paged collection of publish set Items.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "code of the publish set.  Use UNASSIGNED or ALL to denote those special cases",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "maximum number of items to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "start index",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDraftSummaryPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDraftSummaryPagedCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDraftSummaryPagedCollection"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "content_DocumentPublishSet"
        ],
        "summary": "Add Publish Set Items",
        "description": "Adds a set of documents by id to a publish set.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "code of the publish set.  Use UNASSIGNED or ALL to denote those special cases",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "documentId/doclist pairs to add to the publish set",
          "content": {
            "text/plain": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddOrDeletePublishItem"
                }
              }
            },
            "application/octet-stream": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddOrDeletePublishItem"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddOrDeletePublishItem"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/content/publishsets/{code}": {
      "post": {
        "tags": [
          "content_DocumentPublishSet"
        ],
        "summary": "Delete Publish Set",
        "description": "Adds a set of documents by id to a publish set.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "code of the publish set.  Use UNASSIGNED or ALL to denote those special cases",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shouldDiscard",
            "in": "query",
            "description": "should trash the drafts in the publish set as well",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/content/publishsets": {
      "get": {
        "tags": [
          "content_DocumentPublishSet"
        ],
        "summary": "Get Publish Set",
        "description": "Returns a List of current Publishing sets with counts of drafts in each.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "maximum number of items to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "start index",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishSetSummaryPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishSetSummaryPagedCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PublishSetSummaryPagedCollection"
                }
              }
            }
          }
        }
      }
    },
    "/content/documenttypes": {
      "post": {
        "tags": [
          "content_DocumentType"
        ],
        "summary": "Create Document Type",
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DocumentType"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/DocumentType"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              }
            }
          }
        },
        "description": "Create Document Type"
      },
      "get": {
        "tags": [
          "content_DocumentType"
        ],
        "summary": "Get Document Types",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTypeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTypeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTypeCollection"
                }
              }
            }
          }
        },
        "description": "Get Document Types"
      }
    },
    "/content/documenttypes/{documentTypeName}": {
      "get": {
        "tags": [
          "content_DocumentType"
        ],
        "summary": "Get Document Type",
        "parameters": [
          {
            "name": "documentTypeName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              }
            }
          }
        },
        "description": "Get Document Type"
      },
      "put": {
        "tags": [
          "content_DocumentType"
        ],
        "summary": "Update Document Type",
        "parameters": [
          {
            "name": "documentTypeName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DocumentType"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/DocumentType"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              }
            }
          }
        },
        "description": "Update Document Type"
      }
    },
    "/content/propertytypes": {
      "get": {
        "tags": [
          "content_DocumentPropertyType"
        ],
        "summary": "Get Property Types",
        "description": "Retrieves a PagedCollection of PropertyTypes",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyTypeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyTypeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyTypeCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "content_DocumentPropertyType"
        ],
        "summary": "Create Property Type",
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/PropertyType"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/PropertyType"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              }
            }
          }
        },
        "description": "Create Property Type"
      }
    },
    "/content/propertytypes/{propertyTypeName}": {
      "get": {
        "tags": [
          "content_DocumentPropertyType"
        ],
        "summary": "Get Property Type",
        "parameters": [
          {
            "name": "propertyTypeName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              }
            }
          }
        },
        "description": "Get Property Type"
      },
      "put": {
        "tags": [
          "content_DocumentPropertyType"
        ],
        "summary": "Update Property Type",
        "parameters": [
          {
            "name": "propertyTypeName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/PropertyType"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/PropertyType"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              }
            }
          }
        },
        "description": "Update Property Type"
      },
      "delete": {
        "tags": [
          "content_DocumentPropertyType"
        ],
        "summary": "Delete Property Type",
        "parameters": [
          {
            "name": "propertyTypeName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete Property Type"
      }
    },
    "/commerce/customer/accountattributedefinition/attributes": {
      "get": {
        "tags": [
          "customer_CustomerAccountAttributeDefinitions"
        ],
        "summary": "Get Attributes",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              }
            }
          }
        },
        "description": "Retrieves the details of attributes."
      },
      "post": {
        "tags": [
          "customer_CustomerAccountAttributeDefinitions"
        ],
        "summary": "Create Attribute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "description": "Create a new attribute."
      }
    },
    "/commerce/customer/accountattributedefinition/attributes/{attributeFQN}/VocabularyValues": {
      "get": {
        "tags": [
          "customer_CustomerAccountAttributeDefinitions"
        ],
        "summary": "Get Attribute Vocabulary Values",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves the details of attribute vocabulary values."
      }
    },
    "/commerce/customer/accountattributedefinition/attributes/{attributeFQN}": {
      "get": {
        "tags": [
          "customer_CustomerAccountAttributeDefinitions"
        ],
        "summary": "Get Attribute",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "description": "Get Attribute"
      },
      "put": {
        "tags": [
          "customer_CustomerAccountAttributeDefinitions"
        ],
        "summary": "Update Attribute",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "description": "Update a category attribute."
      }
    },
    "/commerce/customer/addressvalidation": {
      "post": {
        "tags": [
          "customer_AddressValidation"
        ],
        "summary": "Validate Address",
        "description": "Allows merchants and services to validate an address against the configured AddressValidator capability in SiteSettings, fallback uses USPS Address Validation.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressValidationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressValidationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressValidationResponse"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AddressValidationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/authtickets": {
      "post": {
        "tags": [
          "customer_StorefrontAuthTicket"
        ],
        "summary": "Create User Auth Ticket",
        "description": "Authenticates a user for a particular site given a set of user credentials.",
        "requestBody": {
          "description": "User's email address and password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUserAuthInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/authtickets/refresh": {
      "put": {
        "tags": [
          "customer_StorefrontAuthTicket"
        ],
        "summary": "Refresh User Auth Ticket",
        "description": "Refreshes a user's authentication.",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "query",
            "description": "The user's refresh token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/authtickets/anonymousshopper": {
      "get": {
        "tags": [
          "customer_StorefrontAuthTicket"
        ],
        "summary": "Create Anonymous Shopper Auth Ticket",
        "description": "Authenticates anonymous shopper for the site.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/attributes": {
      "get": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Get B2B Account Attributes",
        "description": "Retrieves a list of notes added to an account according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose notes you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttributeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttributeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttributeCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Add B2B Account tAttribute",
        "description": "Add a customer attribute to the B2B account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/attributes/{attributeFQN}": {
      "get": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Get B2B Account Attribute",
        "description": "Retrieves the contents of a particular attribute attached to a specified account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the b2b account that contains the attribute to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "Fully qualified name of the attribute that you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Delete B2B Account Attribute",
        "description": "Deletes a specific customer attribute specified by attributeFQN.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Update B2B Account Attribute",
        "description": "Modifies an existing attribute for a b2b account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the account whose attribute you want to modify.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new content to replace the existing attribute.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts": {
      "get": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Get B2B Accounts",
        "description": "Retrieves a list of B2B accounts according to any filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.\r\n            For example, applications can filter on UserId to get the single record of the current customer.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "a quick filter which will search a predefined set of fields for a match",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccountCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccountCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccountCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Add Account",
        "description": "Creates a new B2B account.",
        "requestBody": {
          "description": "Properties of the new B2B account to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/B2BAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}": {
      "get": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Get B2B Account",
        "description": "Retrieves the details of a B2B account specified by its unique identifier.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the B2B account whose details you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Update Account",
        "description": "Modifies an existing B2B account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the B2B account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the B2B account to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/B2BAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/hierarchy": {
      "get": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Get B2B Account Hierarchy",
        "description": "Retrieves the account hierarchy for a B2B account specified by its unique identifier.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the B2B account whose account hierarchy you want to retrieve. This can be any account belonging to the same hierarchy.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccountHierarchyResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccountHierarchyResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccountHierarchyResult"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/changeparent/{parentAccountId}": {
      "post": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Change Parent Account",
        "description": "Change the B2B parent account for an existing B2B account that belongs to an account hierarchy.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the B2B account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "parentAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/salesrep/{userId}": {
      "post": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Add Sales Rep To B2B Account",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        },
        "description": "Add Sales Rep To B2B Account"
      },
      "delete": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Remove Sales Rep From B2B Account",
        "description": "Removes a specific sales rep from B2B account .",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/addsalesreps": {
      "post": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Add Sales Reps To B2B Account",
        "description": "Adds lists of sales reps to a B2B account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/salesrep": {
      "put": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Update Sales Reps On B2B Account",
        "description": "Updates list of  sales reps on a B2B account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/status/{actionName}": {
      "put": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Update B2B Account Status",
        "description": "Updates the status on B2B account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "actionName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/salesrep/{userId}": {
      "get": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Get Accounts For Sales Rep",
        "description": "Gets list of accounts for the B2B sales rep account.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/upgradeaccounts": {
      "put": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Upgrade B2C Accounts To B2B",
        "description": "Upgrades bulk B2C accounts to B2B",
        "requestBody": {
          "description": "List of accountIds(integers)",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeToB2BAccountResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeToB2BAccountResponse"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeToB2BAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/user": {
      "post": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Add User",
        "description": "Adds user to B2B account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/B2BUserAndAuthInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUser"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUser"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUser"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/users": {
      "get": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Get Users Async",
        "description": "Retrieves a list of user for a B2B account according to any filter criteria and sort options.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.\r\n            For example, applications can filter on UserId to get the single record of the current customer.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "a quick filter which will search a predefined set of fields for a match",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "description": "limit on quick filter which will search a predefined set of fields for a match",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUserCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUserCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUserCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/user/{userId}": {
      "put": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Update User",
        "description": "Updates a B2B user specified by user Id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/B2BUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUser"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUser"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/B2BUser"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/user/{userId}/remove": {
      "put": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Remove User",
        "description": "Removes a B2B user from an account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/user/{userId}/roles": {
      "get": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Get User Roles Async",
        "description": "Retrieves all the roles for a specified user of a b2b account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerUserRoleCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerUserRoleCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerUserRoleCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/b2baccounts/{accountId}/user/{userId}/roles/{roleId}": {
      "post": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Add User Role Async",
        "description": "Add a role to B2B user.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user who receives the role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Unique identifier of the role to add.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "customer_B2BAccount"
        ],
        "summary": "Remove User Role Async",
        "description": "Removes a role from the specified user.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier of the user with the role to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "Unique identifer of the role to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/b2bcontacts": {
      "get": {
        "tags": [
          "customer_B2BContact"
        ],
        "summary": "Get B2B Contacts",
        "description": "Retrieves a list of B2B contacts according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCustomerContactCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCustomerContactCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCustomerContactCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/credits/{code}/auditentries": {
      "get": {
        "tags": [
          "customer_Credit"
        ],
        "summary": "Get Audit Entries",
        "description": "Retrieves a list of audit entries according to any filter criteria and sort options.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditAuditEntryCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditAuditEntryCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreditAuditEntryCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/credits": {
      "get": {
        "tags": [
          "customer_Credit"
        ],
        "summary": "Get Credits",
        "description": "Retrieves a list of credit collection according to any filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer_Credit"
        ],
        "summary": "Add Credit",
        "description": "Adds credit to user account.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCredit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/credits/{code}": {
      "get": {
        "tags": [
          "customer_Credit"
        ],
        "summary": "Get credit",
        "description": "Get credit specified by code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "customer_Credit"
        ],
        "summary": "Update Credit",
        "description": "Updates a credit specified by a credit code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCredit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customer_Credit"
        ],
        "summary": "Delete credit",
        "description": "Deletes a credit.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/credits/{code}/associate-to-shopper": {
      "put": {
        "tags": [
          "customer_Credit"
        ],
        "summary": "Associate Credit To Shopper",
        "description": "Maps credit to the shopper.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCredit"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/credits/{code}/Resend-Email": {
      "put": {
        "tags": [
          "customer_Credit"
        ],
        "summary": "Resend Credit Created Email",
        "description": "Resend email when credit is created.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/credits/{code}/transactions": {
      "get": {
        "tags": [
          "customer_Credit"
        ],
        "summary": "Get Transactions",
        "description": "Gets credit transactions according to any filter criteria and sort options.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditTransactionCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditTransactionCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreditTransactionCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer_Credit"
        ],
        "summary": "Add Transaction",
        "description": "Adds a credit transaction.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditTransaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditTransaction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditTransaction"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreditTransaction"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/attributes": {
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Account Attributes",
        "description": "Retrieves a collection of account attributes according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose notes you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttributeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttributeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttributeCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Add Account Attribute",
        "description": "Adds a new account attribute.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/attributes/{attributeFQN}": {
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Account Attribute",
        "description": "Retrieves the contents of a particular attribute attached to a specified account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the account that contains the attribute to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "Fully qualified name of the attribute that you want to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Delete Account Attribute",
        "description": "Deletes an account attribute specified by attributeFQN.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Update Account Attribute",
        "description": "Modifies an existing attribute for an account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the account whose attribute you want to modify.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new content to replace the existing attribute.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAttribute"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/cards": {
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Account Cards",
        "description": "Retrieves a list of cards for the specified customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Add Account Card",
        "description": "Creates a card on the specific customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Card"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/cards/{cardId}": {
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Account Card",
        "description": "Retrieves a card for the specified customer account and card ID.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Update Account Card",
        "description": "Updates a card on the specific customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Card"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Delete Account Card",
        "description": "Removes a card from the specified customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/contacts": {
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Account Contacts",
        "description": "Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose CustomerContact information you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "If provided, the primary markings on the contacts will be based on the user's preferred primary overrides",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContactCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContactCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContactCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Add Account Contact",
        "description": "Creates a new CustomerContact for a customer account, for example, a new shipping address.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account to contain the new CustomerContact.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the new CustomerContact. Required properties: CustomerContact.Email, ContactType.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerContact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Add Account Contact List",
        "description": "Creates a new CustomerContacts for a customer account in bulk to support adding multiple contacts in a multi-ship scenario.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account to contain the new CustomerContact.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "List of CustomerContact objects : Properties of each new CustomerContact. Required properties: CustomerContact.Email, ContactType.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContactCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContactCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContactCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/contacts/{contactId}": {
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Account Contact",
        "description": "Retrieves the specified CustomerContact for a customer account, for example, a billing or shipping CustomerContact.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose CustomerContact information you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Unique identifier of the CustomerContact whose details you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "If provided, the primary markings on the contact will be based on the user's preferred primary overrides",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Update Account Contact",
        "description": "Updates a CustomerContact for a specified customer account, for example to update addresses or change which CustomerContact is the primary CustomerContact for billing.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose CustomerContact information you want to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "If provided, the primary markings on the contact will be stored as the user's preferred primary override",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerContact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerContact"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Delete Account Contact",
        "description": "Deletes a CustomerContact for the specified customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose CustomerContact you want to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts": {
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Accounts",
        "description": "Retrieves a list of customer accounts according to any filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.\r\n            \r\n            For example, applications can filter on UserId to get the single record of the current customer.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "We added this test to demo new publishing @test@. Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "a quick filter which will search a predefined set of fields for a match",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isAnonymous",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccountCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccountCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccountCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Add Account",
        "description": "Creates a new customer account.",
        "requestBody": {
          "description": "Properties of the new customer account to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}": {
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Account",
        "description": "Retrieves the details of a customer account specified by its unique identifier.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose details you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Update Account",
        "description": "Modifies an existing customer account, for example, to change the primary billing contact or change whether to accept marketing material.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the customer account to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Delete Account",
        "description": "Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/current": {
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Retrieves the details of a the current logged in customer account",
        "parameters": [
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccount"
                }
              }
            }
          }
        },
        "description": "Retrieves the details of a the current logged in customer account"
      }
    },
    "/commerce/customer/accounts/{accountId}/transactions": {
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Transactions",
        "description": "Gets the list of transactions on customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Add Transaction",
        "description": "Add a transaction on customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/transactions/{transactionId}": {
      "delete": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Remove Transaction",
        "description": "Removes a transaction on customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/recomputelifetimevalue": {
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Recompute Customer Lifetime Value",
        "description": "Triggers event to recompute customer lifetime value.  The lifetime value may not immediately be recalculated, but enters a queue.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/notes": {
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Account Notes",
        "description": "Retrieves a list of notes added to a customer account according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose notes you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNoteCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNoteCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNoteCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Add Account Note",
        "description": "Adds a new note to the specified customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account for which to create the note.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Contents of the new note.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerNote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/notes/{noteId}": {
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Account Note",
        "description": "Retrieves the contents of a particular note attached to a specified customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account that contains the note to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of a particular note that you want to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Update Account Note",
        "description": "Modifies an existing note for a customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account whose note you want to modify.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of the note to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The new content to replace the existing note.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerNote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerNote"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Delete Account Note",
        "description": "Removes a note from the specified customer account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account that contains the note you want to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "Unique identifier of the note to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/segments": {
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Account Segments",
        "description": "Retrieves a list of segments for the specified account according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the account for which you want the list of groups.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. \r\n            Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSegmentCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSegmentCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSegmentCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/AuditLog/Entries": {
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Account Audit Log",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuditEntryCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuditEntryCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuditEntryCollection"
                }
              }
            }
          }
        },
        "description": "Get Account Audit Log"
      }
    },
    "/commerce/customer/accounts/{accountId}/purchaseOrderAccount": {
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Gets a customer's purchase order account.",
        "description": "Gets a customer's purchase order account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Create Customer Purchase Order Account",
        "description": "Creates a customer's purchase order account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Update Customer Purchase Order Account",
        "description": "Updates a customer's purchase order account.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/PurchaseOrderTransaction": {
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Create Purchase Order Transaction",
        "description": "Creates a purchase order transaction log (for public api use).",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the customer account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "transaction log that needs to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderTransaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderTransaction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderTransaction"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderTransaction"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Customer Purchase Order Transactions",
        "description": "Gets a collection of Purchase order transaction logs associated with a customer account id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Customer Account Id for which transaction logs need to be retreived",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. \r\n            Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderTransactionCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderTransactionCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrderTransactionCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/purchaseOrderAccounts": {
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Customers Purchase Order Accounts",
        "description": "Gets a collection of customer purchase order accounts.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "accountType",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "default": "B2C"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccountCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccountCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPurchaseOrderAccountCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/loginstatebyusername": {
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Login State By UserName",
        "description": "Retrieves the log-in status details of a shopper specified by userName.",
        "parameters": [
          {
            "name": "userName",
            "in": "query",
            "description": "Unique userName of the customer whose details you want to view.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerSetCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/loginstatebyemailaddress": {
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Login State By Email Address",
        "description": "Retrieves the log-in status details of a shopper specified by emailAdress.",
        "parameters": [
          {
            "name": "emailAddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerSetCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/loginstate": {
      "get": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Get Login State",
        "description": "Retrieves the log-in status details of a shopper specified by account Id and user Id.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "EmailAddress of the customer whose details you want to view.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LoginState"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/Change-Password": {
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Change Password",
        "description": "Changes a shopper's password.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier of the shopper for whom to change the password.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "unlockAccount",
            "in": "query",
            "description": "inidicates that the account should be unlocked on a successful password change.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Old password and new password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPasswordInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/Change-Passwords": {
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Change Passwords",
        "description": "Changes a collection of shopper passwords",
        "requestBody": {
          "description": "The collection of AccountPasswordInfo which are to be processed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountPasswordInfoCollection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordResultCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordResultCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordResultCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/Reset-Password": {
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Reset Password",
        "description": "Resets the password for a shopper specified by username or emailAddress.",
        "requestBody": {
          "description": "Username or EmailAddress of the shopper who has requested a password reset.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerResetPasswordInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/Update-Forgotten-Password": {
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Update Forgotten Password",
        "description": "Updates the password for a shopper who has requested a password change and provided the new password and confirmation code.",
        "requestBody": {
          "description": "Properties of the confirmation code. Required properties: UserName, NewPassword, and ConfirmationCode.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmationInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/Create-Login": {
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Add Login To Existing Customer",
        "description": "Creates a login for an existing customer and logs them in automatically.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerLoginInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/Add-Account-And-Login": {
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Add Account And Login",
        "description": "Adds a customer to the account.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAccountAndAuthInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAuthTicket"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/Set-Login-Locked": {
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Set Login Locked",
        "description": "Sets a flag indicating whether the customers login is locked or unlocked.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The customer account id to operate on.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "True for locking the login. False for unlocking the login (default).",
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/{accountId}/Set-Password-Change-Required": {
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Set Password Change Required",
        "description": "Sets a flag indicating whether the customers must change their password before logging in again.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The customer account id to operate on.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/accounts/Bulk": {
      "post": {
        "tags": [
          "customer_CustomerAccount"
        ],
        "summary": "Add Accounts",
        "description": "Creates multiple new shopper accounts for a specified site. Allows you to create a number of new shopper accounts at one time.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomerAccountAndAuthInfo"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccountCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccountCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccountCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/attributedefinition/attributes": {
      "get": {
        "tags": [
          "customer_CustomerAttributeDefinition"
        ],
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              }
            }
          }
        },
        "summary": "Get Attributes",
        "description": "Retrieves the details of attributes."
      },
      "post": {
        "tags": [
          "customer_CustomerAttributeDefinition"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "summary": "Create Attribute",
        "description": "Create a new attribute."
      }
    },
    "/commerce/customer/attributedefinition/attributes/{attributeFQN}/VocabularyValues": {
      "get": {
        "tags": [
          "customer_CustomerAttributeDefinition"
        ],
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              }
            }
          }
        },
        "summary": "Get Attribute Vocabulary Values",
        "description": "Retrieves the details of attribute vocabulary values."
      }
    },
    "/commerce/customer/attributedefinition/attributes/{attributeFQN}": {
      "get": {
        "tags": [
          "customer_CustomerAttributeDefinition"
        ],
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "summary": "Get Attribute",
        "description": "Retrieves the details of an attribute."
      },
      "put": {
        "tags": [
          "customer_CustomerAttributeDefinition"
        ],
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "summary": "Update Attribute",
        "description": "Update a category attribute."
      }
    },
    "/commerce/customer/segments": {
      "get": {
        "tags": [
          "customer_CustomerSegment"
        ],
        "summary": "Get Segments",
        "description": "Retrieves a list of all segments defined for the site according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. \r\n            Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSegmentCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSegmentCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSegmentCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer_CustomerSegment"
        ],
        "summary": "Adds Segment",
        "description": "Creates a new segment. Merchants create segments of customers, for example, \r\nto offer discounts to particular groups or assign VIP status to a set of customers.",
        "requestBody": {
          "description": "Name of the customer segment to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCustomerSegment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/segments/{id}": {
      "get": {
        "tags": [
          "customer_CustomerSegment"
        ],
        "summary": "Get Segment",
        "description": "Retrieves a segment specified the segment Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "customer_CustomerSegment"
        ],
        "summary": "Update Segment",
        "description": "Update the code, name, or description of an existing segment.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCustomerSegment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCustomerSegment"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customer_CustomerSegment"
        ],
        "summary": "Delete Segment",
        "description": "Deletes a segement specified by its unique code. Note that the group is deleted in all accounts that contain this segment.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/segments/{id}/accounts": {
      "post": {
        "tags": [
          "customer_CustomerSegment"
        ],
        "summary": "Add Segments Accounts",
        "description": "Adds segments to an account.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifer of the segment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Unique identifiers of the accounts.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/segments/{id}/accounts/{accountId}": {
      "delete": {
        "tags": [
          "customer_CustomerSegment"
        ],
        "summary": "Remove Segment Account",
        "description": "Removes single account from a segment.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifer of the segment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifiers of the account.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/customer/customerSets": {
      "get": {
        "tags": [
          "customer_CustomerSet"
        ],
        "summary": "Get Customer Sets",
        "description": "Retrieves a list of all customerSets defined for the site according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. \r\n            For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. \r\n            Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSetCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSetCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSetCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/customerSets/{code}": {
      "get": {
        "tags": [
          "customer_CustomerSet"
        ],
        "summary": "Get Customer Set",
        "description": "Retrieves the name of a customer group specified the customer group ID.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Unique identifier of a customer group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSet"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/visits": {
      "post": {
        "tags": [
          "customer_CustomerVisit"
        ],
        "summary": "Add Visit",
        "description": "Adds visit info on the customer.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Visit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "customer_CustomerVisit"
        ],
        "summary": "Get Visits",
        "description": "Gets a collection of visit info specified by filter and sort order.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisitCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisitCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VisitCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/customer/visits/{visitId}": {
      "put": {
        "tags": [
          "customer_CustomerVisit"
        ],
        "summary": "Updates Visit",
        "description": "Updates an existing visit on the customer.",
        "parameters": [
          {
            "name": "visitId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Visit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "customer_CustomerVisit"
        ],
        "summary": "Get Visit",
        "description": "Gets visit info specified by visit Id.",
        "parameters": [
          {
            "name": "visitId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Visit"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/instocknotifications": {
      "get": {
        "tags": [
          "customer_InStockNotificationSubscription"
        ],
        "summary": "Get In Stock Notification Subscriptions",
        "description": "Retrieves a list of inventory back in stock notification subscriptions according to any filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscriptionCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscriptionCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscriptionCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer_InStockNotificationSubscription"
        ],
        "summary": "Add In Stock Notification Subscription",
        "description": "Creates a new notification subscription.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InStockNotificationSubscription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscription"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscription"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/instocknotifications/{id}": {
      "get": {
        "tags": [
          "customer_InStockNotificationSubscription"
        ],
        "summary": "Get In Stock Notification Subscription",
        "description": "Retrieves the details of an inventory back in stock notification.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscription"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscription"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InStockNotificationSubscription"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customer_InStockNotificationSubscription"
        ],
        "summary": "Delete In Stock Notification Subscription",
        "description": "Deletes an in stock notification subscription.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/event/pull": {
      "get": {
        "tags": [
          "event_Event"
        ],
        "summary": "Get Events",
        "description": "Retrieves a list of events according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventCollection"
                }
              }
            }
          }
        }
      }
    },
    "/event/pull/{eventId}": {
      "get": {
        "tags": [
          "event_Event"
        ],
        "summary": "Get Event",
        "description": "Retrieves the details of a single event.",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Unique identifier of the event. System-supplied and read-only.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventEvent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventEvent"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventEvent"
                }
              }
            }
          }
        }
      }
    },
    "/event/push/subscriptions/{subscriptionId}/deliveryattempts": {
      "get": {
        "tags": [
          "event_Subscription"
        ],
        "summary": "Get Delivery Attempt Summaries",
        "description": "Get delivery attempts",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "Subscription Identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDeliverySummaryCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDeliverySummaryCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventDeliverySummaryCollection"
                }
              }
            }
          }
        }
      }
    },
    "/event/push/subscriptions/{subscriptionId}/deliveryattempts/{id}": {
      "get": {
        "tags": [
          "event_Subscription"
        ],
        "summary": "Get Delivery Attempt Summary",
        "description": "Get delivery attempt summary",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "processId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDeliverySummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDeliverySummary"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventDeliverySummary"
                }
              }
            }
          }
        }
      }
    },
    "/event/push/subscriptions": {
      "get": {
        "tags": [
          "event_Subscription"
        ],
        "summary": "Get Subscriptions",
        "description": "Retrieves a list of events according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Used to get more specific information from the request.  Available response groups: SubscribingSites.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/shipments/surveys/{id}": {
      "get": {
        "tags": [
          "fulfillment_CustomerSurvey"
        ],
        "summary": "getSurvey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfCustomerSurvey"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfCustomerSurvey"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfCustomerSurvey"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getSurvey"
      }
    },
    "/commerce/shipments/{shipmentNumber}/surveys": {
      "get": {
        "tags": [
          "fulfillment_CustomerSurvey"
        ],
        "summary": "getSurveys",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfEntityModelOfCustomerSurvey"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfEntityModelOfCustomerSurvey"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfEntityModelOfCustomerSurvey"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getSurveys"
      },
      "post": {
        "tags": [
          "fulfillment_CustomerSurvey"
        ],
        "summary": "createSurvey",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerSurvey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfCustomerSurvey"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfCustomerSurvey"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfCustomerSurvey"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "createSurvey"
      }
    },
    "/commerce/fulfillment/shipping/manifests": {
      "get": {
        "tags": [
          "fulfillment_Manifest"
        ],
        "summary": "getManifests",
        "parameters": [
          {
            "name": "fulfillmentLocationCode",
            "in": "query",
            "description": "fulfillmentLocationCode",
            "required": true,
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDays",
            "in": "query",
            "description": "fromDays",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfManifest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfManifest"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfManifest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getManifests"
      },
      "post": {
        "tags": [
          "fulfillment_Manifest"
        ],
        "summary": "createManifest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManifestRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfManifest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfManifest"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfManifest"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "createManifest"
      }
    },
    "/commerce/fulfillment/shipping/manifests/eligibleShipments": {
      "get": {
        "tags": [
          "fulfillment_Manifest"
        ],
        "summary": "getEligibleShipments",
        "parameters": [
          {
            "name": "fulfillmentLocationCode",
            "in": "query",
            "description": "fulfillmentLocationCode",
            "required": true,
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "carrier",
            "in": "query",
            "description": "carrier",
            "required": true,
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDays",
            "in": "query",
            "description": "fromDays",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfShipment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getEligibleShipments"
      }
    },
    "/commerce/fulfillment/shipping/manifests/{manifestId}": {
      "get": {
        "tags": [
          "fulfillment_Manifest"
        ],
        "summary": "getManifest",
        "parameters": [
          {
            "name": "manifestId",
            "in": "path",
            "description": "manifestId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfManifest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfManifest"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfManifest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getManifest"
      }
    },
    "/commerce/pickwaves": {
      "post": {
        "tags": [
          "fulfillment_PickWave"
        ],
        "summary": "createPickWave",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePickWave"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfPickWave"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfPickWave"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfPickWave"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "createPickWave"
      }
    },
    "/commerce/pickwaves/open/{fulfillmentLocationCode}": {
      "get": {
        "tags": [
          "fulfillment_PickWave"
        ],
        "summary": "getOpenPickWaves",
        "parameters": [
          {
            "name": "fulfillmentLocationCode",
            "in": "path",
            "description": "fulfillmentLocationCode",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shipmentType",
            "in": "query",
            "description": "shipmentType",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "userId",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userDisplayName",
            "in": "query",
            "description": "userDisplayName",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfPickWave"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfPickWave"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfPickWave"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getOpenPickWaves"
      }
    },
    "/commerce/pickwaves/{pickWaveNumber}": {
      "get": {
        "tags": [
          "fulfillment_PickWave"
        ],
        "summary": "getPickWave",
        "parameters": [
          {
            "name": "pickWaveNumber",
            "in": "path",
            "description": "pickWaveNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfPickWave"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfPickWave"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfPickWave"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getPickWave"
      }
    },
    "/commerce/pickwaves/{pickWaveNumber}/closed": {
      "put": {
        "tags": [
          "fulfillment_PickWave"
        ],
        "summary": "closePickWave",
        "parameters": [
          {
            "name": "pickWaveNumber",
            "in": "path",
            "description": "pickWaveNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClosePickWave"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfPickWave"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfPickWave"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfPickWave"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "closePickWave"
      }
    },
    "/commerce/pickwaves/{pickWaveNumber}/order-pick-sheets/html": {
      "get": {
        "tags": [
          "fulfillment_PickWave"
        ],
        "summary": "Render pick wave order pick sheets",
        "parameters": [
          {
            "name": "pickWaveNumber",
            "in": "path",
            "description": "pickWaveNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfstring"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfstring"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfstring"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Render pick wave order pick sheets"
      }
    },
    "/commerce/pickwaves/{pickWaveNumber}/rendition/html": {
      "get": {
        "tags": [
          "fulfillment_PickWave"
        ],
        "summary": "Render pick wave",
        "parameters": [
          {
            "name": "pickWaveNumber",
            "in": "path",
            "description": "pickWaveNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "printPickWave",
            "in": "query",
            "description": "printPickWave",
            "required": false,
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "printPackingLists",
            "in": "query",
            "description": "printPackingLists",
            "required": false,
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "printSingleOrderSheets",
            "in": "query",
            "description": "printSingleOrderSheets",
            "required": false,
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfstring"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfstring"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfstring"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Render pick wave"
      }
    },
    "/commerce/pickwaves/{pickWaveNumber}/shipments": {
      "get": {
        "tags": [
          "fulfillment_PickWave"
        ],
        "summary": "getShipmentsInPickWave",
        "parameters": [
          {
            "name": "pickWaveNumber",
            "in": "path",
            "description": "pickWaveNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfShipment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getShipmentsInPickWave"
      }
    },
    "/commerce/fulfillment/orders/{orderId}/summary/html": {
      "get": {
        "tags": [
          "fulfillment_Rendition"
        ],
        "summary": "Render order summary",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "orderId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfstring"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Render order summary"
      }
    },
    "/commerce/fulfillment/returns/{returnId}/receipt/html": {
      "get": {
        "tags": [
          "fulfillment_Rendition"
        ],
        "summary": "Render return receipt",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "returnId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfstring"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Render return receipt"
      }
    },
    "/commerce/shipments/{shipmentNumber}/attributes": {
      "get": {
        "tags": [
          "fulfillment_ShipmentAttributes"
        ],
        "summary": "getShipmentAttributes",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipmentAttribute"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipmentAttribute"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipmentAttribute"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getShipmentAttributes"
      },
      "put": {
        "tags": [
          "fulfillment_ShipmentAttributes"
        ],
        "summary": "setShipmentAttributes",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ShipmentAttribute"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipmentAttribute"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipmentAttribute"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShipmentAttribute"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "setShipmentAttributes"
      }
    },
    "/commerce/shipments/{shipmentNumber}/attributes/{key}": {
      "get": {
        "tags": [
          "fulfillment_ShipmentAttributes"
        ],
        "summary": "getShipmentAttribute",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentAttribute"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentAttribute"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentAttribute"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getShipmentAttribute"
      },
      "put": {
        "tags": [
          "fulfillment_ShipmentAttributes"
        ],
        "summary": "setShipmentAttribute",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentAttribute"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentAttribute"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentAttribute"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "setShipmentAttribute"
      },
      "delete": {
        "tags": [
          "fulfillment_ShipmentAttributes"
        ],
        "summary": "deleteShipmentAttribute",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "deleteShipmentAttribute"
      }
    },
    "/commerce/shipments": {
      "get": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Get shipments",
        "description": "A paged list of shipments is returned according to any specified filter criteria and sort options",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isLate",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "quickSearch",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflowTaskName",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModelOfEntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModelOfEntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModelOfEntityModelOfShipment"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Shipments not found"
          },
          "default": {
            "description": "other"
          }
        }
      },
      "post": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Add a new shipment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentShipment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Shipment created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentShipment"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Add a new shipment"
      }
    },
    "/commerce/shipments/bulk": {
      "post": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Add a collection of new shipments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FulfillmentShipment"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfEntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfEntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfEntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Add a collection of new shipments"
      }
    },
    "/commerce/shipments/countsByStep": {
      "get": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Get workflow task counts for assigned shipments",
        "parameters": [
          {
            "name": "shipmentType",
            "in": "query",
            "description": "shipmentType",
            "required": true,
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignedLocations",
            "in": "query",
            "description": "assignedLocations",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfDashboardResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfDashboardResponse"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfDashboardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Get workflow task counts for assigned shipments"
      }
    },
    "/commerce/shipments/dashboard": {
      "get": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Get dashboard of assigned shipments",
        "parameters": [
          {
            "name": "fulfillmentLocationCodes",
            "in": "query",
            "description": "fulfillmentLocationCodes",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfDashboardResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfDashboardResponse"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfDashboardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Get dashboard of assigned shipments"
      }
    },
    "/commerce/shipments/locationSummaryReport": {
      "get": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Get a location summary report",
        "parameters": [
          {
            "name": "locationCodes",
            "in": "query",
            "description": "locationCodes",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDateTime",
            "in": "query",
            "description": "startDateTime",
            "required": true,
            "style": "form",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfLocationSummary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfLocationSummary"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfLocationSummary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Get a location summary report"
      }
    },
    "/commerce/shipments/order/{orderId}/canceled": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Cancel shipments of an order",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "orderId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelShipment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Cancel shipments of an order"
      }
    },
    "/commerce/shipments/received/{search}": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Find and receive a transfer shipment",
        "parameters": [
          {
            "name": "search",
            "in": "path",
            "description": "search",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Find and receive a transfer shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}": {
      "get": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Get a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Get a shipment"
      },
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Update an existing shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "Number of the shipment to update. Cannot be empty.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateFields",
            "in": "query",
            "description": "List of shipment fields to update.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentShipment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Invalid shipment number supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Shipment not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "description": "Update an existing shipment"
      },
      "delete": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Delete a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "Number of the shipment to be deleted. Cannot be empty.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Shipment not found"
          }
        },
        "description": "Delete a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/backordered": {
      "post": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Add a backorder shipment from specified shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackorderShipmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Add a backorder shipment from specified shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/backorderedItems": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Update items of a backorder shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackorderItemsUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Update items of a backorder shipment"
      },
      "post": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Add a backorder shipment from specified shipment items",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackorderItemsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Add a backorder shipment from specified shipment items"
      }
    },
    "/commerce/shipments/{shipmentNumber}/canceled": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Cancel a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelShipment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Cancel a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/canceledItems": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Cancel items of a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelItemsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Cancel items of a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/customerAtCurbside": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Notify customer is at curbside for a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Notify customer is at curbside for a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/customerAtStore": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Notify customer is at store for a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Notify customer is at store for a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/customerCared": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Update shipment to be a customer care shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectShipment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Update shipment to be a customer care shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/customerCaredItems": {
      "post": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Add a customer care shipment from specified items",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectItemsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Add a customer care shipment from specified items"
      }
    },
    "/commerce/shipments/{shipmentNumber}/customerInTransit": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Notify customer is in transit for a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Notify customer is in transit for a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/destination": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Update destination of a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentDestination"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Update destination of a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/email/resend": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "resendShipmentEmail",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "resendShipmentEmail"
      }
    },
    "/commerce/shipments/{shipmentNumber}/fulfilled": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Fulfill a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Fulfill a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/fulfillmentFields": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "updateFulfillmentFields",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FulfillmentItem"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "updateFulfillmentFields"
      }
    },
    "/commerce/shipments/{shipmentNumber}/giftCardInfo": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "updateGiftCardInfo",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GiftCardInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "updateGiftCardInfo"
      }
    },
    "/commerce/shipments/{shipmentNumber}/items/{lineId}/email/resend": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "resendItemEmail",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lineId",
            "in": "path",
            "description": "lineId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "resendItemEmail"
      }
    },
    "/commerce/shipments/{shipmentNumber}/order-summary/html": {
      "get": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Render order summary by shipment number",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfstring"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfstring"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfstring"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Render order summary by shipment number"
      }
    },
    "/commerce/shipments/{shipmentNumber}/pickedUpItems": {
      "post": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Pickup items of a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PickupItemsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Pickup items of a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/reassigned": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Reassign a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReassignShipment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Reassign a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/reassignedItems": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Reassign items of a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReassignItemsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Reassign items of a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/received": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Receive a transfer shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Receive a transfer shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/refresh": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Refresh a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shouldLog",
            "in": "query",
            "description": "shouldLog",
            "required": false,
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Refresh a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/rejected": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Reject a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectShipment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Reject a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/rejectedItems": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Reject items of a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectItemsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Reject items of a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/rendition/html": {
      "get": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Render shipment packing slip",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfstring"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfstring"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfstring"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Render shipment packing slip"
      }
    },
    "/commerce/shipments/{shipmentNumber}/retried": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Retry fulfilling a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Retry fulfilling a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/tasks": {
      "get": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Get workflow tasks for a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "Number of the shipment to be searched. Cannot be empty.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfTask"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfTask"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionModelOfTask"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Get workflow tasks for a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/tasks/{taskName}/completed": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Complete workflow task of a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskName",
            "in": "path",
            "description": "taskName",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskComplete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Complete workflow task of a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/tasks/{taskName}/reverted": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Revert workflow task of a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskName",
            "in": "path",
            "description": "taskName",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Revert workflow task of a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/tasks/{taskName}/skipped": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Skip workflow task of a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskName",
            "in": "path",
            "description": "taskName",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Skip workflow task of a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/transferred": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Transfer a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferShipment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Transfer a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/transferredItems": {
      "put": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Transfer items of a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferItemsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Transfer items of a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/workflow-definition-image": {
      "get": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Get workflow definition image for a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/svg+xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Get workflow definition image for a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/workflow-instance-image": {
      "get": {
        "tags": [
          "fulfillment_Shipment"
        ],
        "summary": "Get workflow instance image for a shipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/svg+xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Get workflow instance image for a shipment"
      }
    },
    "/commerce/shipments/{shipmentNumber}/data": {
      "get": {
        "tags": [
          "fulfillment_ShipmentData"
        ],
        "summary": "getShipmentData",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getShipmentData"
      },
      "put": {
        "tags": [
          "fulfillment_ShipmentData"
        ],
        "summary": "replaceShipmentData",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "merge",
            "in": "query",
            "description": "merge",
            "required": false,
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "replaceShipmentData"
      },
      "delete": {
        "tags": [
          "fulfillment_ShipmentData"
        ],
        "summary": "deleteShipmentData",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "deleteShipmentData"
      }
    },
    "/commerce/shipments/{shipmentNumber}/data/{key}": {
      "delete": {
        "tags": [
          "fulfillment_ShipmentData"
        ],
        "summary": "deleteShipmentDataByKey",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "deleteShipmentDataByKey"
      }
    },
    "/commerce/shipments/{shipmentNumber}/items/{lineId}/data": {
      "get": {
        "tags": [
          "fulfillment_ShipmentData"
        ],
        "summary": "getShipmentItemData",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lineId",
            "in": "path",
            "description": "lineId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getShipmentItemData"
      },
      "put": {
        "tags": [
          "fulfillment_ShipmentData"
        ],
        "summary": "replaceShipmentItemData",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lineId",
            "in": "path",
            "description": "lineId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "merge",
            "in": "query",
            "description": "merge",
            "required": false,
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "replaceShipmentItemData"
      },
      "delete": {
        "tags": [
          "fulfillment_ShipmentData"
        ],
        "summary": "deleteShipmentItemData",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lineId",
            "in": "path",
            "description": "lineId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "deleteShipmentItemData"
      }
    },
    "/commerce/shipments/{shipmentNumber}/items/{lineId}/data/{key}": {
      "delete": {
        "tags": [
          "fulfillment_ShipmentData"
        ],
        "summary": "deleteShipmentItemDataByKey",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lineId",
            "in": "path",
            "description": "lineId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "deleteShipmentItemDataByKey"
      }
    },
    "/commerce/shipments/{shipmentNumber}/packages": {
      "post": {
        "tags": [
          "fulfillment_ShipmentPackages"
        ],
        "summary": "newPackage",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentPackage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "newPackage"
      }
    },
    "/commerce/shipments/{shipmentNumber}/packages/bulk": {
      "post": {
        "tags": [
          "fulfillment_ShipmentPackages"
        ],
        "summary": "newPackages",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FulfillmentPackage"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Multiple Shipment Packages",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "newPackages"
      }
    },
    "/commerce/shipments/{shipmentNumber}/packages/{packageId}": {
      "put": {
        "tags": [
          "fulfillment_ShipmentPackages"
        ],
        "summary": "updatePackage",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "packageId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentPackage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "updatePackage"
      },
      "delete": {
        "tags": [
          "fulfillment_ShipmentPackages"
        ],
        "summary": "deleteShipmentPackage",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "packageId",
            "in": "path",
            "description": "packageId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "deleteShipmentPackage"
      }
    },
    "/commerce/fulfillment/shipping/notifications/{carrier}": {
      "post": {
        "tags": [
          "fulfillment_ShippingNotification"
        ],
        "summary": "handleCarrierNotification",
        "parameters": [
          {
            "name": "carrier",
            "in": "path",
            "description": "carrier",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "paramMap"
                ],
                "type": "object",
                "properties": {
                  "paramMap": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "paramMap"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "handleCarrierNotification"
      }
    },
    "/commerce/fulfillment/storefront/shipments": {
      "get": {
        "tags": [
          "fulfillment_Storefront"
        ],
        "summary": "getShipments",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isLate",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "quickSearch",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflowTaskName",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModelOfEntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModelOfEntityModelOfShipment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getShipments"
      }
    },
    "/commerce/fulfillment/storefront/shipments/{shipmentNumber}": {
      "get": {
        "tags": [
          "fulfillment_Storefront"
        ],
        "summary": "getShipment",
        "parameters": [
          {
            "name": "shipmentNumber",
            "in": "path",
            "description": "shipmentNumber",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfShipment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getShipment"
      }
    },
    "/commerce/processes/definitionImage/{containerIdOrAlias}/{processId}": {
      "get": {
        "tags": [
          "fulfillment_WorkflowProcess"
        ],
        "summary": "getDefinitionImage",
        "parameters": [
          {
            "name": "containerIdOrAlias",
            "in": "path",
            "description": "containerIdOrAlias",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "processId",
            "in": "path",
            "description": "processId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/svg+xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getDefinitionImage"
      }
    },
    "/commerce/processes/definitions": {
      "get": {
        "tags": [
          "fulfillment_WorkflowProcess"
        ],
        "summary": "getWorkflowProcesses",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModelOfEntityModelOfWorkflowProcess"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModelOfEntityModelOfWorkflowProcess"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedModelOfEntityModelOfWorkflowProcess"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getWorkflowProcesses"
      }
    },
    "/commerce/processes/definitions/{containerIdOrAlias}/{processId}": {
      "get": {
        "tags": [
          "fulfillment_WorkflowProcess"
        ],
        "summary": "getWorkflowProcess",
        "parameters": [
          {
            "name": "containerIdOrAlias",
            "in": "path",
            "description": "containerIdOrAlias",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "processId",
            "in": "path",
            "description": "processId",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfWorkflowProcess"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfWorkflowProcess"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfWorkflowProcess"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getWorkflowProcess"
      }
    },
    "/commerce/processes/shipmentType/{shipmentType}": {
      "get": {
        "tags": [
          "fulfillment_WorkflowProcess"
        ],
        "summary": "getWorkflowProcessByShipmentType",
        "parameters": [
          {
            "name": "shipmentType",
            "in": "path",
            "description": "shipmentType",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfWorkflowProcess"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfWorkflowProcess"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfWorkflowProcess"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true,
        "description": "getWorkflowProcessByShipmentType"
      }
    },
    "/commerce/processes/shipmentType/{shipmentType}/location/{locationCode}": {
      "get": {
        "tags": [
          "fulfillment_WorkflowProcess"
        ],
        "summary": "getWorkflowProcessByShipmentTypeLocationCode",
        "parameters": [
          {
            "name": "shipmentType",
            "in": "path",
            "description": "shipmentType",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationCode",
            "in": "path",
            "description": "locationCode",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfWorkflowProcess"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfWorkflowProcess"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfWorkflowProcess"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getWorkflowProcessByShipmentTypeLocationCode"
      }
    },
    "/commerce/processes/shipmentType/{shipmentType}/locationGroup/{locationGroupCode}": {
      "get": {
        "tags": [
          "fulfillment_WorkflowProcess"
        ],
        "summary": "getWorkflowProcessByShipmentTypeLocationGroupCode",
        "parameters": [
          {
            "name": "shipmentType",
            "in": "path",
            "description": "shipmentType",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationGroupCode",
            "in": "path",
            "description": "locationGroupCode",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfWorkflowProcess"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfWorkflowProcess"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityModelOfWorkflowProcess"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "getWorkflowProcessByShipmentTypeLocationGroupCode"
      }
    },
    "/commerce/inventory/api/v1/export/create": {
      "post": {
        "tags": [
          "inventory_ExportInventory"
        ],
        "summary": "Create Export Settings",
        "description": "Create an Export Settings",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateExportSettingsRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Service Error"
          }
        }
      }
    },
    "/commerce/inventory/api/v1/export": {
      "post": {
        "tags": [
          "inventory_ExportInventory"
        ],
        "summary": "Run Export",
        "description": "Run Export Settings Job",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/ExportInventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportInventoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Service Error"
          }
        }
      }
    },
    "/commerce/inventory/api/v1/export/update": {
      "post": {
        "tags": [
          "inventory_ExportInventory"
        ],
        "summary": "Update Export Settings",
        "description": "Update an Export Settings",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateExportSettingsRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateExportSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "No Settings Found"
          },
          "500": {
            "description": "Internal Service Error"
          }
        }
      }
    },
    "/commerce/inventory/api/v1/export/{exportSettingsName}": {
      "delete": {
        "tags": [
          "inventory_ExportInventory"
        ],
        "summary": "Delete Export Settings",
        "description": "Deletes an Export Settings",
        "parameters": [
          {
            "$ref": "#/components/parameters/exportSettingsName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/commerce/inventory/api/v1/export/ftp/create": {
      "post": {
        "tags": [
          "inventory_ExportInventory"
        ],
        "summary": "Create Export Settings FTP",
        "description": "Create an Export Settings FTP",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateExportSettingsFTPRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Service Error"
          }
        }
      }
    },
    "/commerce/inventory/api/v1/export/ftp/update": {
      "post": {
        "tags": [
          "inventory_ExportInventory"
        ],
        "summary": "Update Export Settings FTP",
        "description": "Update an Export Settings FTP",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateExportSettingsFTPRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateExportSettingsFTPResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "No Settings Found"
          },
          "500": {
            "description": "Internal Service Error"
          }
        }
      }
    },
    "/commerce/inventory/api/v1/export/ftp/{exportSettingsName}/{exportSettingsFTPName}": {
      "delete": {
        "tags": [
          "inventory_ExportInventory"
        ],
        "summary": "Delete Export Settings FTP",
        "description": "Deletes an Export Settings FTP. Not specifying exportSettingsFTPID deletes ALL ftp settings for the specified export settings.",
        "parameters": [
          {
            "$ref": "#/components/parameters/exportSettingsName"
          },
          {
            "$ref": "#/components/parameters/exportSettingsFTPName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/commerce/inventory/api/v1/export/s3/create": {
      "post": {
        "tags": [
          "inventory_ExportInventory"
        ],
        "summary": "Create Export Settings S3",
        "description": "Create an Export Settings S3",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateExportSettingsS3Request"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Service Error"
          }
        }
      }
    },
    "/commerce/inventory/api/v1/export/s3/update": {
      "post": {
        "tags": [
          "inventory_ExportInventory"
        ],
        "summary": "Update Export Settings S3",
        "description": "Update an Export Settings S3",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateExportSettingsS3Request"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateExportSettingsS3Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "No Settings Found"
          },
          "500": {
            "description": "Internal Service Error"
          }
        }
      }
    },
    "/commerce/inventory/api/v1/export/s3/{exportSettingsName}/{exportSettingsS3Name}": {
      "delete": {
        "tags": [
          "inventory_ExportInventory"
        ],
        "summary": "Delete Export Settings S3",
        "description": "Deletes an Export Settings S3. Not specifying exportSettingsS3ID deletes ALL s3 settings for the specified export settings.",
        "parameters": [
          {
            "$ref": "#/components/parameters/exportSettingsName"
          },
          {
            "$ref": "#/components/parameters/exportSettingsS3Name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/commerce/inventory/api/v1/config/fetchfile/{fetchFileConfigID}": {
      "delete": {
        "tags": [
          "inventory_InventoryFetchFileConfig"
        ],
        "summary": "Delete Fetch Config",
        "description": "Deletes a fetch file config",
        "parameters": [
          {
            "name": "fetchFileConfigID",
            "in": "path",
            "description": "Id of fetch file config",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/commerce/inventory/api/v1/config/fetchfile/testConnection/{fetchFileConfigID}": {
      "get": {
        "tags": [
          "inventory_InventoryFetchFileConfig"
        ],
        "summary": "Test Connection",
        "description": "Attempts to connect to a fetch file endpoint and lists current files if successful",
        "parameters": [
          {
            "name": "fetchFileConfigID",
            "in": "path",
            "description": "Id of fetch file config",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchFileConnectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/commerce/inventory/api/v5/inventory/redistribute": {
      "post": {
        "tags": [
          "inventory_ModifyInventory"
        ],
        "summary": "Redistribute Across Tags",
        "description": "Create jobs to redistribute inventory across tags for the given tenant",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobQueueResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/inventory/api/v1/tagCategory/{tag_category_name}/tag": {
      "post": {
        "tags": [
          "inventory_InventoryTag"
        ],
        "summary": "Create Inventory Tag",
        "description": "Create a tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/tagCategoryName"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Tag"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryTag"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/commerce/inventory/api/v1/tagCategory/{tag_category_name}/tag/{tag_value}": {
      "get": {
        "tags": [
          "inventory_InventoryTag"
        ],
        "summary": "Get Tag",
        "description": "Get a tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/tagCategoryName"
          },
          {
            "$ref": "#/components/parameters/tagValue"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryTag"
                }
              }
            }
          },
          "404": {
            "description": "Tag Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "inventory_InventoryTag"
        ],
        "summary": "Update Tag",
        "description": "Update the designated tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/tagCategoryName"
          },
          {
            "$ref": "#/components/parameters/tagValue"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Tag"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryTag"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "inventory_InventoryTag"
        ],
        "summary": "Delete Tag",
        "description": "Delete a Tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/tagCategoryName"
          },
          {
            "$ref": "#/components/parameters/tagValue"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Tag Not Found"
          }
        }
      }
    },
    "/commerce/inventory/api/v1/tagCategory": {
      "get": {
        "tags": [
          "inventory_InventoryTagCategory"
        ],
        "summary": "Get All Tag Categories",
        "description": "Get all tag categories for a tenant",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagCategory"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tag Categories Not Found"
          }
        }
      }
    },
    "/commerce/inventory/api/v1/tagCategory/{tag_category_name}": {
      "get": {
        "tags": [
          "inventory_InventoryTagCategory"
        ],
        "summary": "Get Tag Category",
        "description": "Get a tag category",
        "parameters": [
          {
            "$ref": "#/components/parameters/tagCategoryName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategory"
                }
              }
            }
          },
          "404": {
            "description": "Tag Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "inventory_InventoryTagCategory"
        ],
        "summary": "Update Tag Category",
        "description": "Update the designated tag category",
        "parameters": [
          {
            "$ref": "#/components/parameters/tagCategoryName"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TagCategory"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "inventory_InventoryTagCategory"
        ],
        "summary": "Delete Tag Category",
        "description": "Delete a Tag category",
        "parameters": [
          {
            "$ref": "#/components/parameters/tagCategoryName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Tag category Not Found"
          }
        }
      }
    },
    "/commerce/inventory/api/v5/inventory/allocate": {
      "post": {
        "tags": [
          "inventory_InventoryAllocation"
        ],
        "summary": "Allocate Inventory",
        "description": "Allocates inventory based on the given request",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/AllocateInventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobQueueResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "$ref": "#/components/schemas/BaseResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/inventory/api/v5/inventory/deallocate": {
      "post": {
        "tags": [
          "inventory_InventoryAllocation"
        ],
        "summary": "Deallocate Inventory",
        "description": "Deallocates inventory based on the given request",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/AllocateInventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "$ref": "#/components/schemas/BaseResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/inventory/api/v5/inventory/fulfill": {
      "post": {
        "tags": [
          "inventory_InventoryAllocation"
        ],
        "summary": "Fulfill Inventory",
        "description": "Fulfills inventory based on the given request",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/AllocateInventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "$ref": "#/components/schemas/BaseResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/inventory/api/v1/config/fetchfile": {
      "get": {
        "tags": [
          "inventory_InventoryFetchFileConfig"
        ],
        "summary": "Get Fetch Config",
        "description": "Get the Fetch File Configs for the current tenant",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/M_FetchFileConfig"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "inventory_InventoryFetchFileConfig"
        ],
        "summary": "Save Fetch Config",
        "description": "Save a new Fetch File Config",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/FetchFileConfigRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/commerce/inventory/api/v5/inventory": {
      "get": {
        "tags": [
          "inventory_Inventory"
        ],
        "summary": "Get Inventory",
        "description": "Get inventory from specified location",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-site"
          },
          {
            "$ref": "#/components/parameters/type"
          },
          {
            "$ref": "#/components/parameters/items"
          },
          {
            "$ref": "#/components/parameters/requestLocation"
          },
          {
            "$ref": "#/components/parameters/locationWhitelist"
          },
          {
            "$ref": "#/components/parameters/locationBlacklist"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ignoreSafetyStock"
          },
          {
            "$ref": "#/components/parameters/includeNegativeInventory"
          },
          {
            "$ref": "#/components/parameters/shippingLocation"
          },
          {
            "$ref": "#/components/parameters/transferEnabled"
          },
          {
            "$ref": "#/components/parameters/pickup"
          },
          {
            "$ref": "#/components/parameters/includeInAggregate"
          },
          {
            "$ref": "#/components/parameters/includeAttributes"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bins Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "inventory_Inventory"
        ],
        "summary": "Query Inventory",
        "description": "Queries for specified inventory at given location",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-site"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/InventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/commerce/inventory/api/v5/inventory/aggregate": {
      "post": {
        "tags": [
          "inventory_Inventory"
        ],
        "summary": "Aggregate",
        "description": "Aggregates Inventory",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-site"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AggregateRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AggregateResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/commerce/inventory/api/v1/queue/{jobID}": {
      "get": {
        "tags": [
          "inventory_InventoryJob"
        ],
        "summary": "Get Job",
        "description": "Get the specified job",
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "Id of bin to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobQueueResponse"
                }
              }
            }
          },
          "404": {
            "description": "Job Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/inventory/api/v1/queue": {
      "get": {
        "tags": [
          "inventory_InventoryJob"
        ],
        "summary": "Get Jobs",
        "description": "Get the requested jobs",
        "parameters": [
          {
            "name": "locationCode",
            "in": "query",
            "description": "Tenant specified unique Identifier of the owning location",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "owner",
            "in": "query",
            "description": "User that owns the job",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Type of the Job Queue Request",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "REFRESH",
                  "ADJUST",
                  "RELEASE_SHIPMENTS",
                  "CREATE_PICK_WAVE",
                  "CLOSE_PICK_WAVE",
                  "PUT_AWAY_FILE",
                  "SHORT_PICK_ERROR",
                  "BIN_AUDIT_START",
                  "BIN_AUDIT_COMPLETION",
                  "CREATE_BIN_AUDIT",
                  "RELEASE_PENDING_ITEMS"
                ]
              }
            }
          },
          {
            "name": "originalFilename",
            "in": "query",
            "description": "The full name of the file that was picked up at the secure droppoint server before being split up by location.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobQueueResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Job Not Found"
          }
        }
      }
    },
    "/commerce/inventory/api/v5/inventory/refresh": {
      "post": {
        "tags": [
          "inventory_ModifyInventory"
        ],
        "summary": "Refresh",
        "description": "Refresh Inventory",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/RefreshRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobIDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/commerce/inventory/api/v5/inventory/sync-refresh": {
      "post": {
        "tags": [
          "inventory_ModifyInventory"
        ],
        "summary": "Sync Refresh",
        "description": "Refresh Inventory - synchronous",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/RefreshRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryResponse"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/inventory/api/v5/inventory/adjust": {
      "post": {
        "tags": [
          "inventory_ModifyInventory"
        ],
        "summary": "Adjust",
        "description": "Adjust Inventory",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/AdjustRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobIDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/inventory/api/v5/inventory/sync-adjust": {
      "post": {
        "tags": [
          "inventory_ModifyInventory"
        ],
        "summary": "Sync Adjust",
        "description": "Adjust Inventory - synchronous",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/AdjustRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryResponse"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/inventory/api/v5/inventory/delete": {
      "post": {
        "tags": [
          "inventory_ModifyInventory"
        ],
        "summary": "Delete",
        "description": "Delete Inventory",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-site"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DeleteItemRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/commerce/admin/locations": {
      "post": {
        "tags": [
          "location_LocationAdmin"
        ],
        "summary": "Add Location",
        "description": "Add a new location.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "location_LocationAdmin"
        ],
        "summary": "Get Locations",
        "description": "Get locations with optional filtering and paging.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/admin/locations/{locationCode}": {
      "put": {
        "tags": [
          "location_LocationAdmin"
        ],
        "summary": "Update Location",
        "description": "Update a location by providing its locationCode.",
        "parameters": [
          {
            "name": "locationCode",
            "in": "path",
            "description": "the unique code for a location",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "the location update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "location_LocationAdmin"
        ],
        "summary": "Get Location",
        "description": "Get a location by its unique locationCode.",
        "parameters": [
          {
            "name": "locationCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "location_LocationAdmin"
        ],
        "summary": "Delete Locations",
        "description": "Delete a location.",
        "parameters": [
          {
            "name": "locationCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/admin/locations/attributedefinition/attributes": {
      "get": {
        "tags": [
          "location_LocationAttributeDefinitions"
        ],
        "summary": "Get Attributes",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttributeCollection"
                }
              }
            }
          }
        },
        "description": "Retrieves the details of attributes."
      },
      "post": {
        "tags": [
          "location_LocationAttributeDefinitions"
        ],
        "summary": "Create Attribute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "description": "Create Attribute"
      }
    },
    "/commerce/admin/locations/attributedefinition/attributes/{attributeFQN}/VocabularyValues": {
      "get": {
        "tags": [
          "location_LocationAttributeDefinitions"
        ],
        "summary": "Get Attribute Vocabulary Values",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves the details of attribute vocabulary values."
      }
    },
    "/commerce/admin/locations/attributedefinition/attributes/{attributeFQN}": {
      "get": {
        "tags": [
          "location_LocationAttributeDefinitions"
        ],
        "summary": "Get Attribute",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "description": "Retrieves the details of an attribute."
      },
      "put": {
        "tags": [
          "location_LocationAttributeDefinitions"
        ],
        "summary": "Update Attribute",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceRuntimeAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceRuntimeAttribute"
                }
              }
            }
          }
        },
        "description": "Update a category attribute."
      }
    },
    "/commerce/admin/locationGroups": {
      "post": {
        "tags": [
          "location_LocationGroup"
        ],
        "summary": "Add Location Group",
        "description": "Add a location group.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationLocationGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationLocationGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationLocationGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationLocationGroup"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "location_LocationGroup"
        ],
        "summary": "Get Location Groups",
        "description": "Gets a collection of location groups.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationGroupCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationGroupCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationGroupCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/admin/locationGroups/{locationGroupCode}": {
      "put": {
        "tags": [
          "location_LocationGroup"
        ],
        "summary": "Update Location Group",
        "description": "Update an existing location group.",
        "parameters": [
          {
            "name": "locationGroupCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationLocationGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationLocationGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationLocationGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationLocationGroup"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "location_LocationGroup"
        ],
        "summary": "Get Location Group",
        "description": "Gets a location group by code.",
        "parameters": [
          {
            "name": "locationGroupCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationLocationGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationLocationGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationLocationGroup"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "location_LocationGroup"
        ],
        "summary": "Delete Location Group",
        "description": "Deletes a location group specified by location group code.",
        "parameters": [
          {
            "name": "locationGroupCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/admin/locationGroupConfiguration/{locationGroupCode}": {
      "get": {
        "tags": [
          "location_LocationGroupConfiguration"
        ],
        "summary": "Get Location Group Configuration",
        "description": "Get this tenants Location Group Configuration Values by locationGroupCode.",
        "parameters": [
          {
            "name": "locationGroupCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationGroupConfiguration"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationGroupConfiguration"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationGroupConfiguration"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "location_LocationGroupConfiguration"
        ],
        "summary": "Set Location Group Configuration",
        "description": "Set this tenants Location Group Configuration Values.",
        "parameters": [
          {
            "name": "locationGroupCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationGroupConfiguration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationGroupConfiguration"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationGroupConfiguration"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationGroupConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/admin/locationGroupConfiguration/location/{locationCode}": {
      "get": {
        "tags": [
          "location_LocationGroupConfiguration"
        ],
        "summary": "Get Location Group Configuration By Location Code",
        "description": "Get this tenants Location Group Configuration Values.",
        "parameters": [
          {
            "name": "locationCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationGroupConfiguration"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationGroupConfiguration"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationGroupConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/storefront/locationUsageTypes/DS/location": {
      "get": {
        "tags": [
          "location_Location"
        ],
        "summary": "Get Direct Ship Location",
        "description": "Get the Direct Ship Location for the Site.",
        "parameters": [
          {
            "name": "includeAttributeDefinition",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/storefront/locationUsageTypes/CS/location": {
      "get": {
        "tags": [
          "location_Location"
        ],
        "summary": "Get Curbside Location",
        "description": "Get the Curbside Location for the Site.",
        "parameters": [
          {
            "name": "includeAttributeDefinition",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/storefront/locationUsageTypes/DL/locations": {
      "get": {
        "tags": [
          "location_Location"
        ],
        "summary": "Get Delivery Locations",
        "description": "Gets the delivery Locations for the site",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAttributeDefinition",
            "in": "query",
            "description": "Include the location attributes associated definition",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/storefront/locationUsageTypes/DL/location": {
      "get": {
        "tags": [
          "location_Location"
        ],
        "summary": "Get Delivery Location",
        "description": "Gets a specific Delivery Location for the site",
        "parameters": [
          {
            "name": "includeAttributeDefinition",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/storefront/locationUsageTypes/SP/locations": {
      "get": {
        "tags": [
          "location_Location"
        ],
        "summary": "Get In Store Pickup Locations",
        "description": "Gets the in store pickup Locations for the site.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAttributeDefinition",
            "in": "query",
            "description": "Include the location attributes associated definition",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/storefront/locationUsageTypes/SP/locations/{locationCode}": {
      "get": {
        "tags": [
          "location_Location"
        ],
        "summary": "Get In Store Pickup Location",
        "description": "Get a specific in store pickup Location for the Site",
        "parameters": [
          {
            "name": "locationCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAttributeDefinition",
            "in": "query",
            "description": "Include the location attributes associated definition",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/storefront/locationUsageTypes/{locationUsageType}/locations": {
      "get": {
        "tags": [
          "location_Location"
        ],
        "summary": "Get Locations In Usage Type",
        "description": "Get the Locations for the Site associated with the locationUsageType.",
        "parameters": [
          {
            "name": "locationUsageType",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAttributeDefinition",
            "in": "query",
            "description": "Include the location attributes associated definition",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/storefront/locations/{locationCode}": {
      "get": {
        "tags": [
          "location_Location"
        ],
        "summary": "Get Location",
        "description": "Get a Location by locationCode.",
        "parameters": [
          {
            "name": "locationCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAttributeDefinition",
            "in": "query",
            "description": "Include the location attributes associated definition",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/settings/locationUsages": {
      "get": {
        "tags": [
          "location_LocationSettings"
        ],
        "summary": "Get Location Usages",
        "description": "Get the locationUsages for the Site.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationUsageCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationUsageCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationUsageCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/settings/locationUsages/{code}": {
      "get": {
        "tags": [
          "location_LocationSettings"
        ],
        "summary": "Get Location Usage",
        "description": "Get a locationUsage for the Site.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationUsage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationUsage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationUsage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "location_LocationSettings"
        ],
        "summary": "Update Location Usage Async",
        "description": "Update a locationUsage for the Site.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationUsage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationUsage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationUsage"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationUsage"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/admin/locationtypes": {
      "post": {
        "tags": [
          "location_LocationType"
        ],
        "summary": "Add Location Type Async",
        "description": "Create a LocationType.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationType"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "location_LocationType"
        ],
        "summary": "Get Location Types",
        "description": "Get a collection of LocationTypes.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationType"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationType"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/admin/locationtypes/{locationTypeCode}": {
      "put": {
        "tags": [
          "location_LocationType"
        ],
        "summary": "Update Location Type",
        "description": "Update a LocationType.",
        "parameters": [
          {
            "name": "locationTypeCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationType"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "location_LocationType"
        ],
        "summary": "Get Location Type",
        "description": "Get a LocationType.",
        "parameters": [
          {
            "name": "locationTypeCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationType"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "location_LocationType"
        ],
        "summary": "Delete Location Type",
        "description": "Delete Location Type.",
        "parameters": [
          {
            "name": "locationTypeCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/entities/{id}": {
      "get": {
        "tags": [
          "mzdb_Entities"
        ],
        "summary": "Get Entity",
        "description": "Get a specific Entity from an EntityList instance",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The unique id of the Entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              },
              "text/plain": {
                "schema": {}
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "mzdb_Entities"
        ],
        "summary": "Update Entity",
        "description": "Update an existing Entity in an EntityList instance",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The unique id of the Entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Entity in json format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppDevHttpRequestMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              },
              "text/plain": {
                "schema": {}
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "mzdb_Entities"
        ],
        "summary": "Delete Entity",
        "description": "Delete an existing Entity from an EntityList instance",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The unique id of the Entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/entities": {
      "get": {
        "tags": [
          "mzdb_Entities"
        ],
        "summary": "Get Entities",
        "description": "Get a filtered collection of Entities from an EntityList instance",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "mzdb_Entities"
        ],
        "summary": "Add Entity",
        "description": "Insert an Entity into an EntityList instance",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Entity in json format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppDevHttpRequestMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              },
              "text/plain": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/entityContainers/{id}": {
      "get": {
        "tags": [
          "mzdb_EntityContainers"
        ],
        "summary": "Get Entity Container",
        "description": "Get a specific Entity Container from an  EntityList instance",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The unique id of the Entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainer"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainer"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainer"
                }
              }
            }
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/entityContainers": {
      "get": {
        "tags": [
          "mzdb_EntityContainers"
        ],
        "summary": "Get Entity Containers",
        "description": "Get a filtered collection of Entity Containers from an Entity List instance",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainerCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainerCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainerCollection"
                }
              }
            }
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}": {
      "get": {
        "tags": [
          "mzdb_EntityLists"
        ],
        "summary": "Get EntityList",
        "description": "Get an existing EntityList definition for a specific tenant",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "mzdb_EntityLists"
        ],
        "summary": "Update Entitylist",
        "description": "Update an existing Entitylist for a specific tenant.",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The EntityList definition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "mzdb_EntityLists"
        ],
        "summary": "Delete EntityList",
        "description": "Delete an existing EntityList for a specific tenant. This will also delete all Entities in all instances of this EntityList for the tenant.",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/platform/entitylists": {
      "post": {
        "tags": [
          "mzdb_EntityLists"
        ],
        "summary": "Add EntityList",
        "description": "Create a new EntityList for a specific tenant.",
        "requestBody": {
          "description": "The EntityList definition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityList"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "mzdb_EntityLists"
        ],
        "summary": "Get EntityLists",
        "description": "Get a filtered list of EntityLists for a specific tenant.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityListCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityListCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityListCollection"
                }
              }
            }
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/views": {
      "get": {
        "tags": [
          "mzdb_ListViews"
        ],
        "summary": "Get  ListViews",
        "description": "Get all of the defined ListViews for a specific EntityList for a specific tenant",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListViewCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListViewCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListViewCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "mzdb_ListViews"
        ],
        "summary": "Add ListView",
        "description": "Create a new ListView definition for a specific EntityList for a specific tenant",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new ListView definition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListView"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              }
            }
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/views/{viewName}": {
      "get": {
        "tags": [
          "mzdb_ListViews"
        ],
        "summary": "Get ListView",
        "description": "Returns a specific ListView definition for a specific EntityList for a specific tenant",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewName",
            "in": "path",
            "description": "The name of the ListView",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "mzdb_ListViews"
        ],
        "summary": "Update ListView",
        "description": "Update an existing ListView definition for a specific EntityList for a specific tenant",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewName",
            "in": "path",
            "description": "The name of the ListView",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The udpated ListView definition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListView"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListView"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "mzdb_ListViews"
        ],
        "summary": "Delete ListView",
        "description": "Delete an existing ListView definition for a specific EntityList for a specific tenant",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewName",
            "in": "path",
            "description": "The name of the ListView to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/views/{viewName}/entityContainers": {
      "get": {
        "tags": [
          "mzdb_EntityContainers"
        ],
        "summary": "Get Entity View Containers",
        "description": "Get a filtered collection of Entity Containers for a ListView on an EntityList",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewName",
            "in": "path",
            "description": "The name of the ListView",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainerCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainerCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainerCollection"
                }
              }
            }
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/views/{viewName}/entities": {
      "get": {
        "tags": [
          "mzdb_Entities"
        ],
        "summary": "Get View Entities",
        "description": "Get a filtered collection of Entities for a ListView on an EntityList",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewName",
            "in": "path",
            "description": "The name of the ListView",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCollection"
                }
              }
            }
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/views/{viewName}/entityContainers/{entityId}": {
      "get": {
        "tags": [
          "mzdb_EntityContainers"
        ],
        "summary": "Get  Entity View Container",
        "description": "Get an Entity Container for a specific Entity in a ListView on an EntityList",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewName",
            "in": "path",
            "description": "The name of the ListView",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The unique Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainer"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainer"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EntityContainer"
                }
              }
            }
          }
        }
      }
    },
    "/platform/entitylists/{entityListFullName}/views/{viewName}/entities/{entityId}": {
      "get": {
        "tags": [
          "mzdb_Entities"
        ],
        "summary": "Get View Entity",
        "description": "Get a specific Entity in a ListView on an EntityList",
        "parameters": [
          {
            "name": "entityListFullName",
            "in": "path",
            "description": "The full name of the EntityList including namespace in name@nameSpace format",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewName",
            "in": "path",
            "description": "The name of the ListView",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The unique Entity id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              },
              "text/plain": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/commerce/orderrouting/api/v1/dataList": {
      "post": {
        "tags": [
          "orderrouting_OrderRoutingDataList"
        ],
        "summary": "createCustomDataList",
        "requestBody": {
          "description": "customDataList",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomDataList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomDataListResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "customDataList",
        "description": "createCustomDataList"
      }
    },
    "/commerce/orderrouting/api/v1/dataList/{dataListID}": {
      "get": {
        "tags": [
          "orderrouting_OrderRoutingDataList"
        ],
        "summary": "getCustomDataList",
        "parameters": [
          {
            "name": "dataListID",
            "in": "path",
            "description": "dataListID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomDataListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "description": "getCustomDataList"
      },
      "put": {
        "tags": [
          "orderrouting_OrderRoutingDataList"
        ],
        "summary": "updateCustomDataList",
        "parameters": [
          {
            "name": "dataListID",
            "in": "path",
            "description": "dataListID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "newDataList",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomDataList"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomDataListResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "newDataList",
        "description": "updateCustomDataList"
      },
      "delete": {
        "tags": [
          "orderrouting_OrderRoutingDataList"
        ],
        "summary": "deleteCustomDataList",
        "parameters": [
          {
            "name": "dataListID",
            "in": "path",
            "description": "dataListID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        },
        "deprecated": false,
        "description": "deleteCustomDataList"
      }
    },
    "/commerce/orderrouting/api/v1/filter/criteriaSet": {
      "post": {
        "tags": [
          "orderrouting_OrderRoutingFilter"
        ],
        "summary": "saveCriteriaSetFilter",
        "requestBody": {
          "description": "loc",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationCriteriaSetFilter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbstractFilter"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "loc",
        "description": "saveCriteriaSetFilter"
      }
    },
    "/commerce/orderrouting/api/v1/filter/customDataListFilter": {
      "post": {
        "tags": [
          "orderrouting_OrderRoutingFilter"
        ],
        "summary": "saveCustomDataListFilter",
        "requestBody": {
          "description": "filter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomDataListFilter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbstractFilter"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "filter",
        "description": "saveCustomDataListFilter"
      }
    },
    "/commerce/orderrouting/api/v1/filter/customDataValueFilter": {
      "post": {
        "tags": [
          "orderrouting_OrderRoutingFilter"
        ],
        "summary": "saveCustomDataValueFilter",
        "requestBody": {
          "description": "customDataValueFilter",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomDataValueFilter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbstractFilter"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "customDataValueFilter",
        "description": "saveCustomDataValueFilter"
      }
    },
    "/commerce/orderrouting/api/v1/filter/delete/{filterID}": {
      "delete": {
        "tags": [
          "orderrouting_OrderRoutingFilter"
        ],
        "summary": "deleteFilter",
        "parameters": [
          {
            "name": "filterID",
            "in": "path",
            "description": "filterID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        },
        "deprecated": false,
        "description": "deleteFilter"
      }
    },
    "/commerce/orderrouting/api/v1/filter/testcriteria": {
      "get": {
        "tags": [
          "orderrouting_OrderRoutingFilter"
        ],
        "summary": "testFilter",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbstractFilter"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "description": "testFilter"
      }
    },
    "/commerce/orderrouting/api/v1/filter/testset": {
      "get": {
        "tags": [
          "orderrouting_OrderRoutingFilter"
        ],
        "summary": "testSetFilter",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbstractFilter"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "description": "testSetFilter"
      }
    },
    "/commerce/orderrouting/api/v1/filter/{filterID}": {
      "get": {
        "tags": [
          "orderrouting_OrderRoutingFilter"
        ],
        "summary": "getFilter",
        "parameters": [
          {
            "name": "filterID",
            "in": "path",
            "description": "filterID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbstractFilter"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "description": "getFilter"
      }
    },
    "/commerce/orderrouting/api/v1/group/delete/{groupID}": {
      "delete": {
        "tags": [
          "orderrouting_OrderRoutingGroup"
        ],
        "summary": "deleteGroup",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "groupID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        },
        "deprecated": false,
        "description": "deleteGroup"
      }
    },
    "/commerce/orderrouting/api/v1/group/test": {
      "get": {
        "tags": [
          "orderrouting_OrderRoutingGroup"
        ],
        "summary": "testGroup",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDocumentationLocationGroup"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "description": "testGroup"
      }
    },
    "/commerce/orderrouting/api/v1/group/{groupID}": {
      "get": {
        "tags": [
          "orderrouting_OrderRoutingGroup"
        ],
        "summary": "getGroup",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "groupID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDocumentationLocationGroup"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "description": "getGroup"
      }
    },
    "/commerce/orderrouting/api/v1/group/{groupID}/setFilters": {
      "post": {
        "tags": [
          "orderrouting_OrderRoutingGroup"
        ],
        "summary": "setGroupFilters",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "groupID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "filterIDs",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDocumentationLocationGroup"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "filterIDs",
        "description": "setGroupFilters"
      }
    },
    "/commerce/orderrouting/api/v1/group/{groupID}/setSorts": {
      "post": {
        "tags": [
          "orderrouting_OrderRoutingGroup"
        ],
        "summary": "setGroupSorts",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "groupID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "sorts",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LocationSort"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDocumentationLocationGroup"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "sorts",
        "description": "setGroupSorts"
      }
    },
    "/commerce/orderrouting/api/v1/location": {
      "get": {
        "tags": [
          "orderrouting_OrderRoutingLocation"
        ],
        "summary": "getLocations",
        "parameters": [
          {
            "name": "pageNum",
            "in": "query",
            "description": "pageNum",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "pageSize",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "x-vol-tenant",
            "in": "header",
            "description": "x-vol-tenant",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationListResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "description": "getLocations"
      }
    },
    "/commerce/orderrouting/api/v1/location/{locationCode}": {
      "get": {
        "tags": [
          "orderrouting_OrderRoutingLocation"
        ],
        "summary": "getLocationByLocationCode",
        "parameters": [
          {
            "name": "locationCode",
            "in": "path",
            "description": "locationCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-vol-tenant",
            "in": "header",
            "description": "x-vol-tenant",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "description": "getLocationByLocationCode"
      }
    },
    "/commerce/orderrouting/api/v1/routing/candidates": {
      "post": {
        "tags": [
          "orderrouting_Routing"
        ],
        "summary": "suggestCandidates",
        "requestBody": {
          "description": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CandidateSuggestionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CandidateSuggestionsResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "request",
        "description": "suggestCandidates"
      }
    },
    "/commerce/orderrouting/api/v1/routing/samplerequest": {
      "get": {
        "tags": [
          "orderrouting_Routing"
        ],
        "summary": "getSampleRequest",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestionRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "description": "getSampleRequest"
      }
    },
    "/commerce/orderrouting/api/v1/routing/suggestion": {
      "post": {
        "tags": [
          "orderrouting_Routing"
        ],
        "summary": "suggestRouting",
        "parameters": [
          {
            "name": "returnSuggestionLog",
            "in": "query",
            "description": "returnSuggestionLog",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestionResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "request",
        "description": "suggestRouting"
      }
    },
    "/commerce/orderrouting/api/v1/routing/suggestionTest": {
      "post": {
        "tags": [
          "orderrouting_Routing"
        ],
        "summary": "suggestRoutingTest",
        "parameters": [
          {
            "name": "returnSuggestionLog",
            "in": "query",
            "description": "returnSuggestionLog",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestionTestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestionResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "request",
        "description": "suggestRoutingTest"
      }
    },
    "/commerce/orderrouting/api/v1/group": {
      "post": {
        "tags": [
          "orderrouting_OrderRoutingGroup"
        ],
        "summary": "saveGroup",
        "requestBody": {
          "description": "loc",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationGroupModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDocumentationLocationGroup"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "loc",
        "description": "saveGroup"
      }
    },
    "/commerce/orderrouting/api/v1/routing/suggestionLog": {
      "get": {
        "tags": [
          "orderrouting_Routing"
        ],
        "summary": "getSuggestionLog",
        "parameters": [
          {
            "name": "externalResponseID",
            "in": "query",
            "description": "externalResponseID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderID",
            "in": "query",
            "description": "orderID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseID",
            "in": "query",
            "description": "responseID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "suggestionID",
            "in": "query",
            "description": "suggestionID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SuggestionLog"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "deprecated": false,
        "description": "getSuggestionLog"
      }
    },
    "/commerce/catalog/admin/attributedefinition/attributes": {
      "get": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Get product attributes",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeCollection"
                }
              }
            }
          }
        },
        "description": "Get product attributes"
      },
      "post": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Add a product attribute",
        "description": "Add / Create Attribute",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttribute"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}": {
      "get": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Get product attribute",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttribute"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Update a product attribute",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsAttribute"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttribute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttribute"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttribute"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Delete product attribute",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/LocalizedContent/{localeCode}": {
      "get": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Get product attribute localized content",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "localeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Update product attribute localized content",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "localeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Delete product attribute localized content",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "localeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/LocalizedContent": {
      "get": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Get product attribute localized contents",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Add product attribute localized content",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Update product attribute localized content",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}": {
      "get": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Get product attribute vocabulary value",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Update product attribute vocabulary value",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Delete product attribute vocabulary value",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}/LocalizedContent/{localeCode}": {
      "get": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Get product attribute vocabulary value localized content",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "localeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Update product attribute vocabulary value localized content",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "localeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Delete product attribute vocabulary value localized content",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "localeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}/LocalizedContent": {
      "get": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Get product attribute vocabulary value localized content",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Update product attribute vocabulary value localized content",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Add product attribute vocabulary value",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues": {
      "get": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Get product attribute vocabulary values",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Add product attribute vocabulary value",
        "description": "Add product attribute vocabulary value",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Update product attribute vocabulary values",
        "description": "",
        "parameters": [
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/attributes/typerules": {
      "get": {
        "tags": [
          "productadmin_ProductAttributes"
        ],
        "summary": "Get attribute type rules",
        "description": "Retrieves a paged list of attribute type rules according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeTypeRuleCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeTypeRuleCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeTypeRuleCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/categories": {
      "get": {
        "tags": [
          "productadmin_Categories"
        ],
        "summary": "Get categories",
        "description": "Retrieves a list of categories according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCategoryPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCategoryPagedCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCategoryPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_Categories"
        ],
        "summary": "Add category",
        "description": "dds a new category to the catalog's category hierarchy. Specify a ParentCategoryID to determine where to locate the category in the hierarchy; if not specified it becomes a top-level category.",
        "parameters": [
          {
            "name": "incrementSequence",
            "in": "query",
            "description": "Sets the sequence number of the category to the current max sequence value plus 1 (e.g. 5 + 1 = 6)",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "useProvidedId",
            "in": "query",
            "description": "If true, the provided Id value will be used as the CategoryId. If omitted or false, the system will generate a CategoryId",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the new category. Required properties ParentCategoryID and Content.Name.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsCategory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCategory"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCategory"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCategory"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/categories/{categoryId}": {
      "get": {
        "tags": [
          "productadmin_Categories"
        ],
        "summary": "Get category",
        "description": "Retrieves the details of a single category.",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "Unique identifier of the category.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCategory"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCategory"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCategory"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_Categories"
        ],
        "summary": "Update category",
        "description": "Modifies a category such as moving it to another location in the category tree, or changing whether it is visible on the storefront. This PUT replaces the existing resource, so be sure to include all the information that you want to maintain for the category. Any unspecified properties are set to null.",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "Unique identifier of the category that you want to modify. Required.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cascadeVisibility",
            "in": "query",
            "description": "If true, when changing the display option for the category, change it for all subcategories also. Optional.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the category that you want to modify. Required properties ParentCategoryID and Content.Name.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsCategory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCategory"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCategory"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCategory"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_Categories"
        ],
        "summary": "Delete category",
        "description": "Deletes the category specified by its category ID.",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "Unique identifier of the category that you want to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cascadeDelete",
            "in": "query",
            "description": "If true, any subcategories of a category are deleted when this category is deleted. Otherwise only the given category is deleted. Default is false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "forceDelete",
            "in": "query",
            "description": "If true, category (and optionally subcategories) will be deleted even if there are products referecing them.  Default is false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "reassignToParent",
            "in": "query",
            "description": "If true, and child categories of the given category will be reassigned to the parent of the given category. Only applies if cascadeDelete is false. Default is false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/categories/{categoryId}/children": {
      "get": {
        "tags": [
          "productadmin_Categories"
        ],
        "summary": "Get child categories",
        "description": "Retrieves the immediate subcategories of a category.",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "Unique identifier of the category whose subcategories you want to get.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCategoryCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCategoryCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCategoryCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/categories/ValidateDynamicExpression": {
      "post": {
        "tags": [
          "productadmin_Categories"
        ],
        "summary": "Validate dynamic category expression",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DynamicExpression"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DynamicExpression"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DynamicExpression"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DynamicExpression"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/categories/ValidateRealTimeDynamicExpression": {
      "post": {
        "tags": [
          "productadmin_Categories"
        ],
        "summary": "Validate realtime dynamic category expression",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DynamicExpression"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DynamicExpression"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DynamicExpression"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DynamicExpression"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/categories/{categoryId}/remove-products": {
      "post": {
        "tags": [
          "productadmin_Categories"
        ],
        "summary": "Remove products from category",
        "description": "Removes the products in the provided product code list from the specified category.",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "Unique identifier of the category that you want products removed from.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "A list of products to be removed from the category.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/categories/{categoryId}/add-products": {
      "post": {
        "tags": [
          "productadmin_Categories"
        ],
        "summary": "Add products to category",
        "description": "Adds the products in the provided product code list to the specified category.",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "Unique identifier of the category that you want produts added to.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "A list of products to be added to the category.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/couponsets/unique-code": {
      "get": {
        "tags": [
          "productadmin_CouponSets"
        ],
        "summary": "Get unique coupon set code",
        "description": "Returns a random 4 character code that is unique as a coupon set code.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/couponsets/validate-unique-code": {
      "post": {
        "tags": [
          "productadmin_CouponSets"
        ],
        "summary": "Validate unique coupon set code",
        "description": " Tests code for uniqueness and validity.",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/couponsets/{couponSetCode}": {
      "get": {
        "tags": [
          "productadmin_CouponSets"
        ],
        "summary": "Get coupon set",
        "description": "Returns a single CouponSet",
        "parameters": [
          {
            "name": "couponSetCode",
            "in": "path",
            "description": "CouponSetCode for the requested CouponSet",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeCounts",
            "in": "query",
            "description": "Include the redemption counts and coupon counts",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "\"counts\" includes the number of redemptions, coupon codes, and assigned discounts.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponSet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CouponSet"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_CouponSets"
        ],
        "summary": "Update coupon set",
        "description": "Update a CouponSet.\n\t\t\t\tYou can not update the Code or ID once the set is created.",
        "parameters": [
          {
            "name": "couponSetCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponSet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponSet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CouponSet"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_CouponSets"
        ],
        "summary": "Delete coupon set",
        "description": "",
        "parameters": [
          {
            "name": "couponSetCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/couponsets": {
      "get": {
        "tags": [
          "productadmin_CouponSets"
        ],
        "summary": "Get coupon sets",
        "description": "Returns a paged collection of CouponSets",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeCounts",
            "in": "query",
            "description": "Include coupon and redemption counts",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "\"counts\" returns discount and couponCode counts",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponSetCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponSetCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CouponSetCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_CouponSets"
        ],
        "summary": "Add coupon set",
        "description": "Adds a single CouponSet",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponSet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponSet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CouponSet"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes": {
      "get": {
        "tags": [
          "productadmin_CouponSets"
        ],
        "summary": "Get coupons",
        "description": "Returns a paged collection of Coupons",
        "parameters": [
          {
            "name": "couponSetCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeCounts",
            "in": "query",
            "description": "Includes coupon redemption counts",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "counts",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_CouponSets"
        ],
        "summary": "Add coupons",
        "description": "",
        "parameters": [
          {
            "name": "couponSetCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Coupon"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes/{couponCode}": {
      "get": {
        "tags": [
          "productadmin_CouponSets"
        ],
        "summary": "Get coupon",
        "description": "",
        "parameters": [
          {
            "name": "couponSetCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeCounts",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_CouponSets"
        ],
        "summary": "Delete coupon",
        "description": "",
        "parameters": [
          {
            "name": "couponSetCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes/remove": {
      "post": {
        "tags": [
          "productadmin_CouponSets"
        ],
        "summary": "Delete coupons",
        "description": "",
        "parameters": [
          {
            "name": "couponSetCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/couponsets/{couponSetCode}/assigneddiscounts": {
      "get": {
        "tags": [
          "productadmin_CouponSets"
        ],
        "summary": "Get assigned discounts",
        "description": "",
        "parameters": [
          {
            "name": "couponSetCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignedDiscount"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignedDiscount"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignedDiscount"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_CouponSets"
        ],
        "summary": "Assign discount",
        "description": "",
        "parameters": [
          {
            "name": "couponSetCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignedDiscount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/couponsets/{couponSetCode}/assigneddiscounts/{discountId}": {
      "delete": {
        "tags": [
          "productadmin_CouponSets"
        ],
        "summary": "UnAssign discount",
        "description": "",
        "parameters": [
          {
            "name": "couponSetCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/currency": {
      "post": {
        "tags": [
          "productadmin_Currency"
        ],
        "summary": "Add currency localization",
        "description": "Adds a new currency localization",
        "requestBody": {
          "description": "Properties of the currency-localization to create.\r\nRequired properties: CurrencyCode",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrencyLocalization"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyLocalization"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyLocalization"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyLocalization"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "productadmin_Currency"
        ],
        "summary": "Get currency localizations",
        "description": "Gets all currency-localizations.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyLocalizationCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyLocalizationCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyLocalizationCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/currency/{currencyCode}": {
      "delete": {
        "tags": [
          "productadmin_Currency"
        ],
        "summary": "Delete currency localization",
        "description": "Deletes the currency-localization specified by its currency code.",
        "parameters": [
          {
            "name": "currencyCode",
            "in": "path",
            "description": "Currency code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "productadmin_Currency"
        ],
        "summary": "Get currency localization",
        "description": "Gets a single currency-localization.",
        "parameters": [
          {
            "name": "currencyCode",
            "in": "path",
            "description": "Currency code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyLocalization"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyLocalization"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyLocalization"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_Currency"
        ],
        "summary": "Update currency localization",
        "description": "Updates the details of a currency-localization.",
        "parameters": [
          {
            "name": "currencyCode",
            "in": "path",
            "description": "Currency code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the currency-localization to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrencyLocalization"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyLocalization"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyLocalization"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyLocalization"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/currency/{currencyCode}/exchangerates": {
      "post": {
        "tags": [
          "productadmin_Currency"
        ],
        "summary": "Update currency localization",
        "description": "Updates the details of a currency-localization.",
        "parameters": [
          {
            "name": "currencyCode",
            "in": "path",
            "description": "Currency code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Exchange rates for the currency",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CatalogAdminsCurrencyExchangeRate"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "productadmin_Currency"
        ],
        "summary": "Get currency exchange rates",
        "description": "Retrieves a list of exchange rates for a specified currency-code and filter criteria.",
        "parameters": [
          {
            "name": "currencyCode",
            "in": "path",
            "description": "Currency code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyExchangeRateCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyExchangeRateCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyExchangeRateCollection"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_Currency"
        ],
        "summary": "Update currency exchange rates",
        "description": "Update multiple exchange rates for a specified currency-code.",
        "parameters": [
          {
            "name": "currencyCode",
            "in": "path",
            "description": "Currency code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Exchange rates for the currency",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CatalogAdminsCurrencyExchangeRate"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/currency/{currencyCode}/exchangerates/{toCurrencyCode}": {
      "delete": {
        "tags": [
          "productadmin_Currency"
        ],
        "summary": "Delete currency exchange rate",
        "description": "Delete a single exchange rate for a specified currency-code and target currency-code.",
        "parameters": [
          {
            "name": "currencyCode",
            "in": "path",
            "description": "Currency code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toCurrencyCode",
            "in": "path",
            "description": "C",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "productadmin_Currency"
        ],
        "summary": "Get currency exchange rate",
        "description": "Retrieves a single exchange rate for a specified currency-code and target-currency-code.",
        "parameters": [
          {
            "name": "currencyCode",
            "in": "path",
            "description": "Currency code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toCurrencyCode",
            "in": "path",
            "description": "Target currency code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCurrencyExchangeRate"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCurrencyExchangeRate"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsCurrencyExchangeRate"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/discounts/generate-random-coupon": {
      "get": {
        "tags": [
          "productadmin_Discounts"
        ],
        "summary": "Generate a random coupon",
        "description": "Generates a random code for a coupon.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/discounts": {
      "get": {
        "tags": [
          "productadmin_Discounts"
        ],
        "summary": "Get discounts",
        "description": "Retrieves a list of discounts according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_Discounts"
        ],
        "summary": "Create discount",
        "description": "Creates a discount.",
        "parameters": [
          {
            "name": "tagCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the discount to create. Required properties: Content.Name, AmountType, StartDate, and Target.Type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsDiscount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsDiscount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsDiscount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsDiscount"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/discounts/{discountId}": {
      "get": {
        "tags": [
          "productadmin_Discounts"
        ],
        "summary": "Get discount",
        "description": "Retrieves the details of a single discount.",
        "parameters": [
          {
            "name": "discountId",
            "in": "path",
            "description": "Unique identifier of the discount. System-supplied and read-only.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsDiscount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsDiscount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsDiscount"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_Discounts"
        ],
        "summary": "Update discount",
        "description": "Modifies a discount.",
        "parameters": [
          {
            "name": "discountId",
            "in": "path",
            "description": "Unique identifier of the discount. System-supplied and read-only.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the discount to update. \r\n            Required properties: Content.Name, AmountType, StartDate, and Target.Type. \r\n            Any unspecified properties are set to null and boolean variables are set to false.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsDiscount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsDiscount"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsDiscount"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsDiscount"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_Discounts"
        ],
        "summary": "Delete discount",
        "description": "Deletes a discount specified by its discount ID.",
        "parameters": [
          {
            "name": "discountId",
            "in": "path",
            "description": "Unique identifier of the discount. System-supplied and read-only.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/discounts/{discountId}/content": {
      "get": {
        "tags": [
          "productadmin_Discounts"
        ],
        "summary": "Get discount content",
        "description": "Retrieves the localized content specified for the specified discount.",
        "parameters": [
          {
            "name": "discountId",
            "in": "path",
            "description": "Unique identifier of the discount. System-supplied and read-only.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountLocalizedContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountLocalizedContent"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountLocalizedContent"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_Discounts"
        ],
        "summary": "Update discount content",
        "description": "Modifies the localized content for the specified discount. Allows you to rename the discount without modifying any other discount properties.",
        "parameters": [
          {
            "name": "discountId",
            "in": "path",
            "description": "Unique identifier of the discount. System-supplied and read-only.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New Name and/or LocaleCode. Properties of the content to update. Required property: Name.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountLocalizedContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountLocalizedContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountLocalizedContent"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountLocalizedContent"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/discounts/{discountId}/target": {
      "get": {
        "tags": [
          "productadmin_Discounts"
        ],
        "summary": "Get discount target",
        "description": "Retrieves the discount target, that is which products, categories, or shipping methods are eligible for the discount.",
        "parameters": [
          {
            "name": "discountId",
            "in": "path",
            "description": "Unique identifier of the discount. System-supplied and read-only.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsDiscountTarget"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsDiscountTarget"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsDiscountTarget"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_Discounts"
        ],
        "summary": "Update discount target",
        "description": "Modifies properties of the discount target, for example, the dollar amount, or precentage off the price.",
        "parameters": [
          {
            "name": "discountId",
            "in": "path",
            "description": "Unique identifier of the discount. System-supplied and read-only.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the discount target to modify. \r\n            Required properties: Target.Type. Any unspecified properties are set to null and boolean variables to false.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsDiscountTarget"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsDiscountTarget"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsDiscountTarget"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsDiscountTarget"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/discounts/tags": {
      "put": {
        "tags": [
          "productadmin_Discounts"
        ],
        "summary": "Update discount tags",
        "description": "Modifies tags of the discount. The original tags are overwritten.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DiscountTag"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountTagCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountTagCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountTagCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/discounts/{discountId}/tags": {
      "get": {
        "tags": [
          "productadmin_Discounts"
        ],
        "summary": "Get tags for a discount",
        "description": "Retrieves all tags associated to a discount",
        "parameters": [
          {
            "name": "discountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/discountsettings/{catalogId}": {
      "get": {
        "tags": [
          "productadmin_DiscountSettings"
        ],
        "summary": "Get discount settings",
        "description": "",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_DiscountSettings"
        ],
        "summary": "Update discount settings",
        "description": "",
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountSettings"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/facets/{facetId}": {
      "get": {
        "tags": [
          "productadmin_Facets"
        ],
        "summary": "Get facet",
        "description": "Retrieves the details of a Facet Definition",
        "parameters": [
          {
            "name": "facetId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "validate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsFacet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsFacet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsFacet"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_Facets"
        ],
        "summary": "Update facet",
        "description": "Modifies a Facet definition.",
        "parameters": [
          {
            "name": "facetId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsFacet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsFacet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsFacet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsFacet"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_Facets"
        ],
        "summary": "Delete facet",
        "description": "Deletes the Facet definition from the store.",
        "parameters": [
          {
            "name": "facetId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/facets": {
      "post": {
        "tags": [
          "productadmin_Facets"
        ],
        "summary": "Add facet",
        "description": "Adds a new Facet to a category in a catalog.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsFacet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsFacet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsFacet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsFacet"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/facets/set/edit": {
      "post": {
        "tags": [
          "productadmin_Facets"
        ],
        "summary": "Update facet",
        "description": "Modifies a Facet definition.",
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "categoryCode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FacetSet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacetSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacetSet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FacetSet"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/facets/category": {
      "get": {
        "tags": [
          "productadmin_Facets"
        ],
        "summary": "Get facet category list",
        "description": "Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.",
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "categoryCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAvailable",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "validate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacetSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacetSet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FacetSet"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/facets/category/{categoryId}": {
      "get": {
        "tags": [
          "productadmin_Facets"
        ],
        "summary": "Get facet category list (legacy)",
        "description": "Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeAvailable",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "validate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacetSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FacetSet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FacetSet"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/mastercatalogs": {
      "get": {
        "tags": [
          "productadmin_MasterCatalogPublishSettings"
        ],
        "summary": "Get master catalogs",
        "description": "",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterCatalogCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MasterCatalogCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MasterCatalogCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/mastercatalogs/{masterCatalogId}": {
      "get": {
        "tags": [
          "productadmin_MasterCatalogPublishSettings"
        ],
        "summary": "Get master catalog",
        "description": "Get a MasterCatalog",
        "parameters": [
          {
            "name": "masterCatalogId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsMasterCatalog"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsMasterCatalog"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsMasterCatalog"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_MasterCatalogPublishSettings"
        ],
        "summary": "Update master catalog",
        "description": "Update the publishingMode of a MasterCatalog",
        "parameters": [
          {
            "name": "masterCatalogId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsMasterCatalog"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsMasterCatalog"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsMasterCatalog"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsMasterCatalog"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/pricelists": {
      "get": {
        "tags": [
          "productadmin_PriceLists"
        ],
        "summary": "Get price lists",
        "description": "",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_PriceLists"
        ],
        "summary": "Add price list",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsPriceList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsPriceList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsPriceList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsPriceList"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/pricelists/{priceListCode}": {
      "get": {
        "tags": [
          "productadmin_PriceLists"
        ],
        "summary": "Get price list",
        "description": "",
        "parameters": [
          {
            "name": "priceListCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsPriceList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsPriceList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsPriceList"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_PriceLists"
        ],
        "summary": "Update price list",
        "description": "",
        "parameters": [
          {
            "name": "priceListCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsPriceList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsPriceList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsPriceList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsPriceList"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_PriceLists"
        ],
        "summary": "Delete price list",
        "description": "",
        "parameters": [
          {
            "name": "priceListCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cascadeDeleteEntries",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/pricelists/{priceListCode}/entries": {
      "get": {
        "tags": [
          "productadmin_PriceListEntries"
        ],
        "summary": "Get price list entries",
        "description": "",
        "parameters": [
          {
            "name": "priceListCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListEntryCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListEntryCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListEntryCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_PriceListEntries"
        ],
        "summary": "Add price list entry",
        "description": "",
        "parameters": [
          {
            "name": "priceListCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceListEntry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListEntry"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListEntry"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListEntry"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/pricelists/{priceListCode}/entries/{productCode}/{currencyCode}": {
      "get": {
        "tags": [
          "productadmin_PriceListEntries"
        ],
        "summary": "Get price list entry",
        "description": "",
        "parameters": [
          {
            "name": "priceListCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListEntry"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListEntry"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListEntry"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_PriceListEntries"
        ],
        "summary": "Update price list entry",
        "description": "",
        "parameters": [
          {
            "name": "priceListCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceListEntry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListEntry"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListEntry"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListEntry"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_PriceListEntries"
        ],
        "summary": "Delete price list entry",
        "description": "",
        "parameters": [
          {
            "name": "priceListCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/pricelists/bulkaddentries": {
      "post": {
        "tags": [
          "productadmin_PriceListEntries"
        ],
        "summary": "Bulk add price list entries",
        "description": "",
        "parameters": [
          {
            "name": "publishEvents",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "invalidateCache",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PriceListEntry"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/pricelists/bulkupdateentries": {
      "post": {
        "tags": [
          "productadmin_PriceListEntries"
        ],
        "summary": "Bulk update price list entries",
        "description": "",
        "parameters": [
          {
            "name": "publishEvents",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "invalidateCache",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PriceListEntry"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/pricelists/bulkdeleteentries": {
      "post": {
        "tags": [
          "productadmin_PriceListEntries"
        ],
        "summary": "Bulk delete price list entries",
        "description": "",
        "parameters": [
          {
            "name": "publishEvents",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "invalidateCache",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PriceListEntry"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/products": {
      "get": {
        "tags": [
          "productadmin_Products"
        ],
        "summary": "Get products",
        "description": "Retrieves a list of products according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a single query. The default value is 20 and the maximum value is 200.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending or descending order. For example, to sort the results by “ID” ascending then by “CreateDate” descending, use: id asc,createdate desc.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Used to get more specific information from the request. For example to get discounts applied to a product use the AppliedProducts response group. Available response groups: ApplicableDiscounts, VariationOptions, and BaseProductCode.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qLimit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_Products"
        ],
        "summary": "Add product",
        "description": "Creates a new product. You supply a product name, product code, price and other product characteristics such as its attributes, categories where the product belongs, whether the product has configurable options, stand-alone options, and so on.",
        "requestBody": {
          "description": "Properties of the new product. Required properties: ProductCode, Content.ProductName, and Price.ListPrice. Mozu.ProductAdmin.Contracts.Product",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsProduct"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProduct"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProduct"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProduct"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}": {
      "get": {
        "tags": [
          "productadmin_Products"
        ],
        "summary": "Get product",
        "description": "Retrieves details about a product based on the specified response group. For example, to get the BaseProductCode of a product.",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Merchant-created code associated with the product, for example, a SKU. Required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Used to get more specific information from the request. For example to get discounts applied to a product use the AppliedProducts response group. Available response groups: ApplicableDiscounts, VariationOptions, and BaseProductCode.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProduct"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProduct"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProduct"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_Products"
        ],
        "summary": "Update product",
        "description": "Modifies an existing product.",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Merchant-created code associated with the product, for example, a SKU. Required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the product that you want to update. Required properties: ProductCode, Content.ProductName, and Price.ListPrice.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsProduct"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProduct"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProduct"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProduct"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_Products"
        ],
        "summary": "Delete product",
        "description": "Deletes the product specified by its product code.",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Merchant-created code associated with the product, for example, a SKU. Required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/ProductInCatalogs/{catalogId}": {
      "put": {
        "tags": [
          "productadmin_Products"
        ],
        "summary": "Update product in catalog",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductInCatalogInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductInCatalogInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductInCatalogInfo"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductInCatalogInfo"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_Products"
        ],
        "summary": "Delete product in catalog",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "productadmin_Products"
        ],
        "summary": "Get product in catalog",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductInCatalogInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductInCatalogInfo"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductInCatalogInfo"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/ProductInCatalogs": {
      "get": {
        "tags": [
          "productadmin_Products"
        ],
        "summary": "Update products in catalog",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductInCatalogInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductInCatalogInfo"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductInCatalogInfo"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_Products"
        ],
        "summary": "Update products in catalog",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductInCatalogInfo"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductInCatalogInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductInCatalogInfo"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductInCatalogInfo"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_Products"
        ],
        "summary": "Add product in catalog",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductInCatalogInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductInCatalogInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductInCatalogInfo"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductInCatalogInfo"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/products/Actions/RenameProductCodes": {
      "post": {
        "tags": [
          "productadmin_Products"
        ],
        "summary": "Rename product codes",
        "description": "Action that allows productCodes to be Renamed. Changing the resource identifier of a product could cause problems for established products.",
        "requestBody": {
          "description": "An array specifying the existing productCode and the new productCode it should be renamed to",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductCodeRename"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/variations": {
      "get": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Get product variations",
        "description": "Retrieves a paged list of product variations for a specific product according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Merchant-supplied code associated with the product, for example, a SKU. Required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set\r\nwhere the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items,\r\nstartIndex=3. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a\r\nquery. The default value is 20 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending\r\n(a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not\r\nequals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw =\r\nstarts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationPagedCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationPagedCollection"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Update product variations",
        "description": "Modifies multiple product variations for an existing product in one operation. Use to set IsActive to true for\r\n             variations that represent configurable options for sale. Also use to change the price or inventory count of an\r\n             existing product variation. Read-only options are ignored.",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Merchant-supplied code associated with the product, for example, a SKU. Required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the product variations that you are modifying. Required.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariationCollection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/variations/{variationKey}": {
      "get": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Get product variation",
        "description": "Retrieves an existing product variation for a specific product and variation key.",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Merchant-created code associated with the product, for example, a SKU. Required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationKey",
            "in": "path",
            "description": "Unique identifier for a single product variation. System-supplied and read-only.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariation"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Update product variation",
        "description": "Modifies an existing product variation specified by its variation key. Typically used to change the price or\r\n             inventory count of an existing product variation. Read-only options are ignored.",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Merchant-created code associated with the product, for example, a SKU. Required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationKey",
            "in": "path",
            "description": "Unique identifier for a single variation. System-supplied and read-only.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the product variation that you are modifying. Required.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariation"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Delete product variation",
        "description": "Deletes an existing product variation.",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Merchant-created code associated with the product, for example, a SKU. Required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationKey",
            "in": "path",
            "description": "Unique identifier for a single product variation. System-supplied and read-only.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedDeltaPrice": {
      "get": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Get product variation localized delta prices",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductVariationDeltaPrice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductVariationDeltaPrice"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductVariationDeltaPrice"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Update product variation localized delta prices",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductVariationDeltaPrice"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductVariationDeltaPrice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductVariationDeltaPrice"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductVariationDeltaPrice"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Add product variation localized delta price",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariationDeltaPrice"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationDeltaPrice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationDeltaPrice"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationDeltaPrice"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedDeltaPrice/{currencyCode}": {
      "get": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Get product variation localized delta price",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationDeltaPrice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationDeltaPrice"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationDeltaPrice"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Update product variation localized delta price",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariationDeltaPrice"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationDeltaPrice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationDeltaPrice"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationDeltaPrice"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Delete product variation localized delta price",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedPrice": {
      "get": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Get product variation localized prices",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductVariationFixedPrice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductVariationFixedPrice"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductVariationFixedPrice"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Update product variation localized prices",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductVariationFixedPrice"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductVariationFixedPrice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductVariationFixedPrice"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductVariationFixedPrice"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Add product variation localized price",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariationFixedPrice"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationFixedPrice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationFixedPrice"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationFixedPrice"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedPrice/{currencyCode}": {
      "get": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Get product variation localized price",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationFixedPrice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationFixedPrice"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationFixedPrice"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Update product variation localized price",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductVariationFixedPrice"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationFixedPrice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationFixedPrice"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationFixedPrice"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductVariations"
        ],
        "summary": "Delete product variation localized price",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/Extras": {
      "get": {
        "tags": [
          "productadmin_ProductExtras"
        ],
        "summary": "Get extras",
        "description": "Get extras for the product.",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductExtra"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductExtra"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductExtra"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductExtras"
        ],
        "summary": "Add extra",
        "description": "Add extra",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductExtra"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtra"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtra"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtra"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}": {
      "get": {
        "tags": [
          "productadmin_ProductExtras"
        ],
        "summary": "Get extra",
        "description": "Get individual extra.",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtra"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtra"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtra"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductExtras"
        ],
        "summary": "Update extra",
        "description": "Update extra",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductExtra"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtra"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtra"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtra"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductExtras"
        ],
        "summary": "Delete extra",
        "description": "Delete extra",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}/Values/{value}/localizedDeltaPrice": {
      "get": {
        "tags": [
          "productadmin_ProductExtras"
        ],
        "summary": "Get extra value localized delta prices",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductExtras"
        ],
        "summary": "Update extra value localized delta prices",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductExtras"
        ],
        "summary": "Add extra value localized delta price",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}/Values/{value}/localizedDeltaPrice/{currencyCode}": {
      "put": {
        "tags": [
          "productadmin_ProductExtras"
        ],
        "summary": "Update extra value localized delta price",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductExtras"
        ],
        "summary": "Delete extra value localized delta price",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "productadmin_ProductExtras"
        ],
        "summary": "Get extra value localized delta price",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currencyCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/Options": {
      "get": {
        "tags": [
          "productadmin_ProductOptions"
        ],
        "summary": "Get options",
        "description": "Get options for the product",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsProductOption"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsProductOption"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsProductOption"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductOptions"
        ],
        "summary": "Add option",
        "description": "Add option",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsProductOption"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductOption"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductOption"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductOption"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/Options/{attributeFQN}": {
      "get": {
        "tags": [
          "productadmin_ProductOptions"
        ],
        "summary": "Get option",
        "description": "Get individual option",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductOption"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductOption"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductOption"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductOptions"
        ],
        "summary": "Update option",
        "description": "Update individual option",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsProductOption"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductOption"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductOption"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductOption"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductOptions"
        ],
        "summary": "Delete option",
        "description": "Delete individual option",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/Properties": {
      "get": {
        "tags": [
          "productadmin_ProductProperties"
        ],
        "summary": "Get properties",
        "description": "Get properties for the product",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsProductProperty"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsProductProperty"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogAdminsProductProperty"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductProperties"
        ],
        "summary": "Add property",
        "description": "Add property",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsProductProperty"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductProperty"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductProperty"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductProperty"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}": {
      "get": {
        "tags": [
          "productadmin_ProductProperties"
        ],
        "summary": "Get property",
        "description": "Get individual property",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductProperty"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductProperty"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductProperty"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductProperties"
        ],
        "summary": "Update property",
        "description": "Update property",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsProductProperty"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductProperty"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductProperty"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsProductProperty"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductProperties"
        ],
        "summary": "Delete property",
        "description": "Delete Property",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent": {
      "get": {
        "tags": [
          "productadmin_ProductProperties"
        ],
        "summary": "Get property value localized contents",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductProperties"
        ],
        "summary": "Add property value localized content",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductProperties"
        ],
        "summary": "Update property value localized contents",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent/{localeCode}": {
      "get": {
        "tags": [
          "productadmin_ProductProperties"
        ],
        "summary": "Get property value localized content",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "localeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductProperties"
        ],
        "summary": "Update property value localized content",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "localeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductProperties"
        ],
        "summary": "Delete property value localized content",
        "description": "",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "localeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/quickedit/products/properties": {
      "post": {
        "tags": [
          "productadmin_ProductQuickEdit"
        ],
        "summary": "Endpoint used to apply Mozu",
        "requestBody": {
          "description": "Mozu.ProductAdmin.Contracts.QuickEditProductPropertyActions",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuickEditProductPropertyActions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuickEditResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuickEditResponse"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuickEditResponse"
                }
              }
            }
          }
        },
        "description": "roductAdmin.Contracts.ProductProperty updates\r\nValues will be added not replaced."
      }
    },
    "/commerce/catalog/admin/quickedit/products/productincatalog": {
      "post": {
        "tags": [
          "productadmin_ProductQuickEdit"
        ],
        "summary": "Endpoint used to apply Mozu",
        "requestBody": {
          "description": "Mozu.ProductAdmin.Contracts.QuickEditProductInCatalogActions",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuickEditProductInCatalogActions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuickEditResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuickEditResponse"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuickEditResponse"
                }
              }
            }
          }
        },
        "description": "roductAdmin.Contracts.ProductInCatalogInfo updates\r\nValues will be added not replaced."
      }
    },
    "/commerce/catalog/admin/quickedit/products": {
      "post": {
        "tags": [
          "productadmin_ProductQuickEdit"
        ],
        "summary": "Endpoint used to apply top level product updates\r\nDownside is that the whole product has to be hydrated",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuickEditProductActions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuickEditResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuickEditResponse"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuickEditResponse"
                }
              }
            }
          }
        },
        "description": ""
      }
    },
    "/commerce/catalog/admin/productsortdefinitions": {
      "get": {
        "tags": [
          "productadmin_ProductSortDefinitions"
        ],
        "summary": "Get product sort definitions",
        "description": "Retrieves a list of product sort definitions according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSortDefinitionPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSortDefinitionPagedCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSortDefinitionPagedCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductSortDefinitions"
        ],
        "summary": "Add product sort definition",
        "description": "Adds a new product sort definition.",
        "parameters": [
          {
            "name": "useProvidedId",
            "in": "query",
            "description": "If true, the provided Id value will be used as the ProductSortDefinitionId. If omitted or false, the system will generate a ProductSortDefinitionId",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Properties of the new product sort definition. Required properties of StartDate and Name.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSortDefinition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSortDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSortDefinition"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSortDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/productsortdefinitions/{productSortDefinitionId}": {
      "get": {
        "tags": [
          "productadmin_ProductSortDefinitions"
        ],
        "summary": "Get product sort definition",
        "description": "Gets a single product sort definition.",
        "parameters": [
          {
            "name": "productSortDefinitionId",
            "in": "path",
            "description": "Unique identifier of the product sort definition.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSortDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSortDefinition"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSortDefinition"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductSortDefinitions"
        ],
        "summary": "Update product sort definition",
        "description": "Updates the details of a product sort definition.",
        "parameters": [
          {
            "name": "productSortDefinitionId",
            "in": "path",
            "description": "Unique identifier of the product sort definition.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the product sort definition to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSortDefinition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSortDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSortDefinition"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSortDefinition"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductSortDefinitions"
        ],
        "summary": "Delete product sort definition",
        "description": "Deletes the product sort definition specified by its ProductSortDefinitionID.",
        "parameters": [
          {
            "name": "productSortDefinitionId",
            "in": "path",
            "description": "Unique identifier of the product sort definition.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/producttypes": {
      "get": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Get product types",
        "description": "Retrieves a list of product types according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex=3. The default value is 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a single query. The default value is 20 and the maximum value is 200.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending or descending order. For example, to sort the results by “ID” ascending then by “CreateDate” descending, use: id asc,createdate desc.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Used to get more specific information from the request. For example to get discounts applied to a product use the AppliedProducts response group. Available response groups: ApplicableDiscounts, VariationOptions, and BaseProductCode.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTypeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTypeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTypeCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Add product type",
        "description": "Get product type by Id.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductType"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}": {
      "get": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Get product type",
        "description": "Get product type by Id.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductType"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Update product type",
        "description": "Update product type.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductType"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Delete product type",
        "description": "Delete product type.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/variations": {
      "post": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Generate product variations",
        "description": "",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "productCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CatalogAdminsProductOption"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationPagedCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVariationPagedCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras": {
      "get": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Get extras",
        "description": "Get extras.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeInProductType"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeInProductType"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeInProductType"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Add extra",
        "description": "Add extra.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeInProductType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras/{attributeFQN}": {
      "get": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Get extra",
        "description": "Get extra.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Update extra",
        "description": "Update extra.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeInProductType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Delete extra",
        "description": "Delete extra.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options": {
      "get": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Get options",
        "description": "Get options for the product type.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeInProductType"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeInProductType"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeInProductType"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Add option",
        "description": "Add option.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeInProductType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options/{attributeFQN}": {
      "get": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Get option",
        "description": "Get individual option.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Update option",
        "description": "Update option.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeInProductType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Delete option",
        "description": "Delete option.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties": {
      "get": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Get product type properties",
        "description": "Get properties.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeInProductType"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeInProductType"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeInProductType"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Add product type property",
        "description": "Add property.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeInProductType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties/{attributeFQN}": {
      "get": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Get product type property",
        "description": "Get property.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Update product type property",
        "description": "Update property.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeInProductType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Delete product type property",
        "description": "Delete property.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties": {
      "get": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Get variant properties",
        "description": "Get variant properties.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeInProductType"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeInProductType"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeInProductType"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Add variant property",
        "description": "Add variant property.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeInProductType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties/{attributeFQN}": {
      "get": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Get variant property",
        "description": "Get variant property.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Update variant property",
        "description": "Update variant property.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeInProductType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeInProductType"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductTypes"
        ],
        "summary": "Delete variant property",
        "description": "Delete variant property.",
        "parameters": [
          {
            "name": "productTypeId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeFQN",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/publishing/publishdrafts": {
      "post": {
        "tags": [
          "productadmin_ProductPublishing"
        ],
        "summary": "Publish draft products",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishingScope"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/publishing/discarddrafts": {
      "post": {
        "tags": [
          "productadmin_ProductPublishing"
        ],
        "summary": "Discard draft products",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishingScope"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/publishing/publishsets": {
      "get": {
        "tags": [
          "productadmin_ProductPublishing"
        ],
        "summary": "Get publish sets",
        "description": "Retrieves a list of PublishSets including the product counts.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishSetCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishSetCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PublishSetCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_ProductPublishing"
        ],
        "summary": "Assign products to publish set",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishSet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishSet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PublishSet"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/publishing/publishsets/{publishSetCode}": {
      "get": {
        "tags": [
          "productadmin_ProductPublishing"
        ],
        "summary": "Get publish set",
        "description": "Retrieves the details of a single PublishSet.",
        "parameters": [
          {
            "name": "publishSetCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishSet"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PublishSet"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_ProductPublishing"
        ],
        "summary": "Delete publish set",
        "description": "Removes all details about a PublishSet from the product service.\r\n        If the discardDrafts param is true, it also deletes the product drafts.",
        "parameters": [
          {
            "name": "publishSetCode",
            "in": "path",
            "description": "The code of the PublishSet to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discardDrafts",
            "in": "query",
            "description": "Whether to also discard the drafts for this publish set.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/search/synonym-definitions/{localeCode}": {
      "get": {
        "tags": [
          "productadmin_SearchSynonyms"
        ],
        "summary": "Get synonym definition collection",
        "parameters": [
          {
            "name": "localeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinitionCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinitionCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinitionCollection"
                }
              }
            }
          }
        },
        "description": "Get synonym definition collection"
      },
      "post": {
        "tags": [
          "productadmin_SearchSynonyms"
        ],
        "summary": "Add/Update synonym definition collection",
        "description": "Upsert synonym definition collection",
        "parameters": [
          {
            "name": "localeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SynonymDefinitionCollection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinitionCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinitionCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinitionCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/search/master-catalog-synonym-definitions/{languageCode}": {
      "get": {
        "tags": [
          "productadmin_SearchSynonyms"
        ],
        "summary": "Get synonym definition collections",
        "parameters": [
          {
            "name": "languageCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinitionCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinitionCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinitionCollection"
                }
              }
            }
          }
        },
        "description": "Get synonym definition collections"
      }
    },
    "/commerce/catalog/admin/search/synonyms": {
      "get": {
        "tags": [
          "productadmin_SearchSynonyms"
        ],
        "summary": "Get synonym definitions",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinitionPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinitionPagedCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinitionPagedCollection"
                }
              }
            }
          }
        },
        "description": "Get synonym definitions"
      },
      "post": {
        "tags": [
          "productadmin_SearchSynonyms"
        ],
        "summary": "Add synonym definition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SynonymDefinition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinition"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinition"
                }
              }
            }
          }
        },
        "description": "Add synonym definition"
      }
    },
    "/commerce/catalog/admin/search/synonyms/{synonymId}": {
      "get": {
        "tags": [
          "productadmin_SearchSynonyms"
        ],
        "summary": "Get synonym definition",
        "parameters": [
          {
            "name": "synonymId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinition"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinition"
                }
              }
            }
          }
        },
        "description": "Get synonym definition"
      },
      "put": {
        "tags": [
          "productadmin_SearchSynonyms"
        ],
        "summary": "Update synonym definition",
        "parameters": [
          {
            "name": "synonymId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SynonymDefinition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinition"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDefinition"
                }
              }
            }
          }
        },
        "description": "Update synonym definition"
      },
      "delete": {
        "tags": [
          "productadmin_SearchSynonyms"
        ],
        "summary": "Delete synonym definition",
        "parameters": [
          {
            "name": "synonymId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete synonym definition"
      }
    },
    "/commerce/catalog/admin/search/searchtuningrules": {
      "get": {
        "tags": [
          "productadmin_SearchTuningRules"
        ],
        "summary": "Get search tuning rules",
        "parameters": [
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRuleCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRuleCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRuleCollection"
                }
              }
            }
          }
        },
        "description": "Get search tuning rules"
      },
      "post": {
        "tags": [
          "productadmin_SearchTuningRules"
        ],
        "summary": "Add search tuning rule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTuningRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRule"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRule"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRule"
                }
              }
            }
          }
        },
        "description": "Add search tuning rule"
      }
    },
    "/commerce/catalog/admin/search/searchtuningrules/{searchTuningRuleCode}": {
      "get": {
        "tags": [
          "productadmin_SearchTuningRules"
        ],
        "summary": "Get search tuning rule",
        "parameters": [
          {
            "name": "searchTuningRuleCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRule"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRule"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRule"
                }
              }
            }
          }
        },
        "description": "Get search tuning rule"
      },
      "put": {
        "tags": [
          "productadmin_SearchTuningRules"
        ],
        "summary": "Update search tuning rule",
        "parameters": [
          {
            "name": "searchTuningRuleCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTuningRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRule"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRule"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRule"
                }
              }
            }
          }
        },
        "description": "Update search tuning rule"
      },
      "delete": {
        "tags": [
          "productadmin_SearchTuningRules"
        ],
        "summary": "Delete search tuning rule",
        "parameters": [
          {
            "name": "searchTuningRuleCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete search tuning rule"
      }
    },
    "/commerce/catalog/admin/search/searchtuningrulesortfields": {
      "get": {
        "tags": [
          "productadmin_SearchTuningRules"
        ],
        "summary": "Get search tuning rule sort fields",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRuleSortFields"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRuleSortFields"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRuleSortFields"
                }
              }
            }
          }
        },
        "description": "Get search tuning rule sort fields"
      },
      "post": {
        "tags": [
          "productadmin_SearchTuningRules"
        ],
        "summary": "Update search tuning rule sort fields",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTuningRuleSortFields"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRuleSortFields"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRuleSortFields"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchTuningRuleSortFields"
                }
              }
            }
          }
        },
        "description": "Update search tuning rule sort fields"
      }
    },
    "/commerce/catalog/admin/search/campaigns": {
      "get": {
        "tags": [
          "productadmin_SearchCampaignSettings"
        ],
        "summary": "Get search campaigns",
        "description": "Get site search campaign list",
        "parameters": [
          {
            "name": "pagesize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The maximum value is 200.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startindex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSettingsCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSettingsCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSettingsCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_SearchCampaignSettings"
        ],
        "summary": "Add search campaign settings",
        "description": "Adds the Campaign Settings for a specific site.",
        "parameters": [
          {
            "name": "fromSystemDefault",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSettings"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/search/campaigns/{campaignId}": {
      "get": {
        "tags": [
          "productadmin_SearchCampaignSettings"
        ],
        "summary": "Get search campaign settings",
        "description": "Get site search campaign by campaign id",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_SearchCampaignSettings"
        ],
        "summary": "Update search campaign settings",
        "description": "Update the Campaign Settings for a specific site.",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSettings"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_SearchCampaignSettings"
        ],
        "summary": "Delete campaign settings",
        "description": "Delete the Campaign Settings for a specific site by campaign id.",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignSettings"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/search/{name}/categorysuggestsettings": {
      "get": {
        "tags": [
          "productadmin_SearchCategorySuggestSettings"
        ],
        "summary": "Get category suggest settings",
        "description": "Get CategorySuggestSettings for a specific SearchSettings.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_SearchCategorySuggestSettings"
        ],
        "summary": "Add/Update category suggest settings",
        "description": "Adds or Updates (Upsert) the CategorySuggestSettings for a specific SearchSetting.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestSettings"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_SearchCategorySuggestSettings"
        ],
        "summary": "Delete category suggest settings",
        "description": "Deletes the CategorySuggestSettings for a specific SearchSetting by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/search/{name}/listingsettings": {
      "get": {
        "tags": [
          "productadmin_SearchListingSettings"
        ],
        "summary": "Get search listing settings",
        "description": "Get ListingSettings for a specific SearchSettings by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListingSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_SearchListingSettings"
        ],
        "summary": "Add/Update search listing settings",
        "description": "Adds or Updates (Upsert) the ListingSettings for a specific SearchSetting by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListingSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListingSettings"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_SearchListingSettings"
        ],
        "summary": "Delete search listing settings",
        "description": "Deletes the ListingSettings for a specific SearchSetting by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/search/{name}/productsuggestsettings": {
      "get": {
        "tags": [
          "productadmin_SearchProductSuggestSettings"
        ],
        "summary": "Get [roduct suggest settings",
        "description": "Get ProductSuggestSettings for a specific SearchSettings by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_SearchProductSuggestSettings"
        ],
        "summary": "Add/Update product suggest settings",
        "description": "Adds or Updates (Upsert) the ProductSuggestSettings for a specific SearchSetting by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSuggestSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSuggestSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSuggestSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSuggestSettings"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_SearchProductSuggestSettings"
        ],
        "summary": "Delete product suggest settings",
        "description": "Deletes the ProductSuggestSettings for a specific SearchSetting by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/search/redirect": {
      "get": {
        "tags": [
          "productadmin_SearchRedirect"
        ],
        "summary": "Get search redirects",
        "description": "Get search redirect list.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRedirectCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRedirectCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRedirectCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_SearchRedirect"
        ],
        "summary": "Add search redirect",
        "description": "Adds a search redirect for a specific site.",
        "parameters": [
          {
            "name": "fromSystemDefault",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRedirect"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRedirect"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRedirect"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRedirect"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/search/redirect/{redirectId}": {
      "get": {
        "tags": [
          "productadmin_SearchRedirect"
        ],
        "summary": "Get search redirect",
        "description": "Get search redirect by redirect id.",
        "parameters": [
          {
            "name": "redirectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRedirect"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRedirect"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRedirect"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_SearchRedirect"
        ],
        "summary": "Update search redirect",
        "description": "Update a search redirect for a specific site.",
        "parameters": [
          {
            "name": "redirectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRedirect"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRedirect"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRedirect"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRedirect"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_SearchRedirect"
        ],
        "summary": "Delete search redirect",
        "description": "Deletes a specific redirect for a site.",
        "parameters": [
          {
            "name": "redirectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRedirect"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRedirect"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchRedirect"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/search/settings": {
      "get": {
        "tags": [
          "productadmin_SearchSettings"
        ],
        "summary": "Get search settings",
        "description": "Get site search settings list.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettingsCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettingsCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettingsCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_SearchSettings"
        ],
        "summary": "Add search setting",
        "description": "Adds the Search Settings for a specific site.",
        "parameters": [
          {
            "name": "fromSystemDefault",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "makeDefault",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettings"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/search/settings/{name}": {
      "get": {
        "tags": [
          "productadmin_SearchSettings"
        ],
        "summary": "Get search setting",
        "description": "Get site search settings by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_SearchSettings"
        ],
        "summary": "Update search setting",
        "description": "Updates the Search Settings for a specific site.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettings"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_SearchSettings"
        ],
        "summary": "Delete search setting",
        "description": "Delete the Search Settings for a specific site by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettings"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/search/settings/systemdefault": {
      "get": {
        "tags": [
          "productadmin_SearchSettings"
        ],
        "summary": "Get system default search setting",
        "description": "Get the system default search settings",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSettings"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/search/{name}/sitesearchsettings": {
      "get": {
        "tags": [
          "productadmin_SearchSettings"
        ],
        "summary": "Get site search settings",
        "description": "Get SiteSearchSettings for a specific SearchSettings by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteSearchSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteSearchSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteSearchSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_SearchSettings"
        ],
        "summary": "Update site search settings",
        "description": "Updates the SiteSearchSettings for a specific SearchSetting by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteSearchSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteSearchSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteSearchSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteSearchSettings"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_SearchSettings"
        ],
        "summary": "Delete site search settings",
        "description": "Deletes the SiteSearchSettings for a specific SearchSetting by name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/search/spellcheck": {
      "put": {
        "tags": [
          "productadmin_SearchSettings"
        ],
        "summary": "Update Spellcheck settings",
        "description": "Update Spellcheck for SiteSearchSettings.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpellcheckUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/admin/tags": {
      "get": {
        "tags": [
          "productadmin_Tag"
        ],
        "summary": "Get tags",
        "description": "Retrieves a list of tags.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productadmin_Tag"
        ],
        "summary": "Create tag",
        "description": "Creates a tag.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsTag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsTag"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsTag"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsTag"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/tags/{tagCode}": {
      "get": {
        "tags": [
          "productadmin_Tag"
        ],
        "summary": "Get tag",
        "description": "Retrieves the details of a single tag.",
        "parameters": [
          {
            "name": "tagCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsTag"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsTag"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsTag"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "productadmin_Tag"
        ],
        "summary": "Delete tag",
        "description": "Deletes a Tag specified by its tagCode.",
        "parameters": [
          {
            "name": "tagCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "productadmin_Tag"
        ],
        "summary": "Update tag",
        "description": "Modifies a tag.",
        "parameters": [
          {
            "name": "tagCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogAdminsTag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsTag"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsTag"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogAdminsTag"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/tags/node/tree": {
      "get": {
        "tags": [
          "productadmin_Tag"
        ],
        "summary": "Get tag collection as tag tree",
        "description": "Retrieves the tag collection as tag tree for specified tagCode.",
        "parameters": [
          {
            "name": "tagCode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagNodeTree"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagNodeTree"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagNodeTree"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/campaigns/all": {
      "get": {
        "tags": [
          "productruntime_Campaigns"
        ],
        "summary": "Get search campaigns",
        "description": "Get list of Search campaigns.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignResult"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/campaigns/{campaignId}": {
      "get": {
        "tags": [
          "productruntime_Campaigns"
        ],
        "summary": "Get a search campaign",
        "description": "Get a specific campaign by campaign id.",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResult"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/currencies/exchangerates": {
      "get": {
        "tags": [
          "productruntime_Currencies"
        ],
        "summary": "Get exchange rates",
        "description": "Retrieves a list of currency exchange rates based on the context's currency code.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogRuntimesCurrencyExchangeRate"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogRuntimesCurrencyExchangeRate"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatalogRuntimesCurrencyExchangeRate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/pricelists/resolved": {
      "get": {
        "tags": [
          "productruntime_PriceLists"
        ],
        "summary": "Get resolved price list",
        "description": "",
        "parameters": [
          {
            "name": "customerAccountId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResolvedPriceList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResolvedPriceList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResolvedPriceList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "productruntime_PriceLists"
        ],
        "summary": "Get resolved price list",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResolvedPriceList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResolvedPriceList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResolvedPriceList"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/pricelists/{priceListCode}": {
      "get": {
        "tags": [
          "productruntime_PriceLists"
        ],
        "summary": "Get price list",
        "description": "Retrieves the price list for the given priceListCode",
        "parameters": [
          {
            "name": "priceListCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesPriceList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesPriceList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesPriceList"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/categories/tree": {
      "get": {
        "tags": [
          "productruntime_Categories"
        ],
        "summary": "Get a category tree",
        "description": "Retrieves the list of product categories that appear on the storefront organized in a hierarchical format. Hidden categories do not appear in the list.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesCategoryCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesCategoryCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesCategoryCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/categories": {
      "get": {
        "tags": [
          "productruntime_Categories"
        ],
        "summary": "Get a list of product categories",
        "description": "Retrieves a list of product categories that appear on the storefront as a flat list. Hidden categories do not appear in the list.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. A set of filter expressions representing the search parameters for a query:\r\n            eq=equals, ne=not equals, gt=greater than, lt = less than, gt = greater than or equals, le = less than or equals,\r\n            sw = starts with, or cont = contains.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Optional. Used to page results from a query.\r\n            Indicates the zero-based offset in the complete result set where the returned entities begin.\r\n            For example, with a pageSize of 25, to get the 51st through the 75th items, startIndex=3.\r\n            The default value is 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Optional. Used to page results from a query.\r\n            Indicates the maximum number of entities to return from a query. Default value: 20. Maximum value: 200.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear.\r\n            Either ascending order (a-z) which accepts 'asc' or 'ASC' or descending order (z-a) which accepts 'desc' or 'DESC'.\r\n            The sortBy parameter follows an available property.\r\n            For example, to sort results by category ID ascending, use sortBy=categoryId asc.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesCategoryPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesCategoryPagedCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesCategoryPagedCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/categories/{categoryId}": {
      "get": {
        "tags": [
          "productruntime_Categories"
        ],
        "summary": "Get a product category",
        "description": "Retrieves the name and details of a category that appears on the storefront. ",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "Required. Unique identifier of the category whose details you want to get.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "allowInactive",
            "in": "query",
            "description": "Optional. Allow the return of items with the IsDisplayed flag set to false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesCategory"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesCategory"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesCategory"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/products": {
      "get": {
        "tags": [
          "productruntime_Products"
        ],
        "summary": "Get a list of products",
        "description": "Retrieves a list of products that appear on the storefront according to any specified filter criteria and sort options.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than, gt = greater than or equals, le = less than or equals, sw = starts with, or cont = contains.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a pageSize of 25, to get the 51st through the 75th items, startIndex=3. Default value: 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a single query. Default value: 20. Maximum value: 200.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Sort the results by and the order in which the results appear. Either ascending order (a-z) which accepts 'asc' or 'ASC' or descending order (z-a) which accepts 'desc' or 'DESC'. The sortBy parameter follows an available property. For example, to sort the results by “ID” ascending then by “CreateDate” descending, use: id asc,createdate desc.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Optional. Response groups to be determined.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseOptions",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursorMark",
            "in": "query",
            "description": "Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defaultSort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mid",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAllImages",
            "in": "query",
            "description": "Optional. If true return all images instead of default images.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "useSubscriptionPricing",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesProductCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesProductCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesProductCollection"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/products/{productCode}": {
      "get": {
        "tags": [
          "productruntime_Products"
        ],
        "summary": "Get a product",
        "description": "Retrieves information about a single product given its product code.",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Required. Merchant-created code associated with the product, for example, a SKU. Max length: 30.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationProductCode",
            "in": "query",
            "description": "Optional. Merchant-created code associated with a specific product variation. Max length: #.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Optional. Response groups to be determined.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowInactive",
            "in": "query",
            "description": "Optional. If true, return a product if it is located but inactive.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skipInventoryCheck",
            "in": "query",
            "description": "Determines whether or not to check inventory on an item when validating",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "supressOutOfStock404",
            "in": "query",
            "description": "Optional. If true, will still return the product, even if product is out of stock and the out of stock behavior is set to “Hide Product in Store”. If false or omitted, the same product will return a 404 not found. Suppressing the 404 not found is useful for site SEO.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "acceptVariantProductCode",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "purchaseLocation",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationProductCodeFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sliceValue",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAllImages",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "useSubscriptionPricing",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesProduct"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesProduct"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRuntimesProduct"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/products/indexing/{productCode}": {
      "get": {
        "tags": [
          "productruntime_Products"
        ],
        "summary": "Get a product for indexing",
        "description": "Retrieves information about a single product given its product code for Mozu to index in the search engine",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Required. Merchant-created code associated with the product, for example, a SKU. Max length: 30.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "description": "Optional. Response groups to be determined.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productVersion",
            "in": "query",
            "description": "Optional. The current version of the product to use for latency checking. \r\n            \tIf this instance of Product Runtime is configured to run against a replicated database node that has a lesser version than this value, it will read from the primary database node to prevent stale data.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "lastModifiedDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductForIndexing"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductForIndexing"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductForIndexing"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/products/{productCode}/configure": {
      "post": {
        "tags": [
          "productruntime_Products"
        ],
        "summary": "Configures a variant product",
        "description": "Creates a new product selection. A create occurs each time a shopper selects a product option as they configure a product. Once all the required product options are configured, the product can be added to a cart.",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Merchant-created code for the product being configured, for example, a SKU. Max length: 30.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeOptionDetails",
            "in": "query",
            "description": "If true, the response returns product details such as. If false, returns a product summary such as the product name, price, and sale price.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skipInventoryCheck",
            "in": "query",
            "description": "Determines whether or not to check inventory on an item when validating",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "purchaseLocation",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationProductCodeFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "useSubscriptionPricing",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "subscriptionFrequency",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Shopper-selected options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductOptionSelections"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfiguredProduct"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfiguredProduct"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ConfiguredProduct"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/products/{productCode}/validate": {
      "post": {
        "tags": [
          "productruntime_Products"
        ],
        "summary": "Validates a variant product",
        "description": "Validate the final state of shopper-selected options.",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "Merchant-created code of product being validated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipInventoryCheck",
            "in": "query",
            "description": "Determines whether or not to check inventory on an item when validating",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skipDefaults",
            "in": "query",
            "description": "Determines whether or not to add configured default-extras on an item when validating",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "purchaseLocation",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "useSubscriptionPricing",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Final state of shopper selected options.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductOptionSelections"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductValidationSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductValidationSummary"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductValidationSummary"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/products/{productCode}/validateDiscounts": {
      "post": {
        "tags": [
          "productruntime_Products"
        ],
        "summary": "Validates discounts for a product",
        "description": "Validate if a collection of discounts is valid for a product.  This includes discounts that would normally be considered order level discounts.",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variationProductCode",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerAccountId",
            "in": "query",
            "description": "Customer Id may be set in the querystring or in the user claims bag if the caller context is a shopper.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "allowInactive",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skipInventoryCheck",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountSelections"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountValidationSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountValidationSummary"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountValidationSummary"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/products/{productCode}/locationinventory": {
      "get": {
        "tags": [
          "productruntime_Products"
        ],
        "summary": "Get product inventory",
        "parameters": [
          {
            "name": "productCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationCodes",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInventoryCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInventoryCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInventoryCollection"
                }
              }
            }
          }
        },
        "description": "Get product inventory"
      }
    },
    "/commerce/catalog/storefront/products/locationinventory": {
      "post": {
        "tags": [
          "productruntime_Products"
        ],
        "summary": "Get location inventories for products",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationInventoryQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInventoryCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInventoryCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationInventoryCollection"
                }
              }
            }
          }
        },
        "description": "Get location inventories for products"
      }
    },
    "/commerce/catalog/storefront/products/costs": {
      "post": {
        "tags": [
          "productruntime_Products"
        ],
        "summary": "Get costs for products",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCostQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCostCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCostCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCostCollection"
                }
              }
            }
          }
        },
        "description": "Get costs for products"
      }
    },
    "/commerce/catalog/storefront/productsearch/suggest": {
      "get": {
        "tags": [
          "productruntime_ProductSearch"
        ],
        "summary": "Gets suggested search terms",
        "description": "Suggests possible search terms as the shopper enters search text.",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Comma delimited list of suggestion groups that should be returned. The default is everything",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groups",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Indicates the maximum number of entities to return from a query. The default value is 10 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "mid",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSuggestionResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSuggestionResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSuggestionResult"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/productsearch/suggest2": {
      "get": {
        "tags": [
          "productruntime_ProductSearch"
        ],
        "summary": "Gets suggested search terms",
        "description": "Suggests possible search terms as the shopper enters search text.",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Comma delimited list of suggestion groups that should be returned. The default is everything",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Indicates the maximum number of entities to return from a query. The default value is 10 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "searchSettingsName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mid",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSuggestionResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSuggestionResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSuggestionResult"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/productsearch/visualsearch": {
      "get": {
        "tags": [
          "productruntime_ProductSearch"
        ],
        "summary": "Type ahead - Searches the items displayed on the storefront.",
        "description": "Type ahead - Searches the items displayed on the storefront.",
        "parameters": [
          {
            "name": "SearchTerm",
            "in": "query",
            "required": true,
            "schema": {
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RequestFilter"
              }
            }
          },
          {
            "name": "Returnfields",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Searchfields",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Ignoregrouping",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "NumResults",
            "in": "query",
            "schema": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ApplicationId",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "CatalogId",
            "in": "query",
            "schema": {
              "maxLength": 50,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "SessionId",
            "in": "query",
            "schema": {
              "maxLength": 100,
              "type": "string"
            }
          },
          {
            "name": "TrackingId",
            "in": "query",
            "schema": {
              "maxLength": 100,
              "type": "string"
            }
          },
          {
            "name": "ApiKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Revision",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cip",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DisplayDebug",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisualSearchResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisualSearchResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VisualSearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/productsearch/randomAccessCursor": {
      "get": {
        "tags": [
          "productruntime_ProductSearch"
        ],
        "summary": "Gets list of cursors for search results",
        "description": "Generate a list of cursors that then allows you to retrieve all products with efficient deep paging.\r\n\t\t\tOptionally provide a query and/or filter to generate a cursor for a subset of products.\r\n\t\t\tAfter retrieving the cursor, provide a cursorMark to the cursorMark argument of the /search or /getProducts operations.\r\n\t\t\tYou may provide cursorMarks in any order or even in parallel operations.",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Optional terms to search on. Only matching products will be included in the cursor.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional set of filter expressions to filter on. Only matching products will be included in the cursor.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchRandomAccessCursor"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchRandomAccessCursor"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchRandomAccessCursor"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/productsearch/search": {
      "get": {
        "tags": [
          "productruntime_ProductSearch"
        ],
        "summary": "Search for products.",
        "description": "Searches the categories displayed on the storefront for products or product options that the shopper types in a search query.",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "The terms to search on.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A set of filter expressions representing the search parameters for a query: eq=equals, ne=not equals, gt=greater than, lt = less than or equals, gt = greater than or equals, lt = less than or equals, sw = starts with, or cont = contains. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetTemplate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetTemplateSubset",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facet",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetFieldRangeQuery",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetHierPrefix",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetHierValue",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetHierDepth",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetStartIndex",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetPageSize",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetSettings",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetValueFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 12 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "searchSettings",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enableSearchTuningRules",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "searchTuningRuleContext",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTuningRuleCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetTemplateExclude",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetPrefix",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseOptions",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursorMark",
            "in": "query",
            "description": "Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetValueSort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defaultSort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortDefinitionName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defaultSortDefinitionName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shouldSlice",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "mid",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitNamespace",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeAllImages",
            "in": "query",
            "description": "Optional. If true return all images instead of default images.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "spellcorrectOverride",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "Default"
            }
          },
          {
            "name": "useSubscriptionPricing",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/productsearch/siteSearch": {
      "get": {
        "tags": [
          "productruntime_ProductSearch"
        ],
        "summary": "Site Search - Searches the items displayed on the storefront.",
        "description": "Site Search - Searches the items displayed on the storefront.",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetTemplate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetTemplateSubset",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facet",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetFieldRangeQuery",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetHierPrefix",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetHierValue",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetHierDepth",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetStartIndex",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetPageSize",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetSettings",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetValueFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "searchSettings",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enableSearchTuningRules",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "searchTuningRuleContext",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTuningRuleCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseGroups",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetTemplateExclude",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetPrefix",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseOptions",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursorMark",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facetValueSort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defaultSort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortDefinitionName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defaultSortDefinitionName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shouldSlice",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "mid",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldList",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitNamespace",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeAllImages",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "spellcorrectOverride",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "Default"
            }
          },
          {
            "name": "useSubscriptionPricing",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/productsearch/suggestdebug": {
      "get": {
        "tags": [
          "productruntime_ProductSearch"
        ],
        "summary": "Debugging relevancy for the Suggest endpoint",
        "description": "Comma delimited list of suggestion groups that should be returned. The default is everything. e.g. categories, products.",
        "parameters": [
          {
            "name": "groups",
            "in": "query",
            "description": "Comma delimited list of suggestion groups that should be returned. The default is everything. e.g. categories, products",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "The terms to search on.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Indicates the maximum number of entities to return from a query. The default value is 10 and the maximum value is 200. Optional.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "searchSettingsName",
            "in": "query",
            "description": "Specific Search Configuration. Optional parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mid",
            "in": "query",
            "description": "Session Id. Optional parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "campaignId",
            "in": "query",
            "description": "Used to debug with a specific campaign. Optional parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnUrl",
            "in": "query",
            "description": "Only respond with the request made to the search-engine, for one \"groups\" parameter value. Default is false. Optional parameter.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/storefront/productsearch/sitesearchpreview": {
      "post": {
        "tags": [
          "productruntime_SearchPreview"
        ],
        "summary": "Site search preview",
        "description": "Though this endpoint only returns data, the decision has been made to make it a POST because the request body will be larger than what a url length can contain.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindProductsPreviewParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchPreviewResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchPreviewResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchPreviewResult"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/productsearch/preview": {
      "post": {
        "tags": [
          "productruntime_SearchPreview"
        ],
        "summary": "Search preview",
        "description": "Though this endpoint only returns data, the decision has been made to make it a POST because the request body will be larger than what a url length can contain.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindProductsPreviewParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchPreviewResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchPreviewResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductSearchPreviewResult"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/storefront/searchredirect/redirects": {
      "get": {
        "tags": [
          "productruntime_SearchRedirect"
        ],
        "summary": "Get search redirects",
        "description": "Get list of search redirect items.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/catalog/storefront/searchredirect/{redirectId}": {
      "get": {
        "tags": [
          "productruntime_SearchRedirect"
        ],
        "summary": "Get search redirect",
        "description": "Get search redirect item by redirect Id.",
        "parameters": [
          {
            "name": "redirectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/settings/cart/cartsettings": {
      "get": {
        "tags": [
          "sitesettings_CartSettings"
        ],
        "summary": "Retrieves existing cart settings",
        "description": "Retrieves existing cart settings for a site",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartSettings"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "sitesettings_CartSettings"
        ],
        "summary": "Create cart settings",
        "description": "Creates new cart settings for a site",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sitesettings_CartSettings"
        ],
        "summary": "Update Cart Settings",
        "description": "Modifies existing cart settings for a site",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CartSettings"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/settings/checkout": {
      "get": {
        "tags": [
          "sitesettings_CheckoutSettings"
        ],
        "summary": "Get Checkout Settings",
        "description": "Retrieves all checkout settings defined for the site: Payment settings, such as the payment gateway ID and credentials, \r\nsupported credit cards, and more; Customer Checkout settings, such as whether login is required, and any \r\ncustom attributes; and Order Processing settings, such as when payment is authorized and captured, and any custom attributes.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutSettings"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/settings/checkout/paymentsettings/thirdpartyworkflows": {
      "get": {
        "tags": [
          "sitesettings_CheckoutSettings"
        ],
        "summary": "Get Third Party Payment Workflows",
        "description": "Retrieves list of external payment workflow definitions.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalPaymentWorkflowDefinition"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalPaymentWorkflowDefinition"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalPaymentWorkflowDefinition"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sitesettings_CheckoutSettings"
        ],
        "summary": "Add Third Party Payment Workflow",
        "description": "Adds a third party payment workflow definition in the context of a site",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalPaymentWorkflowDefinition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/settings/checkout/paymentsettings/thirdpartyworkflows/{fullyQualifiedName}": {
      "delete": {
        "tags": [
          "sitesettings_CheckoutSettings"
        ],
        "summary": "Delete Third Party Payment Workflow",
        "description": "Deletes a third party payment workflow definition defined for the site",
        "parameters": [
          {
            "name": "fullyQualifiedName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/settings/checkout/paymentsettings/thirdpartyworkflow/{fullyQualifiedName}": {
      "get": {
        "tags": [
          "sitesettings_CheckoutSettings"
        ],
        "summary": "Get Third Party Payment Workflow With Values",
        "description": "Gets a third party payment workflow specified by workflow definition which includes credential values",
        "parameters": [
          {
            "name": "fullyQualifiedName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalPaymentWorkflowDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalPaymentWorkflowDefinition"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalPaymentWorkflowDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/settings/checkout/customercheckoutsettings": {
      "get": {
        "tags": [
          "sitesettings_CheckoutSettings"
        ],
        "summary": "Get Customer Checkout Settings",
        "description": "Retrieves existing customer checkout settings including the checkout type, which determines whether the \r\ncustomer must be logged in when placing an order. Also lists any custom customer checkout attributes.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCheckoutSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCheckoutSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCheckoutSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sitesettings_CheckoutSettings"
        ],
        "summary": "Update Customer Checkout Settings",
        "description": "Modifies existing customer checkout settings. When a shopper starts the process of checking out, \r\nthe Checkout Service checks these settings to render the checkout page. \r\nThis is where you can specify whether shoppers must be logged in \"LoginRequired\"\r\nor not \"LoginOptional\" to checkout. You can also update your own customer checkout requirements, for example, to add a tracking code.",
        "requestBody": {
          "description": "Properties of the customer checkout settings to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCheckoutSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCheckoutSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCheckoutSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCheckoutSettings"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/settings/fulfillment/fulfillmentsettings": {
      "get": {
        "tags": [
          "sitesettings_FulfillmentSettings"
        ],
        "summary": "Get Fulfillment Settings",
        "description": "Retrieves existing fulfillment settings defined on the site",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentSettings"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "sitesettings_FulfillmentSettings"
        ],
        "summary": "Create Fulfillment Settings",
        "description": "Creates fulfillment settings for the site, which includes bpm settings, ship to store, back order days etc.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sitesettings_FulfillmentSettings"
        ],
        "summary": "Update Fulfillment Settings",
        "description": "Modifies existing fulfillment settings for the site, which includes bpm settings, ship to store, back order days etc.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FulfillmentSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FulfillmentSettings"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/settings/general/customroutes": {
      "post": {
        "tags": [
          "sitesettings_GeneralSettings"
        ],
        "summary": "Create Custom Route Settings",
        "description": "Creates Custom Route Settings on a tenant which includes routes, validators and mappings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomRouteSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRouteSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRouteSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRouteSettings"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "sitesettings_GeneralSettings"
        ],
        "summary": "Get Custom Route Settings",
        "description": "Retrieves Custom Route Settings on a tenant which includes routes, validators and mappings",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRouteSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRouteSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRouteSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sitesettings_GeneralSettings"
        ],
        "summary": "Update Custom Route Settings",
        "description": "Updates existing custom route settings defined on the tenant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomRouteSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRouteSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRouteSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CustomRouteSettings"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sitesettings_GeneralSettings"
        ],
        "summary": "Delete Custom Route Settings",
        "description": "Deletes all existing custom route settings defined on the tenant",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/commerce/settings/general": {
      "get": {
        "tags": [
          "sitesettings_GeneralSettings"
        ],
        "summary": "Get General Settings",
        "description": "Retrieves list of general settings for the site, which includes settings like theme, email, address validation etc.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sitesettings_GeneralSettings"
        ],
        "summary": "Update General Settings",
        "description": "Updates general settings for the site, which includes settings like theme, email, address validation etc",
        "requestBody": {
          "description": "Properties of the updated general settings.\r\nRequired properties: WebsiteName, SiteTimeZone, SiteTimeFormat, SenderEmailAddress, and ReplyEmailAddress.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralSettings"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/settings/general/taxableterritories": {
      "get": {
        "tags": [
          "sitesettings_GeneralSettings"
        ],
        "summary": "Get Taxable Territories",
        "description": "Retrieves list of taxble territories for the site.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxableTerritory"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxableTerritory"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxableTerritory"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "sitesettings_GeneralSettings"
        ],
        "summary": "Adds Taxable Territory",
        "description": "Creates taxble territories for the site.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxableTerritory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxableTerritory"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxableTerritory"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaxableTerritory"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sitesettings_GeneralSettings"
        ],
        "summary": "Update Taxable Territories",
        "description": "Updates taxble territories for the site.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaxableTerritory"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxableTerritory"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxableTerritory"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxableTerritory"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/commerce/settings/inventory/inventorySettings": {
      "get": {
        "tags": [
          "sitesettings_InventorySettings"
        ],
        "summary": "Get Inventory Settings",
        "description": "Retrieves existing inventory settings for the site which contain inventory export job settings.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySettings"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "sitesettings_InventorySettings"
        ],
        "summary": "Create Inventory Settings",
        "description": "Creates inventory settings for the site",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventorySettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sitesettings_InventorySettings"
        ],
        "summary": "Update Inventory Settings",
        "description": "Modifies existing inventory settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventorySettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySettings"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/settings/return/returnsettings": {
      "get": {
        "tags": [
          "sitesettings_ReturnSettings"
        ],
        "summary": "Get Return Settings",
        "description": "Retrieves return settings which includes return processing fee, return shipping location \r\nand return label creation on fulfillment",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnSettings"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "sitesettings_ReturnSettings"
        ],
        "summary": "Create Return Settings",
        "description": "Creates return settings which includes return processing fee, return shipping location \r\nand return label creation on fulfillment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReturnSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sitesettings_ReturnSettings"
        ],
        "summary": "Update Return Settings",
        "description": "Modifies existing fulfillment settings which includes return processing fee, return shipping location \r\nand return label creation on fulfillment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReturnSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnSettings"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/settings/shipping": {
      "get": {
        "tags": [
          "sitesettings_ShippingSettings"
        ],
        "summary": "Get Site Shipping Settings",
        "description": "Retrievs site's current shipping settings including information about the active shipping rate provider,\r\nreturn address, shipping methods, and which countries that you can ship to.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteShippingSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteShippingSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteShippingSettings"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/settings/shipping/orderhandlingfee": {
      "get": {
        "tags": [
          "sitesettings_ShippingSettings"
        ],
        "summary": "Get Order Handling Fee",
        "description": "OBSOLETE: Handling fees are now defined via shipping admin \r\nRetrieves the site's shipping handling fee.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteShippingHandlingFee"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteShippingHandlingFee"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteShippingHandlingFee"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "sitesettings_ShippingSettings"
        ],
        "summary": "Creates the site's order handling fee as it appears in shipping settings. Allows you to add the return address in shipping settings without modifying any other settings.",
        "description": "OBSOLETE: Handling fees are now defined via shipping admin \r\nCreates site's shipping handling fee.",
        "requestBody": {
          "description": "New order handling fee to create. Required properties: Amount.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteShippingHandlingFee"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteShippingHandlingFee"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteShippingHandlingFee"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteShippingHandlingFee"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": [
          "sitesettings_ShippingSettings"
        ],
        "summary": "Updates the site's shipping return address as it appears in shipping settings. Allows you to update the address in shipping settings without modifying any other settings.",
        "description": "OBSOLETE: Handling fees are now defined via shipping admin \r\nUpdates the site's shipping handling fee.",
        "requestBody": {
          "description": "Properties of the site's order handling fee. Required properties: Amount.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteShippingHandlingFee"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteShippingHandlingFee"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteShippingHandlingFee"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteShippingHandlingFee"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/commerce/settings/subscription/subscriptionsettings": {
      "get": {
        "tags": [
          "sitesettings_SubscriptionSettings"
        ],
        "summary": "Retrieves existing subscription settings",
        "description": "Retrieves existing subscription settings for a site",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSettings"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "sitesettings_SubscriptionSettings"
        ],
        "summary": "Create subscription settings",
        "description": "Creates new subscription settings for a site",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sitesettings_SubscriptionSettings"
        ],
        "summary": "Update Subscription Settings",
        "description": "Modifies existing subscription settings for a site",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSettings"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/catalog/admin/searchSchema/fieldTypes/{language}": {
      "get": {
        "tags": [
          "solrschemamanager_FieldTypeDefinition"
        ],
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldTypeDefinitionRepositoryEntry"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldTypeDefinitionRepositoryEntry"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldTypeDefinitionRepositoryEntry"
                  }
                }
              }
            }
          }
        },
        "summary": "Get Field Type Definitions",
        "description": "Get Field Type Definitions"
      }
    },
    "/commerce/catalog/admin/searchSchema/definition": {
      "get": {
        "tags": [
          "solrschemamanager_SchemaDefinition"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaDefinition"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaDefinition"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaDefinition"
                  }
                }
              }
            }
          }
        },
        "summary": "List Schema Definitions",
        "description": "List Schema Definitions"
      }
    },
    "/commerce/catalog/admin/searchSchema/definition/{language}": {
      "get": {
        "tags": [
          "solrschemamanager_SchemaDefinition"
        ],
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "published",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDefinition"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDefinition"
                }
              }
            }
          }
        },
        "summary": "Get Schema Definition",
        "description": "Get Schema Definition"
      },
      "put": {
        "tags": [
          "solrschemamanager_SchemaDefinition"
        ],
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaDefinition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDefinition"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaDefinition"
                }
              }
            }
          }
        },
        "summary": "Update Schema Definition",
        "description": "Update Schema Definition"
      }
    },
    "/commerce/catalog/admin/searchSchema/definition/{language}/revert": {
      "post": {
        "tags": [
          "solrschemamanager_SchemaDefinition"
        ],
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "summary": "Revert",
        "description": "Revert"
      }
    },
    "/commerce/catalog/admin/searchSchema/definition/{language}/publish": {
      "post": {
        "tags": [
          "solrschemamanager_SchemaDefinition"
        ],
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reindex",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "summary": "Publish",
        "description": "Publish"
      }
    },
    "/commerce/catalog/admin/searchSchema/synonyms/reload": {
      "post": {
        "tags": [
          "solrschemamanager_Synonym"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "summary": "Update Synonyms",
        "description": "Update Synonyms"
      }
    },
    "/commerce/catalog/admin/searchSchema/synonyms": {
      "get": {
        "tags": [
          "solrschemamanager_Synonym"
        ],
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "List Synonyms",
        "description": "List Synonyms"
      }
    },
    "/platform/tenants/{tenantId}": {
      "get": {
        "tags": [
          "tenant_Tenants"
        ],
        "summary": "Get Tenant by ID",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserTenant"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserTenant"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserTenant"
                }
              }
            }
          }
        },
        "description": "Get Tenant by ID"
      }
    }
  },
  "tags": [
    {
      "name": "adminuser_AdminGroup",
      "x-displayName": "AdminGroup"
    },
    {
      "name": "adminuser_AdminAuthTicket",
      "x-displayName": "AdminAuthTicket"
    },
    {
      "name": "adminuser_AdminUser",
      "x-displayName": "AdminUser"
    },
    {
      "name": "adminuser_DeveloperAdminAuthTicket",
      "x-displayName": "DeveloperAdminAuthTicket"
    },
    {
      "name": "adminuser_Role",
      "x-displayName": "Role"
    },
    {
      "name": "appdev_AppAuthTickets",
      "x-displayName": "AppAuthTickets"
    },
    {
      "name": "appdev_FilebasedPackage",
      "x-displayName": "FilebasedPackage"
    },
    {
      "name": "appdev_Package",
      "x-displayName": "Package"
    },
    {
      "name": "appdev_PublicApplication",
      "x-displayName": "PublicApplication"
    },
    {
      "name": "commerceruntime_Cart",
      "x-displayName": "Cart"
    },
    {
      "name": "commerceruntime_Channel",
      "x-displayName": "Channel"
    },
    {
      "name": "commerceruntime_ChannelGroup",
      "x-displayName": "ChannelGroup"
    },
    {
      "name": "commerceruntime_Checkout",
      "x-displayName": "Checkout"
    },
    {
      "name": "commerceruntime_Order",
      "x-displayName": "Order"
    },
    {
      "name": "commerceruntime_OrderAttributeDefinitions",
      "x-displayName": "OrderAttributeDefinitions"
    },
    {
      "name": "commerceruntime_Quote",
      "x-displayName": "Quote"
    },
    {
      "name": "commerceruntime_Return",
      "x-displayName": "Return"
    },
    {
      "name": "commerceruntime_Wishlist",
      "x-displayName": "Wishlist"
    },
    {
      "name": "content_Documents",
      "x-displayName": "Documents"
    },
    {
      "name": "content_DocumentList",
      "x-displayName": "DocumentList"
    },
    {
      "name": "content_Views",
      "x-displayName": "Views"
    },
    {
      "name": "content_DocumentListType",
      "x-displayName": "DocumentListType"
    },
    {
      "name": "content_DocumentPublishing",
      "x-displayName": "DocumentPublishing"
    },
    {
      "name": "content_DocumentPublishSet",
      "x-displayName": "DocumentPublishSet"
    },
    {
      "name": "content_DocumentType",
      "x-displayName": "DocumentType"
    },
    {
      "name": "content_DocumentPropertyType",
      "x-displayName": "DocumentPropertyType"
    },
    {
      "name": "customer_CustomerAccountAttributeDefinitions",
      "x-displayName": "CustomerAccountAttributeDefinitions"
    },
    {
      "name": "customer_AddressValidation",
      "x-displayName": "AddressValidation"
    },
    {
      "name": "customer_StorefrontAuthTicket",
      "x-displayName": "StorefrontAuthTicket"
    },
    {
      "name": "customer_B2BAccount",
      "x-displayName": "B2BAccount"
    },
    {
      "name": "customer_B2BContact",
      "x-displayName": "B2BContact"
    },
    {
      "name": "customer_Credit",
      "x-displayName": "Credit"
    },
    {
      "name": "customer_CustomerAccount",
      "x-displayName": "CustomerAccount"
    },
    {
      "name": "customer_CustomerAttributeDefinition",
      "x-displayName": "CustomerAttributeDefinition"
    },
    {
      "name": "customer_CustomerSegment",
      "x-displayName": "CustomerSegment"
    },
    {
      "name": "customer_CustomerSet",
      "x-displayName": "CustomerSet"
    },
    {
      "name": "customer_CustomerVisit",
      "x-displayName": "CustomerVisit"
    },
    {
      "name": "customer_InStockNotificationSubscription",
      "x-displayName": "InStockNotificationSubscription"
    },
    {
      "name": "event_Event",
      "x-displayName": "Event"
    },
    {
      "name": "event_Subscription",
      "x-displayName": "Subscription"
    },
    {
      "name": "fulfillment_CustomerSurvey",
      "description": "The Customer Survey API",
      "x-displayName": "CustomerSurvey"
    },
    {
      "name": "fulfillment_FulfillmentStorefront",
      "description": "The Fulfillment Storefront API",
      "x-displayName": "FulfillmentStorefront"
    },
    {
      "name": "fulfillment_FulfillmentWorkflow",
      "description": "The Fulfillment Workflow API",
      "x-displayName": "FulfillmentWorkflow"
    },
    {
      "name": "fulfillment_PickWave",
      "description": "The Pick Wave API",
      "x-displayName": "PickWave"
    },
    {
      "name": "fulfillment_Rendition",
      "description": "The Rendition API",
      "x-displayName": "Rendition"
    },
    {
      "name": "fulfillment_Shipment",
      "description": "The Shipment API",
      "x-displayName": "Shipment"
    },
    {
      "name": "fulfillment_ShipmentAttributes",
      "description": "The Shipment Attributes API",
      "x-displayName": "ShipmentAttributes"
    },
    {
      "name": "fulfillment_ShipmentData",
      "description": "The Shipment Data API",
      "x-displayName": "ShipmentData"
    },
    {
      "name": "fulfillment_ShipmentPackages",
      "description": "The Shipment Packages API",
      "x-displayName": "ShipmentPackages"
    },
    {
      "name": "fulfillment_ShippingManifest",
      "description": "The Shipping Manifest API",
      "x-displayName": "ShippingManifest"
    },
    {
      "name": "fulfillment_ShippingNotification",
      "description": "The Shipping Notification API",
      "x-displayName": "ShippingNotification"
    },
    {
      "name": "fulfillment_Manifest",
      "x-displayName": "Manifest"
    },
    {
      "name": "fulfillment_Storefront",
      "x-displayName": "Storefront"
    },
    {
      "name": "fulfillment_WorkflowProcess",
      "x-displayName": "WorkflowProcess"
    },
    {
      "name": "inventory_ExportInventory",
      "x-displayName": "ExportInventory"
    },
    {
      "name": "inventory_InventoryFetchFileConfig",
      "x-displayName": "InventoryFetchFileConfig"
    },
    {
      "name": "inventory_ModifyInventory",
      "x-displayName": "ModifyInventory"
    },
    {
      "name": "inventory_InventoryTag",
      "x-displayName": "InventoryTag"
    },
    {
      "name": "inventory_InventoryTagCategory",
      "x-displayName": "InventoryTagCategory"
    },
    {
      "name": "inventory_InventoryAllocation",
      "x-displayName": "InventoryAllocation"
    },
    {
      "name": "inventory_Inventory",
      "x-displayName": "Inventory"
    },
    {
      "name": "inventory_InventoryJob",
      "x-displayName": "InventoryJob"
    },
    {
      "name": "location_LocationAdmin",
      "x-displayName": "LocationAdmin"
    },
    {
      "name": "location_LocationAttributeDefinitions",
      "x-displayName": "LocationAttributeDefinitions"
    },
    {
      "name": "location_LocationGroup",
      "x-displayName": "LocationGroup"
    },
    {
      "name": "location_LocationGroupConfiguration",
      "x-displayName": "LocationGroupConfiguration"
    },
    {
      "name": "location_Location",
      "x-displayName": "Location"
    },
    {
      "name": "location_LocationSettings",
      "x-displayName": "LocationSettings"
    },
    {
      "name": "location_LocationType",
      "x-displayName": "LocationType"
    },
    {
      "name": "mzdb_Entities",
      "x-displayName": "Entities"
    },
    {
      "name": "mzdb_EntityContainers",
      "x-displayName": "EntityContainers"
    },
    {
      "name": "mzdb_EntityLists",
      "x-displayName": "EntityLists"
    },
    {
      "name": "mzdb_ListViews",
      "x-displayName": "ListViews"
    },
    {
      "description": "OrderRoutingAfterAction",
      "name": "orderrouting_OrderRoutingAfterAction",
      "x-displayName": "OrderRoutingAfterAction"
    },
    {
      "description": "OrderRoutingDataList",
      "name": "orderrouting_OrderRoutingDataList",
      "x-displayName": "OrderRoutingDataList"
    },
    {
      "description": "OrderRoutingEnvironment",
      "name": "orderrouting_OrderRoutingEnvironment",
      "x-displayName": "OrderRoutingEnvironment"
    },
    {
      "description": "OrderRoutingFilter",
      "name": "orderrouting_OrderRoutingFilter",
      "x-displayName": "OrderRoutingFilter"
    },
    {
      "description": "OrderRoutingGroup",
      "name": "orderrouting_OrderRoutingGroup",
      "x-displayName": "OrderRoutingGroup"
    },
    {
      "description": "OrderRoutingLocation",
      "name": "orderrouting_OrderRoutingLocation",
      "x-displayName": "OrderRoutingLocation"
    },
    {
      "description": "Routing",
      "name": "orderrouting_Routing",
      "x-displayName": "Routing"
    },
    {
      "description": "OrderRoutingSettings",
      "name": "orderrouting_OrderRoutingSettings",
      "x-displayName": "OrderRoutingSettings"
    },
    {
      "description": "OrderRoutingSite",
      "name": "orderrouting_OrderRoutingSite",
      "x-displayName": "OrderRoutingSite"
    },
    {
      "description": "OrderRoutingSort",
      "name": "orderrouting_OrderRoutingSort",
      "x-displayName": "OrderRoutingSort"
    },
    {
      "description": "OrderRoutingTenant",
      "name": "orderrouting_OrderRoutingTenant",
      "x-displayName": "OrderRoutingTenant"
    },
    {
      "name": "productadmin_ProductAttributes",
      "x-displayName": "ProductAttributes"
    },
    {
      "name": "productadmin_Categories",
      "x-displayName": "Categories"
    },
    {
      "name": "productadmin_CouponSets",
      "x-displayName": "CouponSets"
    },
    {
      "name": "productadmin_Currency",
      "x-displayName": "Currency"
    },
    {
      "name": "productadmin_Discounts",
      "x-displayName": "Discounts"
    },
    {
      "name": "productadmin_DiscountSettings",
      "x-displayName": "DiscountSettings"
    },
    {
      "name": "productadmin_Facets",
      "x-displayName": "Facets"
    },
    {
      "name": "productadmin_MasterCatalogPublishSettings",
      "x-displayName": "MasterCatalogPublishSettings"
    },
    {
      "name": "productadmin_PriceLists",
      "x-displayName": "PriceLists"
    },
    {
      "name": "productadmin_PriceListEntries",
      "x-displayName": "PriceListEntries"
    },
    {
      "name": "productadmin_Products",
      "x-displayName": "Products"
    },
    {
      "name": "productadmin_ProductVariations",
      "x-displayName": "ProductVariations"
    },
    {
      "name": "productadmin_ProductExtras",
      "x-displayName": "ProductExtras"
    },
    {
      "name": "productadmin_ProductOptions",
      "x-displayName": "ProductOptions"
    },
    {
      "name": "productadmin_ProductProperties",
      "x-displayName": "ProductProperties"
    },
    {
      "name": "productadmin_ProductQuickEdit",
      "x-displayName": "ProductQuickEdit"
    },
    {
      "name": "productadmin_ProductSortDefinitions",
      "x-displayName": "ProductSortDefinitions"
    },
    {
      "name": "productadmin_ProductTypes",
      "x-displayName": "ProductTypes"
    },
    {
      "name": "productadmin_ProductPublishing",
      "x-displayName": "ProductPublishing"
    },
    {
      "name": "productadmin_SearchSynonyms",
      "x-displayName": "SearchSynonyms"
    },
    {
      "name": "productadmin_SearchTuningRules",
      "x-displayName": "SearchTuningRules"
    },
    {
      "name": "productadmin_SearchCampaignSettings",
      "x-displayName": "SearchCampaignSettings"
    },
    {
      "name": "productadmin_SearchCategorySuggestSettings",
      "x-displayName": "SearchCategorySuggestSettings"
    },
    {
      "name": "productadmin_SearchListingSettings",
      "x-displayName": "SearchListingSettings"
    },
    {
      "name": "productadmin_SearchProductSuggestSettings",
      "x-displayName": "SearchProductSuggestSettings"
    },
    {
      "name": "productadmin_SearchRedirect",
      "x-displayName": "SearchRedirect"
    },
    {
      "name": "productadmin_SearchSettings",
      "x-displayName": "SearchSettings"
    },
    {
      "name": "productadmin_Tag",
      "x-displayName": "Tag"
    },
    {
      "name": "productruntime_Campaigns",
      "x-displayName": "Campaigns"
    },
    {
      "name": "productruntime_Currencies",
      "x-displayName": "Currencies"
    },
    {
      "name": "productruntime_PriceLists",
      "x-displayName": "PriceLists"
    },
    {
      "name": "productruntime_Categories",
      "x-displayName": "Categories"
    },
    {
      "name": "productruntime_Products",
      "x-displayName": "Products"
    },
    {
      "name": "productruntime_ProductSearch",
      "x-displayName": "ProductSearch"
    },
    {
      "name": "productruntime_SearchPreview",
      "x-displayName": "SearchPreview"
    },
    {
      "name": "productruntime_SearchRedirect",
      "x-displayName": "SearchRedirect"
    },
    {
      "name": "sitesettings_CartSettings",
      "x-displayName": "CartSettings"
    },
    {
      "name": "sitesettings_CheckoutSettings",
      "x-displayName": "CheckoutSettings"
    },
    {
      "name": "sitesettings_FulfillmentSettings",
      "x-displayName": "FulfillmentSettings"
    },
    {
      "name": "sitesettings_GeneralSettings",
      "x-displayName": "GeneralSettings"
    },
    {
      "name": "sitesettings_InventorySettings",
      "x-displayName": "InventorySettings"
    },
    {
      "name": "sitesettings_ReturnSettings",
      "x-displayName": "ReturnSettings"
    },
    {
      "name": "sitesettings_ShippingSettings",
      "x-displayName": "ShippingSettings"
    },
    {
      "name": "sitesettings_SubscriptionSettings",
      "x-displayName": "SubscriptionSettings"
    },
    {
      "name": "solrschemamanager_FieldTypeDefinition",
      "x-displayName": "FieldTypeDefinition"
    },
    {
      "name": "solrschemamanager_SchemaDefinition",
      "x-displayName": "SchemaDefinition"
    },
    {
      "name": "solrschemamanager_Synonym",
      "x-displayName": "Synonym"
    },
    {
      "name": "tenant_Tenants",
      "x-displayName": "Tenants"
    }
  ],
  "x-tagGroups": [
    {
      "name": "adminuser",
      "tags": [
        "adminuser_AdminGroup",
        "adminuser_AdminAuthTicket",
        "adminuser_AdminUser",
        "adminuser_DeveloperAdminAuthTicket",
        "adminuser_Role"
      ]
    },
    {
      "name": "appdev",
      "tags": [
        "appdev_AppAuthTickets",
        "appdev_FilebasedPackage",
        "appdev_Package",
        "appdev_PublicApplication"
      ]
    },
    {
      "name": "commerceruntime",
      "tags": [
        "commerceruntime_Cart",
        "commerceruntime_Channel",
        "commerceruntime_ChannelGroup",
        "commerceruntime_Checkout",
        "commerceruntime_Order",
        "commerceruntime_OrderAttributeDefinitions",
        "commerceruntime_Quote",
        "commerceruntime_Return",
        "commerceruntime_Wishlist"
      ]
    },
    {
      "name": "content",
      "tags": [
        "content_Documents",
        "content_DocumentList",
        "content_Views",
        "content_DocumentListType",
        "content_DocumentPublishing",
        "content_DocumentPublishSet",
        "content_DocumentType",
        "content_DocumentPropertyType"
      ]
    },
    {
      "name": "customer",
      "tags": [
        "customer_CustomerAccountAttributeDefinitions",
        "customer_AddressValidation",
        "customer_StorefrontAuthTicket",
        "customer_B2BAccount",
        "customer_B2BContact",
        "customer_Credit",
        "customer_CustomerAccount",
        "customer_CustomerAttributeDefinition",
        "customer_CustomerSegment",
        "customer_CustomerSet",
        "customer_CustomerVisit",
        "customer_InStockNotificationSubscription"
      ]
    },
    {
      "name": "event",
      "tags": [
        "event_Event",
        "event_Subscription"
      ]
    },
    {
      "name": "fulfillment",
      "tags": [
        "fulfillment_CustomerSurvey",
        "fulfillment_FulfillmentStorefront",
        "fulfillment_FulfillmentWorkflow",
        "fulfillment_PickWave",
        "fulfillment_Rendition",
        "fulfillment_Shipment",
        "fulfillment_ShipmentAttributes",
        "fulfillment_ShipmentData",
        "fulfillment_ShipmentPackages",
        "fulfillment_ShippingManifest",
        "fulfillment_ShippingNotification",
        "fulfillment_Manifest",
        "fulfillment_Storefront",
        "fulfillment_WorkflowProcess"
      ],
      "description": "OpenAPI Spec for Kibo Fulfillment Service"
    },
    {
      "name": "inventory",
      "tags": [
        "inventory_ExportInventory",
        "inventory_InventoryFetchFileConfig",
        "inventory_ModifyInventory",
        "inventory_InventoryTag",
        "inventory_InventoryTagCategory",
        "inventory_InventoryAllocation",
        "inventory_Inventory",
        "inventory_InventoryJob"
      ]
    },
    {
      "name": "location",
      "tags": [
        "location_LocationAdmin",
        "location_LocationAttributeDefinitions",
        "location_LocationGroup",
        "location_LocationGroupConfiguration",
        "location_Location",
        "location_LocationSettings",
        "location_LocationType"
      ]
    },
    {
      "name": "mzdb",
      "tags": [
        "mzdb_Entities",
        "mzdb_EntityContainers",
        "mzdb_EntityLists",
        "mzdb_ListViews"
      ]
    },
    {
      "name": "orderrouting",
      "tags": [
        "orderrouting_OrderRoutingAfterAction",
        "orderrouting_OrderRoutingDataList",
        "orderrouting_OrderRoutingEnvironment",
        "orderrouting_OrderRoutingFilter",
        "orderrouting_OrderRoutingGroup",
        "orderrouting_OrderRoutingLocation",
        "orderrouting_Routing",
        "orderrouting_OrderRoutingSettings",
        "orderrouting_OrderRoutingSite",
        "orderrouting_OrderRoutingSort",
        "orderrouting_OrderRoutingTenant"
      ],
      "description": "Api Documentation"
    },
    {
      "name": "productadmin",
      "tags": [
        "productadmin_ProductAttributes",
        "productadmin_Categories",
        "productadmin_CouponSets",
        "productadmin_Currency",
        "productadmin_Discounts",
        "productadmin_DiscountSettings",
        "productadmin_Facets",
        "productadmin_MasterCatalogPublishSettings",
        "productadmin_PriceLists",
        "productadmin_PriceListEntries",
        "productadmin_Products",
        "productadmin_ProductVariations",
        "productadmin_ProductExtras",
        "productadmin_ProductOptions",
        "productadmin_ProductProperties",
        "productadmin_ProductQuickEdit",
        "productadmin_ProductSortDefinitions",
        "productadmin_ProductTypes",
        "productadmin_ProductPublishing",
        "productadmin_SearchSynonyms",
        "productadmin_SearchTuningRules",
        "productadmin_SearchCampaignSettings",
        "productadmin_SearchCategorySuggestSettings",
        "productadmin_SearchListingSettings",
        "productadmin_SearchProductSuggestSettings",
        "productadmin_SearchRedirect",
        "productadmin_SearchSettings",
        "productadmin_Tag"
      ]
    },
    {
      "name": "productruntime",
      "tags": [
        "productruntime_Campaigns",
        "productruntime_Currencies",
        "productruntime_PriceLists",
        "productruntime_Categories",
        "productruntime_Products",
        "productruntime_ProductSearch",
        "productruntime_SearchPreview",
        "productruntime_SearchRedirect"
      ]
    },
    {
      "name": "sitesettings",
      "tags": [
        "sitesettings_CartSettings",
        "sitesettings_CheckoutSettings",
        "sitesettings_FulfillmentSettings",
        "sitesettings_GeneralSettings",
        "sitesettings_InventorySettings",
        "sitesettings_ReturnSettings",
        "sitesettings_ShippingSettings",
        "sitesettings_SubscriptionSettings"
      ]
    },
    {
      "name": "solrschemamanager",
      "tags": [
        "solrschemamanager_FieldTypeDefinition",
        "solrschemamanager_SchemaDefinition",
        "solrschemamanager_Synonym"
      ]
    },
    {
      "name": "tenant",
      "tags": [
        "tenant_Tenants"
      ]
    }
  ],
  "components": {
    "schemas": {
      "UserSystemData": {
        "type": "object",
        "properties": {
          "isPasswordChangeRequired": {
            "type": "boolean"
          },
          "lastPasswordChangeOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isLocked": {
            "type": "boolean"
          },
          "lastLockedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "failedLoginAttemptCount": {
            "type": "integer",
            "format": "int32"
          },
          "remainingLoginAttempts": {
            "type": "integer",
            "format": "int32"
          },
          "firstFailedLoginAttemptOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastLoginOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserScope": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdminUserAuditInfo": {
        "type": "object",
        "properties": {
          "updateDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updateBy": {
            "type": "string",
            "nullable": true
          },
          "createBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserRole": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "assignedInScope": {
            "$ref": "#/components/schemas/UserScope"
          },
          "roleId": {
            "type": "integer",
            "format": "int32"
          },
          "roleName": {
            "type": "string",
            "nullable": true
          },
          "roleTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "localeCode": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "optInToEmail": {
            "type": "boolean",
            "nullable": true
          },
          "optInToTextMessage": {
            "type": "boolean",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "systemData": {
            "$ref": "#/components/schemas/UserSystemData"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRole"
            },
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "identityProviderId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdminGroup": {
        "type": "object",
        "properties": {
          "groupCode": {
            "type": "string",
            "description": "User Group Id",
            "nullable": true
          },
          "scopeTypeId": {
            "type": "integer",
            "description": "Scope Type Id",
            "format": "int32"
          },
          "scopeId": {
            "type": "integer",
            "description": "Scope Id",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Human-readable Name of the group",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Human-readable description of the group",
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "description": "Users associate with a group",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "AdminGroupCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminGroup"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BaseTenantEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TenantAttribute": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          },
          "createBy": {
            "type": "string",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "updateBy": {
            "type": "string",
            "nullable": true
          },
          "updateDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Site": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTenantEntity"
          }
        ],
        "properties": {
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "catalogId": {
            "type": "integer",
            "format": "int32"
          },
          "localeCode": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "domain": {
            "type": "string",
            "nullable": true
          },
          "primaryCustomDomain": {
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantAttribute"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Catalog": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTenantEntity"
          }
        ],
        "properties": {
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "masterCatalogId": {
            "type": "integer",
            "format": "int32"
          },
          "defaultLocaleCode": {
            "type": "string",
            "nullable": true
          },
          "defaultCurrencyCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdminUserMasterCatalog": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTenantEntity"
          }
        ],
        "properties": {
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "defaultLocaleCode": {
            "type": "string",
            "nullable": true
          },
          "defaultCurrencyCode": {
            "type": "string",
            "nullable": true
          },
          "catalogs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Catalog"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Tenant": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTenantEntity"
          }
        ],
        "properties": {
          "isDevTenant": {
            "type": "boolean"
          },
          "sites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Site"
            },
            "nullable": true
          },
          "masterCatalogs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminUserMasterCatalog"
            },
            "nullable": true
          },
          "domain": {
            "type": "string",
            "nullable": true
          },
          "omsMerchantId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantAttribute"
            },
            "nullable": true
          },
          "isUnified": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TenantAdminUserAuthTicket": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserProfile"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "jwtAccessToken": {
            "type": "string",
            "nullable": true
          },
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "accessTokenExpiration": {
            "type": "string",
            "format": "date-time"
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "redirect": {
            "type": "string",
            "nullable": true
          },
          "refreshTokenExpiration": {
            "type": "string",
            "format": "date-time"
          },
          "tenant": {
            "$ref": "#/components/schemas/Tenant"
          },
          "availableTenants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tenant"
            },
            "nullable": true
          },
          "grantedBehaviors": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserAuthInfo": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TenantCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tenant"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdminUserUserRoleCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRole"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of UserRoles for given user."
      },
      "AdminUserPasswordInfo": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "description": "Old password.",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "description": "New password.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Old password and new password."
      },
      "ChangeUserPasswordInfo": {
        "type": "object",
        "properties": {
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdminUserResetPasswordInfo": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Email address of the user who is requesting a new password."
      },
      "DeveloperAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeveloperAdminUserAuthTicket": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserProfile"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "jwtAccessToken": {
            "type": "string",
            "nullable": true
          },
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "accessTokenExpiration": {
            "type": "string",
            "format": "date-time"
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "refreshTokenExpiration": {
            "type": "string",
            "format": "date-time"
          },
          "account": {
            "$ref": "#/components/schemas/DeveloperAccount"
          },
          "availableAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeveloperAccount"
            },
            "nullable": true
          },
          "grantedBehaviors": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Behavior": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "requiresBehaviorIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "validUserTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isPrivate": {
            "type": "boolean"
          },
          "systemRoles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Resource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Owner": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Role": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "isSystemRole": {
            "type": "boolean"
          },
          "behaviors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Behavior"
            },
            "nullable": true
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Resource"
            },
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userScope": {
            "$ref": "#/components/schemas/UserScope"
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Owner"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "CollectionOfRole": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RoleCollection": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionOfRole"
          }
        ],
        "additionalProperties": false
      },
      "AppAuthInfo": {
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "string",
            "nullable": true
          },
          "sharedSecret": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthTicket": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "accessTokenExpiration": {
            "type": "string",
            "format": "date-time"
          },
          "refreshTokenExpiration": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "OauthAuthRequest": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "nullable": true
          },
          "refresh_token": {
            "type": "string",
            "nullable": true
          },
          "grant_type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OAuthAccessTokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "nullable": true
          },
          "token_type": {
            "type": "string",
            "nullable": true
          },
          "expires_in": {
            "type": "integer",
            "format": "int32"
          },
          "refresh_token": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthTicketRequest": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "The refresh token for renewing the authorization.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Complex object to have the refresh token sent in the body intead of as clear text in the query string."
      },
      "StringStringIEnumerableKeyValuePair": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AppDevHttpContent": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StringStringIEnumerableKeyValuePair"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "HttpStatusCode": {
        "enum": [
          100,
          101,
          102,
          103,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          226,
          300,
          301,
          302,
          303,
          304,
          305,
          306,
          307,
          308,
          400,
          401,
          402,
          403,
          404,
          405,
          406,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          415,
          416,
          417,
          421,
          422,
          423,
          424,
          426,
          428,
          429,
          431,
          451,
          500,
          501,
          502,
          503,
          504,
          505,
          506,
          507,
          508,
          510,
          511
        ],
        "type": "integer",
        "format": "int32"
      },
      "HttpMethod": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AppDevHttpRequestMessage": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/AppDevHttpContent"
          },
          "method": {
            "$ref": "#/components/schemas/HttpMethod"
          },
          "requestUri": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StringStringIEnumerableKeyValuePair"
            },
            "nullable": true,
            "readOnly": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "HttpResponseMessage": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/AppDevHttpContent"
          },
          "statusCode": {
            "$ref": "#/components/schemas/HttpStatusCode"
          },
          "reasonPhrase": {
            "type": "string",
            "nullable": true
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StringStringIEnumerableKeyValuePair"
            },
            "nullable": true,
            "readOnly": true
          },
          "trailingHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StringStringIEnumerableKeyValuePair"
            },
            "nullable": true,
            "readOnly": true
          },
          "requestMessage": {
            "$ref": "#/components/schemas/AppDevHttpRequestMessage"
          },
          "isSuccessStatusCode": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationBehavior": {
        "type": "object",
        "properties": {
          "behaviorId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "packageId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "AppDevEvent": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "description": "Unique identifier of an Event record.",
            "format": "int32"
          },
          "eventName": {
            "type": "string",
            "description": "The name of the event.",
            "nullable": true
          },
          "eventCategory": {
            "type": "string",
            "description": "The category the event belongs to.",
            "nullable": true
          },
          "apiVersionNumber": {
            "type": "string",
            "description": "The Api Version Number which defines what events are available for a given API version.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes an event that a 3rd party developer can subscribe to."
      },
      "ApplicationSubscription": {
        "type": "object",
        "properties": {
          "applicationSubscriptionId": {
            "type": "integer",
            "description": "The unique identifier of an ApplicationVersionEvent record.",
            "format": "int32"
          },
          "applicationEndPoint": {
            "type": "string",
            "description": "The End Point where the event information will be sent to when the event is fired.",
            "nullable": true
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppDevEvent"
            },
            "description": "",
            "nullable": true
          },
          "packageId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "noCallback": {
            "type": "boolean",
            "description": ""
          }
        },
        "additionalProperties": false,
        "description": "Defines an event that an Application Version is subscribed to."
      },
      "ApplicationCapability": {
        "type": "object",
        "properties": {
          "applicationCapabilityId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "capabilityTypeContractId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "applicationEndPoint": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationCapabilityTypeId": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "packageId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ApplicationCapabilityDomainValue": {
        "type": "object",
        "properties": {
          "applicationCapabilityDomainValueId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "applicationCapabilityDomainId1": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "applicationCapabilityDomainId2": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "valueName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ApplicationCapabilityDomain": {
        "type": "object",
        "properties": {
          "applicationCapabilityDomainId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "applicationCapabilityTypeId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationCapabilityDomainValues1": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCapabilityDomainValue"
            },
            "description": "",
            "nullable": true
          },
          "applicationCapabilityDomainValues2": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCapabilityDomainValue"
            },
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ApplicationCapabilityType": {
        "type": "object",
        "properties": {
          "applicationCapabilityTypeId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "applicationId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "capabilityTypeId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "capabilityTypeName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "isImplemented": {
            "type": "boolean",
            "description": ""
          },
          "isInitializedByDefault": {
            "type": "boolean",
            "description": ""
          },
          "applicationCapabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCapability"
            },
            "description": "",
            "nullable": true
          },
          "applicationCapabilityDomains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCapabilityDomain"
            },
            "description": "",
            "nullable": true
          },
          "packageId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "AppDevAttribute": {
        "type": "object",
        "properties": {
          "attributeId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "fqn": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "sequence": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "vocabularyJson": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationAttributeId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "inputType": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "adminName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "vocabularyValues": {
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ApplicationAttribute": {
        "type": "object",
        "properties": {
          "subsystem": {
            "type": "string",
            "description": "Customer, Order, or Product",
            "nullable": true
          },
          "attributeJson": {
            "type": "string",
            "description": "json representation of attribute definitions",
            "nullable": true
          },
          "productTypeJson": {
            "type": "string",
            "description": "Will contain ProductTypeCollection if Product, else AttributeSet",
            "nullable": true
          },
          "isAppliedToBase": {
            "type": "boolean"
          },
          "sourceTenantId": {
            "type": "integer",
            "description": "Source Tenant Id",
            "format": "int32"
          },
          "sourceTenantName": {
            "type": "string",
            "description": "Source Tenant Name",
            "nullable": true
          },
          "attributeCodes": {
            "type": "string",
            "description": "Comma delimited list of attribute codes.",
            "nullable": true
          },
          "packageId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppDevAttribute"
            },
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Holds attribute definitions for AppVersion"
      },
      "ApplicationTransaction": {
        "type": "object",
        "properties": {
          "applicationTransactionId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "applicationId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "applicationEntitlementId": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "tenantId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "siteId": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "localeCode": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "isoCurrencyCode": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "transactionDate": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "transactionPrice": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "transactionTax": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "transactionTotal": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "orderNumber": {
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ApplicationEntitlement": {
        "type": "object",
        "properties": {
          "appKey": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationEntitlementId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "packageId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "applicationLicenseType": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "entitlementStatus": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "tenantId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "siteId": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "effectiveStartDate": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "effectiveEndDate": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "applicationTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationTransaction"
            },
            "description": "",
            "nullable": true
          },
          "applicationName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationVersion": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "installedByFirstName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "installedByLastName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "installedDate": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "packageName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "tenantName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationStatusId": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "devAccountId": {
            "type": "integer",
            "description": "Denotes which DevAccountId is the application installed in",
            "format": "int32"
          },
          "installedAppsApplicationId": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "appOwnerDevAccountId": {
            "type": "integer",
            "description": "Denotes the application owner dev account id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "AppDevPackage": {
        "type": "object",
        "properties": {
          "updateDate": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "applicationUpdateDate": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "applicationName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationTypeId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "applicationTypeName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "majorVersion": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "minorVersion": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "revision": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "sharedSecret": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationStatusId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "applicationStatusName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "apiVersion": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationDescription": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "themeEngineVersion": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "namespace": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "validApplicationStatusIdList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of Statuses that the application can move to during the application lifecycle.\r\nThis is based on what the current value of the ApplicatinStatusId is.",
            "nullable": true
          },
          "appSchemeVersion": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "appConfigUrl": {
            "type": "string",
            "description": "This will be used by the 3rd party developers to set a URL the intalled \r\napplications can call from the Tenant installation/",
            "nullable": true
          },
          "isReleasePackage": {
            "type": "boolean",
            "description": ""
          },
          "packageName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "packageDescription": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "dataNamespace": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "appId": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "applicationDetailId": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "isLocked": {
            "type": "boolean",
            "description": ""
          },
          "isDeleted": {
            "type": "boolean",
            "description": ""
          },
          "assetFileCount": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "packageGuid": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationStatus": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationBehaviors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationBehavior"
            },
            "description": "List of Application Behaviors that apply to this version of the application.",
            "nullable": true
          },
          "applicationSubscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationSubscription"
            },
            "description": "",
            "nullable": true
          },
          "applicationCapabilityTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCapabilityType"
            },
            "description": "",
            "nullable": true
          },
          "applicationAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationAttribute"
            },
            "description": "",
            "nullable": true
          },
          "applicationCapabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationCapability"
            },
            "description": "",
            "nullable": true
          },
          "applicationEntitlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationEntitlement"
            },
            "description": "",
            "nullable": true
          },
          "attributeNamespace": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "hasApplicationVersions": {
            "type": "boolean",
            "description": ""
          },
          "legacyNamespace": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "namespaceRegistryId": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "publishedParentThemeId": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "publishedParentSemanticVersion": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "semanticVersionRange": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "parentThemeName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "parentThemeAppKey": {
            "type": "string",
            "description": "The parent theme AppKey if this is a theme and \r\nthe theme extends a valid, published theme.",
            "nullable": true
          },
          "updateParentAppKey": {
            "type": "string",
            "description": "The AppKey is a runtime type.\r\nThis only applies for themes that inherit from another theme.\r\nIt shows the most current update available.",
            "nullable": true
          },
          "updateAvailable": {
            "type": "boolean",
            "description": "Whether or not there's a theme update."
          },
          "appKey": {
            "type": "string",
            "description": "App Key for the package in question.",
            "nullable": true
          },
          "updateParentThemeName": {
            "type": "string",
            "description": "This only applies for themes that inherit from another theme.\r\nIt shows the name of the most current update available.",
            "nullable": true
          },
          "updateParentThemeVersion": {
            "type": "string",
            "description": "This only applies for themes that inherit from another theme.\r\nIt shows the version of the most current update available.",
            "nullable": true
          },
          "applicationOwnerDevAccountId": {
            "type": "integer",
            "description": "This is the DevAccountId that owns the application",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "AppVersion": {
        "type": "object",
        "properties": {
          "majorVersion": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "minorVersion": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "revision": {
            "type": "integer",
            "description": "",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ApplicationSummary": {
        "type": "object",
        "properties": {
          "parentName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "applicationTypeId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "releasePackageId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "releasePackageName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationNamespace": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationVersion": {
            "$ref": "#/components/schemas/AppVersion"
          },
          "applicationStatusId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "appId": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "applicationStatusName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "hasVersions": {
            "type": "boolean",
            "description": ""
          },
          "appSchemeVersion": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "appKey": {
            "type": "string",
            "description": "The AppKey is a runtime type.",
            "nullable": true
          },
          "parentAppKey": {
            "type": "string",
            "description": "The AppKey is a runtime type.\r\nThis only applies for themes that inherit from another theme.",
            "nullable": true
          },
          "updateParentAppKey": {
            "type": "string",
            "description": "The AppKey is a runtime type.\r\nThis only applies for themes that inherit from another theme.\r\nIt shows the most current update available.",
            "nullable": true
          },
          "updateAvailable": {
            "type": "boolean",
            "description": ""
          }
        },
        "additionalProperties": false
      },
      "ApplicationSummaryCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of products returned as a whole. A collection is not paged."
      },
      "PackageCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppDevPackage"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "PackageSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Package Id",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Package Name",
            "nullable": true
          },
          "applicationName": {
            "type": "string",
            "description": "Application Name",
            "nullable": true
          },
          "applicationTypeId": {
            "type": "integer",
            "description": "Application Type Id",
            "format": "int32"
          },
          "majorVersion": {
            "type": "integer",
            "description": "Application Major Version",
            "format": "int32"
          },
          "minorVersion": {
            "type": "integer",
            "description": "Application Minor Version",
            "format": "int32"
          },
          "revision": {
            "type": "integer",
            "description": "Application Revision",
            "format": "int32"
          },
          "isLocked": {
            "type": "boolean",
            "description": "IsLocked"
          },
          "applicationId": {
            "type": "integer",
            "description": "ApplicationId",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "PackageSummaryCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "PackageRequest": {
        "type": "object",
        "properties": {
          "appKey": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "parentThemeAppKey": {
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "FileMetadata": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "checkSum": {
            "type": "string",
            "nullable": true
          },
          "sizeInBytes": {
            "type": "integer",
            "format": "int64"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "RenameInfo": {
        "type": "object",
        "properties": {
          "oldFullPath": {
            "type": "string",
            "nullable": true
          },
          "newFullPath": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FolderMetadata": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "fullPath": {
            "type": "string",
            "nullable": true
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileMetadata"
            },
            "nullable": true
          },
          "subFolders": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationVersionsCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PackageNamesCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CartSummary": {
        "type": "object",
        "properties": {
          "itemCount": {
            "type": "integer",
            "description": "Number of items in the active cart.",
            "format": "int32",
            "nullable": true
          },
          "totalQuantity": {
            "type": "integer",
            "description": "Total quantity of all items in the cart",
            "format": "int32",
            "nullable": true
          },
          "total": {
            "type": "number",
            "description": "Total cost of items in the active cart.",
            "format": "double",
            "nullable": true
          },
          "isExpired": {
            "type": "boolean",
            "description": "If true, the cart has reached its expiration date (Cart.ExpirationDate) and considered abandoned. \r\nCarts of anonymous shoppers expire after 14 days of inactivity.",
            "nullable": true
          },
          "hasActiveCart": {
            "type": "boolean",
            "description": "If true, the cart is active. A shopper has added an item to a cart.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Cart summary, which is the number of items in the active cart, total cost of items in the cart, and whether the cart has expired."
      },
      "CommerceRuntimePhone": {
        "type": "object",
        "properties": {
          "home": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "work": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeAddress": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "address3": {
            "type": "string",
            "nullable": true
          },
          "address4": {
            "type": "string",
            "nullable": true
          },
          "cityOrTown": {
            "type": "string",
            "nullable": true
          },
          "stateOrProvince": {
            "type": "string",
            "nullable": true
          },
          "postalOrZipCode": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "addressType": {
            "type": "string",
            "nullable": true
          },
          "isValidated": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeContact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "middleNameOrInitial": {
            "type": "string",
            "nullable": true
          },
          "lastNameOrSurname": {
            "type": "string",
            "nullable": true
          },
          "companyOrOrganization": {
            "type": "string",
            "nullable": true
          },
          "phoneNumbers": {
            "$ref": "#/components/schemas/CommerceRuntimePhone"
          },
          "address": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          }
        },
        "additionalProperties": false
      },
      "FulfillmentInfo": {
        "type": "object",
        "properties": {
          "fulfillmentContact": {
            "$ref": "#/components/schemas/CommerceRuntimeContact"
          },
          "isDestinationCommercial": {
            "type": "boolean",
            "description": "Indicates that the destination is commercial",
            "nullable": true
          },
          "shippingMethodCode": {
            "type": "string",
            "description": "Code that uniquely identifies the shipping method such as \"Ground,\" \"Overnight,\" or \"Digital.\"\r\nThe site's shipping settings lists the valid shipping methods specified for this site.",
            "nullable": true
          },
          "shippingMethodName": {
            "type": "string",
            "description": "Readable name of the shipping method",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data originated by the shipping service.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Shipment information, which includes the shipping address, price, estimated delivery date, tracking information, method (for example, Ground, Overnight, or Pick-up), \r\ncarrier (for example, USPS, UPS, FedEx), and current status (for example, Not Shipped, In Transit, Delayed, or Returned To Sender)."
      },
      "CommerceRuntimeDiscount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the discount.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the discount in the language specified by LocaleCode.",
            "nullable": true
          },
          "itemIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of discounts for each order item.",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Date when the discount expires. Default is null (no expiration date).",
            "format": "date-time",
            "nullable": true
          },
          "hasMultipleTargetProducts": {
            "type": "boolean",
            "description": "Indicates that the discount targets more than a product.  Used\r\nprimarily for BoGa discounts with multiple targets."
          }
        },
        "additionalProperties": false,
        "description": "Discounts that apply to the order, if any. For example, when the \r\nsubtotal of the order exceeds a certain amount, or for free shipping."
      },
      "CommerceRuntimeAppliedDiscount": {
        "type": "object",
        "properties": {
          "impact": {
            "type": "number",
            "description": "Value of the discount applied. This is a negative number to be subtracted from the original price to get the final price.",
            "format": "double",
            "nullable": true
          },
          "discount": {
            "$ref": "#/components/schemas/CommerceRuntimeDiscount"
          },
          "couponCode": {
            "type": "string",
            "description": "Code of the coupon associated with the discount if a coupon code is required to get the discount.",
            "nullable": true
          },
          "excluded": {
            "type": "boolean",
            "description": "Determines whether or not this discount is set up to be ignored by the pricing runtime.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Discount applied to the order, which is a negative number to be subtracted from the original price to get the final price. \r\nIf multiple discounts for the order exist, this is the value most advantageous to the shopper."
      },
      "SuggestedDiscount": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "nullable": true
          },
          "autoAdd": {
            "type": "boolean"
          },
          "discountId": {
            "type": "integer",
            "format": "int32"
          },
          "hasMultipleProducts": {
            "type": "boolean"
          },
          "hasOptions": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeChangeMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the  message. System-supplied. Read-only.",
            "nullable": true
          },
          "correlationId": {
            "type": "string",
            "description": "Correlation Id",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "User Id that identifies the user that performed the related change",
            "nullable": true
          },
          "userFirstName": {
            "type": "string",
            "description": "User First Name",
            "nullable": true
          },
          "userLastName": {
            "type": "string",
            "description": "User Last Name",
            "nullable": true
          },
          "userScopeType": {
            "type": "string",
            "description": "User Type (e.g. Shopper, Admin, etc.)",
            "nullable": true
          },
          "appId": {
            "type": "string",
            "description": "App Id that identifies the user that performed the related change",
            "nullable": true
          },
          "appKey": {
            "type": "string",
            "description": "App Key",
            "nullable": true
          },
          "appName": {
            "type": "string",
            "description": "App Name",
            "nullable": true
          },
          "subjectType": {
            "type": "string",
            "description": "Subject of the message, for example, \"Product.\" System-supplied. Read-only.",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "Indicates if the message is related to a success or failure.",
            "nullable": true
          },
          "identifier": {
            "type": "string",
            "description": "Unique identifier to what the message pertains, which can be a cart item, cart or another generic entity. System-supplied. Read-only.",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "description": "Text on the subject line of the message, for example, the product name. System-supplied. Read-only.",
            "nullable": true
          },
          "verb": {
            "type": "string",
            "description": "Action applicable to the message. This can be \"Increased,\" when the product price has increased, \"Decreased,\" when the \r\nproduct price has decreased, and \"Invalidated,\" when the product is no longer available. System-supplied. Read-only.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Human readable message. System-supplied. Read-only.",
            "nullable": true
          },
          "metadata": {
            "description": "Data. This property will be a JSON array that will contain 0-N items, when there is 1 item it will still be an array containing only one item. System-supplied. Read-only.",
            "nullable": true
          },
          "oldValue": {
            "type": "string",
            "description": "Original price of the item. System-supplied. Read-only.",
            "nullable": true,
            "deprecated": true
          },
          "newValue": {
            "type": "string",
            "description": "Current price of the item. System-supplied. Read-only.",
            "nullable": true,
            "deprecated": true
          },
          "amount": {
            "type": "number",
            "description": "Monetary amount that pertains to the change if applicable",
            "format": "double",
            "nullable": true,
            "deprecated": true
          },
          "createDate": {
            "type": "string",
            "description": "When the message was created. System-supplied. Read-only.",
            "format": "date-time",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {},
            "description": "Additional Data. This property will be a Dictionary of objects.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A message displayed by the system based on the last  action, for example, when a product price has changed. System-supplied and read-only."
      },
      "ExtendedProperty": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeThresholdMessage": {
        "type": "object",
        "properties": {
          "discountId": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "thresholdValue": {
            "type": "number",
            "format": "double"
          },
          "showOnCheckout": {
            "type": "boolean"
          },
          "showInCart": {
            "type": "boolean"
          },
          "requiresCouponCode": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CommerceAggregate": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier of the shopper who created the cart.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the CommerceAggregate object (e.g. order, cart, wishlist, etc.).",
            "nullable": true
          },
          "tenantId": {
            "type": "integer",
            "description": "Unique identifier of the Tenant.",
            "format": "int32",
            "nullable": true
          },
          "siteId": {
            "type": "integer",
            "description": "Unique identifier of the Site.",
            "format": "int32",
            "nullable": true
          },
          "channelCode": {
            "type": "string",
            "description": "Unique identifier of the channel for this item.",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO Currency Code. Currently, only USD is supported.",
            "nullable": true
          },
          "visitId": {
            "type": "string",
            "description": "Identifies the Visit ID that was current when the order was placed or when the cart was last updated.",
            "nullable": true
          },
          "webSessionId": {
            "type": "string",
            "description": "Identifies the web session used to place the order or last update the cart.",
            "nullable": true
          },
          "customerInteractionType": {
            "type": "string",
            "description": "Determines the interaction type that a customer will use to create this object.\r\nValid values are: Website, Store, Call, Unknown",
            "nullable": true
          },
          "fulfillmentInfo": {
            "$ref": "#/components/schemas/FulfillmentInfo"
          },
          "orderDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
            },
            "description": "The discount that has been applied to the cart itself. If multiple discounts exist, this is the discount that the system applies because it offers the best savings for the shopper. This is a negative number.",
            "nullable": true
          },
          "suggestedDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuggestedDiscount"
            },
            "nullable": true
          },
          "rejectedDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuggestedDiscount"
            },
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data for a given vendor set within the commerce process.",
            "nullable": true
          },
          "taxData": {
            "type": "object",
            "description": "Storage for any additional/custom tax data.",
            "nullable": true
          },
          "subtotal": {
            "type": "number",
            "description": "Combined price for all cart items, including all selected options but excluding any discounts.",
            "format": "double",
            "nullable": true
          },
          "discountedSubtotal": {
            "type": "number",
            "description": "Combined price for all cart items, including all selected options as well as any discounts.",
            "format": "double",
            "nullable": true
          },
          "discountTotal": {
            "type": "number",
            "description": "Amount of the discounts applied to all items in the cart. This is a negative number.  This also includes the order level discounts.",
            "format": "double",
            "nullable": true
          },
          "discountedTotal": {
            "type": "number",
            "description": "Subtotal minus the discounted total",
            "format": "double",
            "nullable": true
          },
          "shippingTotal": {
            "type": "number",
            "description": "Shipping does not appear on cart.",
            "format": "double",
            "nullable": true
          },
          "shippingSubTotal": {
            "type": "number",
            "description": "Shipping total without discounts applied.",
            "format": "double",
            "nullable": true
          },
          "shippingTaxTotal": {
            "type": "number",
            "description": "Not implemented. Tax does not appear on cart.",
            "format": "double",
            "nullable": true
          },
          "handlingTaxTotal": {
            "type": "number",
            "description": "Total tax on handling",
            "format": "double",
            "nullable": true
          },
          "itemTaxTotal": {
            "type": "number",
            "description": "Not implemented. Tax does not appear on cart.",
            "format": "double",
            "nullable": true
          },
          "taxTotal": {
            "type": "number",
            "description": "Tax does not appear on cart.",
            "format": "double",
            "nullable": true
          },
          "feeTotal": {
            "type": "number",
            "description": "Not implemented. Total cost of fees for all items in the cart.",
            "format": "double",
            "nullable": true
          },
          "total": {
            "type": "number",
            "description": "Final total amount of the order including all discounts, shipping, and tax.",
            "format": "double",
            "nullable": true
          },
          "lineItemSubtotalWithOrderAdjustments": {
            "type": "number",
            "description": "Line Item Subtotals with Order Adjustments",
            "format": "double",
            "nullable": true
          },
          "shippingAmountBeforeDiscountsAndAdjustments": {
            "type": "number",
            "description": "Shipping Amount before discount and adjustments",
            "format": "double",
            "nullable": true
          },
          "lastValidationDate": {
            "type": "string",
            "description": "Occasionally the commerce runtime may validate that item/product names, descriptions, and prices have not changed. \r\nIf changed, it updates LastValidationDate.",
            "format": "date-time",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "When the order will no longer be active. That is, the order is considered abandoned. \r\nOrders of anonymous shoppers expire after 14 days of inactivity. \r\nAn order never expires for shoppers who are logged into their account. \r\nDate in UTC Date/Time.",
            "format": "date-time",
            "nullable": true
          },
          "changeMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeChangeMessage"
            },
            "description": "List of messages displayed by the system based on the last cart action, for example, when a product price has changed or is out-of-stock. System-supplied and read-only.",
            "nullable": true
          },
          "extendedProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtendedProperty"
            },
            "description": "Extra properties (key-value pairs) that extend the primary object. Think of this as a property bag of string keys and string values.",
            "nullable": true
          },
          "discountThresholdMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeThresholdMessage"
            },
            "description": "List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage objects that are valid for the current value of the cart/order.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Base class for cart and order"
      },
      "ProductStock": {
        "type": "object",
        "properties": {
          "manageStock": {
            "type": "boolean"
          },
          "isOnBackOrder": {
            "type": "boolean"
          },
          "availableDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "stockAvailable": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "aggregateInventory": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeMeasurement": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimePackageMeasurements": {
        "type": "object",
        "properties": {
          "height": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "width": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "length": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "weight": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          }
        },
        "additionalProperties": false,
        "description": "Physical dimensions of the package required to ship the product and its weight."
      },
      "ProductBase": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Merchant-created code that uniquely identifies the product.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the product, this is the current value of the product's name in the language specified by LocaleCode.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Short description of the product in the language specified by LocaleCode.",
            "nullable": true
          },
          "goodsType": {
            "type": "string",
            "description": "Goods Type",
            "nullable": true
          },
          "isPackagedStandAlone": {
            "type": "boolean",
            "description": "Indicates that this product ships by itself."
          },
          "stock": {
            "$ref": "#/components/schemas/ProductStock"
          },
          "productReservationId": {
            "type": "integer",
            "description": "Reservation ID associated with this product in the bundle.",
            "format": "int32",
            "nullable": true
          },
          "allocationId": {
            "type": "integer",
            "description": "Allocation ID associated with this product on this order.",
            "format": "int32",
            "nullable": true
          },
          "allocationExpiration": {
            "type": "string",
            "description": "Allocation ID associated with this product on this order.",
            "format": "date-time",
            "nullable": true
          },
          "measurements": {
            "$ref": "#/components/schemas/CommerceRuntimePackageMeasurements"
          },
          "fulfillmentStatus": {
            "type": "string",
            "description": "Fulfillment status of the product.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeProductOption": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the product option that appears with the order item in the language specified by LocaleCode.",
            "nullable": true
          },
          "value": {
            "description": "Value of the product option.",
            "nullable": true
          },
          "shopperEnteredValue": {
            "description": "The value entered by the shopper if this is an option that requires shopper input, for example, a monogram.",
            "nullable": true
          },
          "attributeFQN": {
            "type": "string",
            "description": "Value of the product option.",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "description": "Value of the product option.",
            "nullable": true
          },
          "stringValue": {
            "type": "string",
            "description": "Value of the product option.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Product option for the product listed on this order item. If the product contains \r\nconfigurable or stand-alone options, this is a product option that the shopper has selected."
      },
      "CommerceRuntimeProductPropertyValue": {
        "type": "object",
        "properties": {
          "stringValue": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeProductProperty": {
        "type": "object",
        "properties": {
          "attributeFQN": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "nullable": true
          },
          "isMultiValue": {
            "type": "boolean"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeProductPropertyValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the category. System-supplied and read-only.",
            "format": "int32",
            "nullable": true
          },
          "parent": {
            "type": "object"
          }
        },
        "additionalProperties": false,
        "description": "Categories to which the product belongs. Discounts can apply to categories where any product in the category is discounted."
      },
      "CommerceRuntimeProductPrice": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "description": "Price of the product. This is the price that the merchant intends to sell the product if no sale price is present.",
            "format": "double",
            "nullable": true
          },
          "salePrice": {
            "type": "number",
            "description": "Current sale price of the product, which is a specific numerical amount (not a percentage off).",
            "format": "double",
            "nullable": true
          },
          "tenantOverridePrice": {
            "type": "number",
            "description": "An override price applied on the product by the tenant.",
            "format": "double",
            "nullable": true
          },
          "msrp": {
            "type": "number",
            "description": "MSRP of product.",
            "format": "double",
            "nullable": true
          },
          "creditValue": {
            "type": "number",
            "description": "Credit Value when the product happens to be a gift card or similar product",
            "format": "double",
            "nullable": true
          },
          "priceListCode": {
            "type": "string",
            "description": "Pricelist code for the product",
            "nullable": true
          },
          "priceListEntryMode": {
            "type": "string",
            "description": "Pricelist entry mode of the product.\r\nNote: possible values are below\r\n1. null : Product doesn't participate in pricelist\r\n2. Bulk : Bulk volume price available(unit price vary based on quantity)\r\n3. Simple:",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Price of the product with any sale and discounts applied."
      },
      "CommerceRuntimeBundledProduct": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductBase"
          }
        ],
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "Quantity of the product included in the bundle.",
            "format": "int32"
          },
          "optionAttributeFQN": {
            "type": "string",
            "description": "Fully Qualified Name of the selected option's attribute",
            "nullable": true
          },
          "optionValue": {
            "description": "Value of the selected option",
            "nullable": true
          },
          "creditValue": {
            "type": "number",
            "description": "Credit value.  Only populated if the bundled product is a gift card or digital credit",
            "format": "double",
            "nullable": true
          },
          "deltaPrice": {
            "type": "number",
            "description": "Only populated for extras",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes products that are bundled inside of a main bundle product."
      },
      "CommerceRuntimeFulfillmentField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "userEnteredValue": {
            "nullable": true
          },
          "required": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeProduct": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductBase"
          }
        ],
        "properties": {
          "mfgPartNumber": {
            "type": "string",
            "description": "Manufacturing Part Number of the product.",
            "nullable": true
          },
          "upc": {
            "type": "string",
            "description": "Universal Product Code of the product.",
            "nullable": true
          },
          "sku": {
            "type": "string",
            "description": "Product Identifier specific to the store",
            "nullable": true
          },
          "fulfillmentTypesSupported": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Types of fulfillment that are supported for this product.",
            "nullable": true
          },
          "imageAlternateText": {
            "type": "string",
            "description": "Descriptive text of the image associated with the product in the language specified by LocaleCode.",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "URL of the image that appears next to the product on the order item. Optional.",
            "nullable": true
          },
          "variationProductCode": {
            "type": "string",
            "description": "For configurable products, the unique identifier of the product variation that has been selected.",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeProductOption"
            },
            "description": "If the product contains configurable or stand-alone options, the list of product options that the shopper selected for this product.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeProductProperty"
            },
            "description": "If the product contains properties, the list of properties that the shopper selected for this product.",
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeCategory"
            },
            "description": "Categories to which this product belongs.",
            "nullable": true
          },
          "price": {
            "$ref": "#/components/schemas/CommerceRuntimeProductPrice"
          },
          "discountsRestricted": {
            "type": "boolean",
            "description": "Is the product discount restricted",
            "nullable": true
          },
          "discountsRestrictedStartDate": {
            "type": "string",
            "description": "Product discount restriction start date",
            "format": "date-time",
            "nullable": true
          },
          "discountsRestrictedEndDate": {
            "type": "string",
            "description": "Product discount restriction end date",
            "format": "date-time",
            "nullable": true
          },
          "isRecurring": {
            "type": "boolean",
            "description": "If true, the product is purchased or fulfilled at regular intervals, for example, a monthly billing or a subscription.",
            "nullable": true
          },
          "isTaxable": {
            "type": "boolean",
            "description": "If true, the product is eligible for tax.",
            "nullable": true
          },
          "productType": {
            "type": "string",
            "description": "Type of product, which can be a product with configurable options, a product with stand-alone options, or a simple product with no options.",
            "nullable": true
          },
          "productUsage": {
            "type": "string",
            "description": "Usage of the product, primarily used to indicate a bundle in this context",
            "nullable": true
          },
          "bundledProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeBundledProduct"
            },
            "description": "Products bundled with this product (if the current product is a bundle)",
            "nullable": true
          },
          "fulfillmentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeFulfillmentField"
            },
            "description": "List of unique product identifiers for an item on shipment",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The product as it appears on the order item."
      },
      "CommerceUnitPrice": {
        "type": "object",
        "properties": {
          "extendedAmount": {
            "type": "number",
            "description": "Extended amount, this is in order of precedence: OverrideAmount, SaleAmount, ListAmount",
            "format": "double",
            "nullable": true
          },
          "listAmount": {
            "type": "number",
            "description": "Product list amount.",
            "format": "double",
            "nullable": true
          },
          "saleAmount": {
            "type": "number",
            "description": "Sale amount indicated on the product.",
            "format": "double",
            "nullable": true
          },
          "overrideAmount": {
            "type": "number",
            "description": "Amount as manually overridden by the Merchant",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Pricing details for the product listed on a cart item, including the original price, discount amount, and final price."
      },
      "CommerceRuntimeAppliedProductDiscount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
          }
        ],
        "properties": {
          "productQuantity": {
            "type": "integer",
            "description": "Quantity of products priced. This is always one unless calculating pricing on the order or cart.",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          },
          "impactPerUnit": {
            "type": "number",
            "description": "Impact for a quantity of one product; that is, the value of the discount for one product.",
            "format": "double",
            "nullable": true,
            "deprecated": true
          },
          "appliesToSalePrice": {
            "type": "boolean",
            "description": "Determines if the discount applies to the sale price of the order",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details of the discount applied to a product."
      },
      "CommerceRuntimeAppliedLineItemProductDiscount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommerceRuntimeAppliedProductDiscount"
          }
        ],
        "properties": {
          "appliesToSalePrice": {
            "type": "boolean",
            "description": "Determines if the discount applies to the sale price of the order",
            "nullable": true
          },
          "discountQuantity": {
            "type": "integer",
            "description": "The number of the line item that can be used for this particular discount.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ShippingDiscount": {
        "type": "object",
        "properties": {
          "methodCode": {
            "type": "string",
            "description": "Unique identifier of the shipping method discount.",
            "nullable": true
          },
          "discount": {
            "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
          }
        },
        "additionalProperties": false,
        "description": "Value of the shipping discount."
      },
      "CommerceRuntimeAppliedLineItemShippingDiscount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShippingDiscount"
          }
        ],
        "properties": {
          "methodCode": {
            "type": "string",
            "description": "Unique identifier of the shipping method discount.",
            "nullable": true
          },
          "discount": {
            "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
          },
          "discountQuantity": {
            "type": "integer",
            "description": "The number of the line item that can be used for this particular discount.",
            "format": "int32"
          },
          "impactPerUnit": {
            "type": "number",
            "description": "The impact of this discount pur discount quantity.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "InventoryTags": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceItem": {
        "type": "object",
        "properties": {
          "localeCode": {
            "type": "string",
            "description": "Locale code for language that appears in text and descriptions on the site, for example, en_US. \r\nThis is not the currency code. Currently only en_US is supported.",
            "nullable": true
          },
          "purchaseLocation": {
            "type": "string",
            "description": "The location where the product is being purchased.. default is null. Products can have different prices\r\nby purchaseLocation via custom priceListResolution...",
            "nullable": true
          },
          "lineId": {
            "type": "integer",
            "description": "The line id assigned to the order item. Visible only in the Admin, this is set from the Admin or\r\nin CommerceRuntime when a cart is converted to an order.",
            "format": "int32",
            "nullable": true
          },
          "product": {
            "$ref": "#/components/schemas/CommerceRuntimeProduct"
          },
          "quantity": {
            "type": "integer",
            "description": "Number of products ordered.",
            "format": "int32"
          },
          "isRecurring": {
            "type": "boolean",
            "description": "If true, the cart item lists a product that can be purchased or fulfilled at regular intervals, for example, monthly billing or a subscription.",
            "nullable": true
          },
          "isTaxable": {
            "type": "boolean",
            "description": "Not implemented. If true, the cart item is eligible for tax.",
            "nullable": true
          },
          "subtotal": {
            "type": "number",
            "description": "Line item subtotal (quantity multiplied by price) before discounts.",
            "format": "double",
            "nullable": true
          },
          "extendedTotal": {
            "type": "number",
            "description": "Line item extended total (quantity multiplied by unit extended price) before discounts.",
            "format": "double",
            "nullable": true
          },
          "taxableTotal": {
            "type": "number",
            "description": "Line item subtotal (quantity multiplied by price) before discounts.",
            "format": "double",
            "nullable": true
          },
          "discountTotal": {
            "type": "number",
            "description": "How much the shopper saves with the applied discount or sale price. This is a negative number.",
            "format": "double",
            "nullable": true
          },
          "discountedTotal": {
            "type": "number",
            "description": "Subtotal minus any discounts.",
            "format": "double",
            "nullable": true
          },
          "itemTaxTotal": {
            "type": "number",
            "description": "Total price of taxes that apply to products in this item.",
            "format": "double",
            "nullable": true
          },
          "shippingTaxTotal": {
            "type": "number",
            "description": "Total price of taxes that apply to the shipping of this item.",
            "format": "double",
            "nullable": true
          },
          "shippingTotal": {
            "type": "number",
            "description": "Total price of shipping that apply to this item.",
            "format": "double",
            "nullable": true
          },
          "handlingAmount": {
            "type": "number",
            "description": "Handling Amount for this item",
            "format": "double",
            "nullable": true
          },
          "feeTotal": {
            "type": "number",
            "description": "Not implemented. Total cost of fees that apply to this item.",
            "format": "double",
            "nullable": true
          },
          "total": {
            "type": "number",
            "description": "Total price of this cart item taking into account any discounts.",
            "format": "double",
            "nullable": true
          },
          "unitPrice": {
            "$ref": "#/components/schemas/CommerceUnitPrice"
          },
          "productDiscount": {
            "$ref": "#/components/schemas/CommerceRuntimeAppliedLineItemProductDiscount"
          },
          "productDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAppliedLineItemProductDiscount"
            },
            "description": "A list of discounts applied to the product",
            "nullable": true
          },
          "shippingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAppliedLineItemShippingDiscount"
            },
            "description": "A discount applied to the shipping",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data for a given vendor set within the commerce process.",
            "nullable": true
          },
          "taxData": {
            "type": "object",
            "description": "Storage for any additional/custom tax data.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "shippingAmountBeforeDiscountsAndAdjustments": {
            "type": "number",
            "description": "Shipping amount before Discounts and adjustments",
            "format": "double",
            "nullable": true
          },
          "weightedOrderAdjustment": {
            "type": "number",
            "description": "Order Level Manual Adjustment applied to this Item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderDiscount": {
            "type": "number",
            "description": "Order Level Discount applied to this Item",
            "format": "double",
            "nullable": true
          },
          "adjustedLineItemSubtotal": {
            "type": "number",
            "description": "Order Level taxable sub total",
            "format": "double",
            "nullable": true
          },
          "totalWithoutWeightedShippingAndHandling": {
            "type": "number",
            "description": "Taxable Subtotal including Weighted Order amounts",
            "format": "double",
            "nullable": true
          },
          "weightedOrderTax": {
            "type": "number",
            "description": "Order Level tax applied to this Item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderShipping": {
            "type": "number",
            "description": "Order Level Shipping applied to this Item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderShippingDiscount": {
            "type": "number",
            "description": "Order Level Shipping discount applied to this Item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderShippingManualAdjustment": {
            "type": "number",
            "description": "Order Level Shipping Manual Adjustment applied to this Item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderShippingTax": {
            "type": "number",
            "description": "Order Level Shipping Tax applied to this Item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderHandlingFee": {
            "type": "number",
            "description": "Order Level handling fee applied to this item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderHandlingFeeTax": {
            "type": "number",
            "description": "Order Level handling fee tax applied to this item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderHandlingFeeDiscount": {
            "type": "number",
            "description": "Order Level handling fee discount applied to this item",
            "format": "double",
            "nullable": true
          },
          "weightedOrderDuty": {
            "type": "number",
            "description": "Order Level Duty applied to this Item",
            "format": "double",
            "nullable": true
          },
          "totalWithWeightedShippingAndHandling": {
            "type": "number",
            "description": "Line item total with line item, Tax, Weighted Tax with Weighted shipping and handling costs",
            "format": "double",
            "nullable": true
          },
          "weightedOrderHandlingAdjustment": {
            "type": "number",
            "description": "Order level handling adjusment that applies to this item.",
            "format": "double",
            "nullable": true
          },
          "autoAddDiscountId": {
            "type": "integer",
            "description": "Track the discoutid from which the item was auto added",
            "format": "int32",
            "nullable": true
          },
          "isAssemblyRequired": {
            "type": "boolean",
            "description": "Assembly Required for this order item"
          },
          "childItemIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of Child Item Ids for this order item",
            "nullable": true
          },
          "parentItemId": {
            "type": "string",
            "description": "Indicates Parent Item Id for this order item",
            "nullable": true
          },
          "inventoryTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryTags"
            },
            "nullable": true
          },
          "lineItemAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Base class for cart and order items"
      },
      "Frequency": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Trial": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Indicates if the trial is enabled"
          },
          "duration": {
            "type": "integer",
            "description": "Trial duration in days",
            "format": "int32"
          },
          "substituteProductCode": {
            "type": "string",
            "description": "Product code to substitute once the trial period is finished.",
            "nullable": true
          },
          "substituteVariationProductCode": {
            "type": "string",
            "description": "Variation product code to substitute once the trial period is finished.",
            "nullable": true
          },
          "substituteProductOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeProductOption"
            },
            "description": "Configurable Options to substitute once the trial period is finished.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubscriptionInfo": {
        "type": "object",
        "properties": {
          "required": {
            "type": "boolean",
            "description": "Indicates commerce item is subscribed or not.",
            "nullable": true
          },
          "frequency": {
            "$ref": "#/components/schemas/Frequency"
          },
          "trial": {
            "$ref": "#/components/schemas/Trial"
          }
        },
        "additionalProperties": false
      },
      "CartItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommerceItem"
          }
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the item in the cart.",
            "nullable": true
          },
          "fulfillmentLocationCode": {
            "type": "string",
            "description": "Location code from which to obtain this item",
            "nullable": true
          },
          "fulfillmentMethod": {
            "type": "string",
            "description": "Fulfillment method used to fulfill this item",
            "nullable": true
          },
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionInfo"
          }
        },
        "additionalProperties": false,
        "description": "Details of an item in the shopper's cart, such as the product name, stock count, unit price, discounts, quantity ordered, and total price."
      },
      "InvalidCoupon": {
        "type": "object",
        "properties": {
          "couponCode": {
            "type": "string",
            "description": "Code that identifies the coupon.",
            "nullable": true
          },
          "reasonCode": {
            "type": "integer",
            "description": "Code that identifies the reason the coupon was invalid.",
            "format": "int32"
          },
          "reason": {
            "type": "string",
            "description": "Description text of the reason.",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "description": "Create date of the invalid coupon.",
            "format": "date-time"
          },
          "discountId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a coupon that is considered invalid by the Mozu pricing service."
      },
      "CartMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "messageType": {
            "type": "string",
            "nullable": true
          },
          "productsRemoved": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeProduct"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Cart": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommerceAggregate"
          }
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItem"
            },
            "description": "List of items in the cart.",
            "nullable": true
          },
          "couponCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Coupon codes associated with this order.  Only set on order import.",
            "nullable": true
          },
          "invalidCoupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvalidCoupon"
            },
            "description": "A list of invalid coupons that were attempted on the cart",
            "nullable": true
          },
          "priceListCode": {
            "type": "string",
            "description": "Pricelist code",
            "nullable": true
          },
          "cartMessage": {
            "$ref": "#/components/schemas/CartMessage"
          },
          "cartMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartMessage"
            },
            "nullable": true
          },
          "handlingAmount": {
            "type": "number",
            "description": "Order level handling fees excluding any discounts.",
            "format": "double",
            "nullable": true
          },
          "handlingSubTotal": {
            "type": "number",
            "description": "Handling fees for the Order as well as CartItems (e.g. if the Cart has a $5 handling fee and an CartItem has a $2 handling fee per item quantity and the quantity of items is 2 then the value in this property would be $9)",
            "format": "double",
            "nullable": true
          },
          "handlingTotal": {
            "type": "number",
            "description": "Handling fees including any discounts.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details of the current cart, including shopper's user ID, items listed in the cart, and any system messages. \r\nFor each item, contains the list of available discounts and the actual discount applied to the cart item."
      },
      "CartItemCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of items in the cart. A collection is not paged."
      },
      "CartChangeMessageCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeChangeMessage"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of cart messages returned as a whole. A collection is not paged."
      },
      "Channel": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "integer",
            "description": "Tenant that owns the channel.",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "description": "Code to uniquely identify the channel.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Friendly name of the channel.",
            "nullable": true
          },
          "region": {
            "type": "string",
            "description": "Region of the channel.",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "Country code of the channel.",
            "nullable": true
          },
          "groupCode": {
            "type": "string",
            "description": "Code to uniquely identify the channel group, if any that contains this channel.",
            "nullable": true
          },
          "siteIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of site Id's that this channel contains.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Channel used to group sites for commerce purposes."
      },
      "ChannelCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Channel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChannelGroup": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "integer",
            "description": "Tenant that owns the channel.",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "description": "Code to uniquely identify the channel.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Friendly name of the channel.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Used to group channels together to manage common channel information."
      },
      "ChannelGroupCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelGroup"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderAttribute": {
        "type": "object",
        "properties": {
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "fullyQualifiedName": {
            "type": "string",
            "nullable": true
          },
          "attributeDefinitionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {},
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeOrderItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommerceItem"
          }
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the order line item. System-supplied and read-only.",
            "nullable": true
          },
          "destinationId": {
            "type": "string",
            "description": "The destination associated with this item when used with a multi-ship checkout.",
            "nullable": true
          },
          "originalCartItemId": {
            "type": "string",
            "description": "Unique identifier of the cart item that is associated with this line item. \r\n(This is the original Cart Item ID expressed as a GUID.)",
            "nullable": true
          },
          "fulfillmentLocationCode": {
            "type": "string",
            "description": "Location code from which to obtain this item",
            "nullable": true
          },
          "fulfillmentMethod": {
            "type": "string",
            "description": "Fulfillment method used to fulfill this item",
            "nullable": true
          },
          "dutyAmount": {
            "type": "number",
            "description": "Duty or Tariff for this item",
            "format": "double",
            "nullable": true
          },
          "expectedDeliveryDate": {
            "type": "string",
            "description": "Expected Delivery Date of shipment",
            "format": "date-time",
            "nullable": true
          },
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionInfo"
          }
        },
        "additionalProperties": false,
        "description": "A single line item of an order."
      },
      "CheckoutGrouping": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for this grouping.",
            "nullable": true
          },
          "destinationId": {
            "type": "string",
            "description": "The DestinationId used by items in this grouping, which may be {null}.",
            "nullable": true
          },
          "fulfillmentMethod": {
            "type": "string",
            "description": "The FulfillmentMethod used by items in this grouping.",
            "nullable": true
          },
          "orderItemIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Identifiers of the items that make up this grouping.",
            "nullable": true
          },
          "shippingMethodCode": {
            "type": "string",
            "description": "Code that uniquely identifies the shipping method such as \"Ground,\" \"Overnight,\" or \"Digital.\"\r\nThe site's shipping settings lists the valid shipping methods specified for this site.",
            "nullable": true
          },
          "shippingMethodName": {
            "type": "string",
            "description": "Readable name of the shipping method.",
            "nullable": true
          },
          "standaloneGroup": {
            "type": "boolean",
            "description": "Indicates whether a non ship group should combine with a ship group"
          },
          "shippingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDiscount"
            },
            "nullable": true
          },
          "handlingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
            },
            "nullable": true
          },
          "dutyAmount": {
            "type": "number",
            "description": "Any duty fee applied directly to this group. Items can also have their own duty fee.",
            "format": "double",
            "nullable": true
          },
          "dutyTotal": {
            "type": "number",
            "description": "Total raw duty amounts for this group.",
            "format": "double"
          },
          "shippingAmount": {
            "type": "number",
            "description": "If a shipping method applies directly to this grouping (versus the items), this is the raw shipping amount for the group.",
            "format": "double",
            "nullable": true
          },
          "shippingSubTotal": {
            "type": "number",
            "description": "The raw shipping amount minus shipping discounts.",
            "format": "double"
          },
          "itemLevelShippingDiscountTotal": {
            "type": "number",
            "description": "The total value of item-level shipping discounts applied to this group.",
            "format": "double"
          },
          "orderLevelShippingDiscountTotal": {
            "type": "number",
            "description": "The total value of order-level (group-level) shipping discounts applied to this group.",
            "format": "double"
          },
          "shippingTax": {
            "type": "number",
            "description": "Group-level shipping tax. Does not account for item shipping tax.",
            "format": "double",
            "nullable": true
          },
          "shippingTaxTotal": {
            "type": "number",
            "description": "The total shipping tax for this group, accounting for both group-level and item-level shipping tax.",
            "format": "double"
          },
          "shippingTotal": {
            "type": "number",
            "description": "The total shipping cost for this group, accounting for discounts and tax.",
            "format": "double"
          },
          "handlingAmount": {
            "type": "number",
            "description": "The handling fee amount that's applicable to this grouping.",
            "format": "double",
            "nullable": true
          },
          "handlingSubTotal": {
            "type": "number",
            "description": "The total raw handling amounts minus handling discounts.",
            "format": "double"
          },
          "itemLevelHandlingDiscountTotal": {
            "type": "number",
            "description": "The total value of item-level handling discounts applied to this group.",
            "format": "double"
          },
          "orderLevelHandlingDiscountTotal": {
            "type": "number",
            "description": "The total value of order-level (group-level) handling discounts applied to this group.",
            "format": "double"
          },
          "handlingTax": {
            "type": "number",
            "description": "Group-level handling tax. Does not account for item handling tax.",
            "format": "double",
            "nullable": true
          },
          "handlingTaxTotal": {
            "type": "number",
            "description": "The total handling tax for this group, accounting for both group-level and item-level handling tax.",
            "format": "double"
          },
          "handlingTotal": {
            "type": "number",
            "description": "The total handling cost for this group, accounting for discounts and tax.",
            "format": "double"
          },
          "taxData": {
            "type": "object",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeDestination": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "An identifier for this entry.",
            "nullable": true
          },
          "destinationContact": {
            "$ref": "#/components/schemas/CommerceRuntimeContact"
          },
          "isDestinationCommercial": {
            "type": "boolean",
            "description": "Indicates that the destination is commercial",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentActionTarget": {
        "type": "object",
        "properties": {
          "targetType": {
            "type": "string",
            "description": "Specifies if the Mozu.CommerceRuntime.Contracts.Payments.PaymentActionTarget.TargetId is a Checkout Id, Order Id, or Return Id.",
            "nullable": true
          },
          "targetId": {
            "type": "string",
            "description": "The Id of the Checkout/Order/Return to target.",
            "nullable": true
          },
          "targetNumber": {
            "type": "integer",
            "description": "The number of the Checkout/Order/Return to target.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentCardReference": {
        "type": "object",
        "properties": {
          "paymentOrCardType": {
            "type": "string",
            "description": "Card type such as Visa, MasterCard, American Express, or Discover.",
            "nullable": true
          },
          "cardNumberPartOrMask": {
            "type": "string",
            "description": "The visible part of the card number that the merchant uses to refer to \r\npayment information, for example, the last for digits of the card number.",
            "nullable": true
          },
          "expireMonth": {
            "type": "integer",
            "description": "Month when the card expires.",
            "format": "int32"
          },
          "expireYear": {
            "type": "integer",
            "description": "Year when the card expires.",
            "format": "int32"
          },
          "bin": {
            "type": "string",
            "description": "Year when the card expires.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentCard": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentCardReference"
          }
        ],
        "properties": {
          "paymentServiceCardId": {
            "type": "string",
            "description": "Credit card number.",
            "nullable": true
          },
          "isUsedRecurring": {
            "type": "boolean",
            "description": "If true, the credit card is charged on a regular interval, such as for a subscription. (Not supported currently.)",
            "nullable": true
          },
          "nameOnCard": {
            "type": "string",
            "description": "Card holder's name as it appears on the card.",
            "nullable": true
          },
          "isCardInfoSaved": {
            "type": "boolean",
            "description": "If true, the card information is stored in the customer's account."
          },
          "isTokenized": {
            "type": "boolean",
            "description": "If true, the card is tokenized by external provider"
          },
          "ccLastFour": {
            "type": "string",
            "description": "Last four digit of Credit card\r\nOnly for OMS Only tenant.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "If the customer is paying by credit card, the card holder's details, such as the name on the card, number, billing \r\naddress, and expiration dates."
      },
      "PaymentToken": {
        "type": "object",
        "properties": {
          "paymentServiceTokenId": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimePurchaseOrderPaymentTerm": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimePurchaseOrderCustomField": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderPayment": {
        "type": "object",
        "properties": {
          "purchaseOrderNumber": {
            "type": "string",
            "description": "Purchase order number",
            "nullable": true
          },
          "paymentTerm": {
            "$ref": "#/components/schemas/CommerceRuntimePurchaseOrderPaymentTerm"
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimePurchaseOrderCustomField"
            },
            "description": "Memo/custom fields",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Purchase order payment"
      },
      "CheckPayment": {
        "type": "object",
        "properties": {
          "checkNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BillingInfo": {
        "type": "object",
        "properties": {
          "paymentType": {
            "type": "string",
            "description": "Type of payment, such as credit card, check by mail, or PayPal.\r\nsee Mozu.CommerceRuntime.Contracts.Payments.PaymentTypeConst for valid values",
            "nullable": true
          },
          "paymentWorkflow": {
            "type": "string",
            "nullable": true
          },
          "billingContact": {
            "$ref": "#/components/schemas/CommerceRuntimeContact"
          },
          "isSameBillingShippingAddress": {
            "type": "boolean",
            "description": "Indicates that billing and shipping address are the same"
          },
          "card": {
            "$ref": "#/components/schemas/PaymentCard"
          },
          "token": {
            "$ref": "#/components/schemas/PaymentToken"
          },
          "purchaseOrder": {
            "$ref": "#/components/schemas/PurchaseOrderPayment"
          },
          "check": {
            "$ref": "#/components/schemas/CheckPayment"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "storeCreditCode": {
            "type": "string",
            "description": "The store credit to use for this purchase",
            "nullable": true
          },
          "storeCreditType": {
            "type": "string",
            "description": "The type of store credit used for this purchase",
            "nullable": true
          },
          "customCreditType": {
            "type": "string",
            "description": "Name of custom stored credit type",
            "nullable": true
          },
          "externalTransactionId": {
            "type": "string",
            "description": "Transaction Id from third party payment source like Visa Checkout, Amazon",
            "nullable": true
          },
          "isRecurring": {
            "type": "boolean",
            "description": "Indicates whether the payment is used in recurring transactions. ex- subscription payments"
          },
          "recurringTransactionId": {
            "type": "string",
            "description": "Recurring Payment Id returned by Payment Gateway\r\nnetworkTransactionId for vantiv\r\npreviousTransactionId for cybersource etc",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data from payment providers",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Customer's payment details such as payment type (credit card, check by mail, or PayPal)\r\nand cardholder information if payment is by credit card."
      },
      "SubPayment": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "nullable": true
          },
          "amountCollected": {
            "type": "number",
            "format": "double"
          },
          "amountCredited": {
            "type": "number",
            "format": "double"
          },
          "amountRequested": {
            "type": "number",
            "format": "double"
          },
          "amountRefunded": {
            "type": "number",
            "format": "double"
          },
          "target": {
            "$ref": "#/components/schemas/PaymentActionTarget"
          }
        },
        "additionalProperties": false
      },
      "PaymentGatewayResponseData": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key from payment gateway",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Value from payment gateway",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payment gateway reponse data"
      },
      "CapturableShipmentSummary": {
        "type": "object",
        "properties": {
          "shipmentNumber": {
            "type": "integer",
            "description": "The identifying number of the shipment affected by the payment action",
            "format": "int32"
          },
          "shipmentTotal": {
            "type": "number",
            "description": "The shipment's total when the payment action occurred",
            "format": "double"
          },
          "amountApplied": {
            "type": "number",
            "description": "The amount applied by the payment action",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PaymentInteraction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of this payment transaction interaction.",
            "nullable": true
          },
          "gatewayInteractionId": {
            "type": "integer",
            "description": "Unique identifier of the gateway interaction. Used for credit card transactions, where the\r\npayment service creates a GatewayInteractionId for each transaction interaction.",
            "format": "int32",
            "nullable": true
          },
          "paymentId": {
            "type": "string",
            "description": "Unique identifier of the original transaction of which this current interaction is a part.",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "description": "Unique identifier of the order with which this transaction is associated.",
            "nullable": true
          },
          "target": {
            "$ref": "#/components/schemas/PaymentActionTarget"
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO currency code for the transaction. Currently, only USD is supported.",
            "nullable": true
          },
          "interactionType": {
            "type": "string",
            "description": "Types of transaction interactions which can be \"Authorization,\" \"Capture,\" \"AuthorizeAndCapture,\"\r\n\"Void,\" or \"Credit,\" \"CheckRequested,\" or \"CheckReceived.\"",
            "nullable": true
          },
          "checkNumber": {
            "type": "string",
            "description": "If paying by check, the check number.",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of the payment transaction interaction which can be either \"Success\" or \"Failure.\"",
            "nullable": true
          },
          "paymentEntryStatus": {
            "type": "string",
            "description": "Status of the payment when the transaction interaction was created",
            "nullable": true
          },
          "isRecurring": {
            "type": "boolean",
            "description": "If true, the product is purchased or fulfilled at regular intervals, for example, a monthly billing or a subscription. (Not currently implemented.)",
            "nullable": true
          },
          "isManual": {
            "type": "boolean",
            "description": "If the payment is a manual payment, this is set to true"
          },
          "gatewayTransactionId": {
            "type": "string",
            "description": "Unique identifier of the transaction supplied by PCIaaS.",
            "nullable": true
          },
          "gatewayAuthCode": {
            "type": "string",
            "description": "If required by the payment gateway, the authorization code of the transaction. Supplied by PCIaaS.",
            "nullable": true
          },
          "gatewayAVSCodes": {
            "type": "string",
            "description": "Gateway AVS Codes. Supplied by PCIaaS.",
            "nullable": true
          },
          "gatewayCVV2Codes": {
            "type": "string",
            "description": "Gateway CVV2 Codes. Supplied by PCIaaS.",
            "nullable": true
          },
          "gatewayResponseCode": {
            "type": "string",
            "description": "Gateway response code. Supplied by PCIaaS.",
            "nullable": true
          },
          "gatewayResponseText": {
            "type": "string",
            "description": "Gateway response text. Supplied by PCIaaS.",
            "nullable": true
          },
          "gatewayResponseData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentGatewayResponseData"
            },
            "description": "A List of payment response data required to act on authorization when using external order management systems",
            "nullable": true
          },
          "paymentTransactionInteractionIdReference": {
            "type": "integer",
            "description": "Unique identifier of previous PaymentTransactionInteraction that this PaymentTransactionInteraction is modifying.\r\nFor instance, when crediting a capture, set the PaymentTransactionInteractionIdReference to the capture PaymentTransactionInteractionID.",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount of funds associated with this interaction.",
            "format": "double",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "Note to be entered by merchant/application",
            "nullable": true
          },
          "interactionDate": {
            "type": "string",
            "description": "Date the interaction occurred",
            "format": "date-time",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "returnId": {
            "type": "string",
            "description": "Return Id, if the interaction is a Credit for a return-refund.",
            "nullable": true
          },
          "refundId": {
            "type": "string",
            "description": "Refund Id, if the interaction is for a stand alone refund.",
            "nullable": true
          },
          "capturableShipmentsSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapturableShipmentSummary"
            },
            "description": "Stores pairings of shipment number to shipment total for all captured shipments. This was added for generating TLogs.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A single interaction of a potential list of intereactions for a transaction. The scope of the transaction is the entire payment\r\ninterchange. It is created upon authorization and is used for all subsequent interactions performed against the authorize,\r\nsuch as consecutive captures."
      },
      "GatewayGiftCard": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "cardNumber": {
            "type": "string",
            "nullable": true
          },
          "cardPin": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Payment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of this order transaction.",
            "nullable": true
          },
          "groupId": {
            "$ref": "#/components/schemas/PaymentActionTarget"
          },
          "paymentServiceTransactionId": {
            "type": "string",
            "description": "Unique identifier of the transaction, specified by the payment service processesing this transaction.",
            "nullable": true
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Actions available to the payment",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "description": "Unique identifier of the order with which this transaction is associated.",
            "nullable": true
          },
          "paymentType": {
            "type": "string",
            "description": "Type of Payment",
            "nullable": true
          },
          "paymentWorkflow": {
            "type": "string",
            "description": "The source of data for this payment.  By default, this will be set to 'mozu'",
            "nullable": true
          },
          "externalTransactionId": {
            "type": "string",
            "description": "The external/third party transaction Id for this payment. This is used to store the transaction Id from digital wallet like Visa Checkout",
            "nullable": true
          },
          "billingInfo": {
            "$ref": "#/components/schemas/BillingInfo"
          },
          "data": {
            "type": "object",
            "description": "Custom data from payment providers",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Current status of this transaction which are described by the PaymentStatusConst class.",
            "nullable": true
          },
          "subPayments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubPayment"
            },
            "description": "List of sub payments that correspond to child orders in case of multiship orders.",
            "nullable": true
          },
          "interactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentInteraction"
            },
            "description": "List of intereactions for this transaction. A transaction is created upon authorization and lasts across the payment \r\ninterchange, which can consist of multiple interactions, such as consecutive captures.",
            "nullable": true
          },
          "isRecurring": {
            "type": "boolean",
            "description": "If true, the product is purchased or fulfilled at regular intervals, for example, \r\nmonthly billing or a subscription. (Not currently supported.)"
          },
          "amountCollected": {
            "type": "number",
            "description": "Amount collected on the payment",
            "format": "double"
          },
          "amountCredited": {
            "type": "number",
            "description": "Amount credited back to the payment.",
            "format": "double"
          },
          "amountRequested": {
            "type": "number",
            "description": "Derived from the Amount on the initial payment create, used to help storefront determine how much can be captured for multiple payments.\r\nSee Order.AmountRemainingForPayment for an example.",
            "format": "double"
          },
          "changeMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeChangeMessage"
            },
            "description": "Change messages related to the payment.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "gatewayGiftCard": {
            "$ref": "#/components/schemas/GatewayGiftCard"
          }
        },
        "additionalProperties": false,
        "description": "Payment transaction associated with this order. It is the entire payment interchange between the merchant who is forwarding the customer's payment \r\ninformation and the payment service who is authorizing and capturing payment. Payment can be either by credit card, check, or PayPal. (PayPal not\r\ncurrently supported.)"
      },
      "AlternateContact": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First Name of alternate contact during order process",
            "nullable": true
          },
          "lastNameOrSurname": {
            "type": "string",
            "description": "Last Name of alternate contact during order process",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "Email Address of alternate contact during order process",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone Number of alternate contact during order process",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeShopperNotes": {
        "type": "object",
        "properties": {
          "giftMessage": {
            "type": "string",
            "description": "Gift message associated with this order.",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "description": "Comments associated with this order.",
            "nullable": true
          },
          "deliveryInstructions": {
            "type": "string",
            "description": "DeliveryInstructions associated with this order.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Notes that the shopper has added to this order, for example, a gift message or other comments."
      },
      "Checkout": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier.",
            "nullable": true
          },
          "siteId": {
            "type": "integer",
            "description": "Unique identifier of the Site.",
            "format": "int32"
          },
          "tenantId": {
            "type": "integer",
            "description": "Unique identifier of the Tenant.",
            "format": "int32"
          },
          "number": {
            "type": "integer",
            "description": "A checkout number that is only assigned after the checkout is placed.",
            "format": "int32",
            "nullable": true
          },
          "originalCartId": {
            "type": "string",
            "description": "Unique identifier for the cart that was converted to checkout.",
            "nullable": true
          },
          "submittedDate": {
            "type": "string",
            "description": "When the customer placed (submitted) the order.",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Is this Order Online or Offline? Online means shopper entered at checkout, offline means a phone order.",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
            },
            "description": "List of items in the checkout.",
            "nullable": true
          },
          "groupings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckoutGrouping"
            },
            "description": "List of checkout grouping.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "destinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeDestination"
            },
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            },
            "description": "Payment transaction associated with this checkout. It is the entire payment interchange between the merchant \r\nwho is forwarding the customer's payment information and the payment service who is authorizing and \r\ncapturing payment. Payment can be either by credit card, check, or PayPal.",
            "nullable": true
          },
          "amountRemainingForPayment": {
            "type": "number",
            "description": "A counter for how much of the total has not been claimed by payments.\r\nThis is computed by Total - (sum of Payments where State is not Voided/Declined)",
            "format": "double"
          },
          "acceptsMarketing": {
            "type": "boolean",
            "description": "Does the customer accept marketing",
            "nullable": true
          },
          "customerAccountId": {
            "type": "integer",
            "description": "Unique identifier of the customer account.",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email address for checkout",
            "nullable": true
          },
          "alternateContact": {
            "$ref": "#/components/schemas/AlternateContact"
          },
          "customerTaxId": {
            "type": "string",
            "description": "The customers tax ID. If Customer Account ID exists in the system, will set this.",
            "nullable": true,
            "readOnly": true
          },
          "isTaxExempt": {
            "type": "boolean",
            "description": "Unique identifier of the customer account.",
            "nullable": true,
            "readOnly": true
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO Currency Code.",
            "nullable": true
          },
          "priceListCode": {
            "type": "string",
            "description": "Pricelist code for the checkout",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderAttribute"
            },
            "nullable": true
          },
          "shopperNotes": {
            "$ref": "#/components/schemas/CommerceRuntimeShopperNotes"
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data for a given vendor set within the commerce process.",
            "nullable": true
          },
          "taxData": {
            "type": "object",
            "description": "Storage for any additional/custom tax data.",
            "nullable": true
          },
          "channelCode": {
            "type": "string",
            "description": "Unique identifier of the channel for this item.",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "Identifies the location at which the order was placed if the order was placed externally.",
            "nullable": true
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address of the user placing the order. (User or customer?)",
            "nullable": true
          },
          "sourceDevice": {
            "type": "string",
            "description": "Source device of the user placing the order. (User or customer?)",
            "nullable": true
          },
          "visitId": {
            "type": "string",
            "description": "Identifies the Visit ID that was current when the order was placed or when the cart was last updated.",
            "nullable": true
          },
          "webSessionId": {
            "type": "string",
            "description": "Identifies the web session used to place the order or last update the cart.",
            "nullable": true
          },
          "customerInteractionType": {
            "type": "string",
            "description": "Determines the interaction type that a customer will use to create this object.\r\nValid values are: Website, Store, Call, Unknown",
            "nullable": true
          },
          "orderDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
            },
            "nullable": true
          },
          "couponCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Coupon codes associated with this order.",
            "nullable": true
          },
          "invalidCoupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvalidCoupon"
            },
            "description": "A list of invalid coupons that were attempted on the order.",
            "nullable": true
          },
          "suggestedDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuggestedDiscount"
            },
            "nullable": true
          },
          "discountThresholdMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeThresholdMessage"
            },
            "description": "List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage objects that are valid for the current value of the cart/order.",
            "nullable": true
          },
          "dutyTotal": {
            "type": "number",
            "description": "Total duty fees",
            "format": "double",
            "nullable": true
          },
          "feeTotal": {
            "type": "number",
            "description": "Total Fees",
            "format": "double"
          },
          "subTotal": {
            "type": "number",
            "description": "Subtotal before any coupon codes, taxes, fees, etc.",
            "format": "double"
          },
          "itemLevelProductDiscountTotal": {
            "type": "number",
            "description": "The total value of item-level product discounts.",
            "format": "double"
          },
          "orderLevelProductDiscountTotal": {
            "type": "number",
            "description": "The total value of order-level (group-level) product discounts.",
            "format": "double"
          },
          "itemTaxTotal": {
            "type": "number",
            "description": "Total tax on products.",
            "format": "double"
          },
          "itemTotal": {
            "type": "number",
            "description": "The total product cost, accounting for discounts and tax.",
            "format": "double"
          },
          "shippingSubTotal": {
            "type": "number",
            "description": "Shipping does not appear on cart.",
            "format": "double"
          },
          "itemLevelShippingDiscountTotal": {
            "type": "number",
            "description": "The total value of item-level shipping discounts.",
            "format": "double"
          },
          "orderLevelShippingDiscountTotal": {
            "type": "number",
            "description": "The total value of order-level (group-level) shipping discounts.",
            "format": "double"
          },
          "shippingTaxTotal": {
            "type": "number",
            "description": "Total tax on shipping.",
            "format": "double"
          },
          "shippingTotal": {
            "type": "number",
            "description": "Overall shipping total, accounting for item and order-level shipping costs, any shipping discounts, and shipping tax.",
            "format": "double"
          },
          "handlingSubTotal": {
            "type": "number",
            "description": "Pre-Discounted Handling Subtotal of the CommerceAggregate and its Items.\r\nReturns {null} if the calculated value is negative.",
            "format": "double"
          },
          "itemLevelHandlingDiscountTotal": {
            "type": "number",
            "description": "The total value of item-level handling discounts.",
            "format": "double"
          },
          "orderLevelHandlingDiscountTotal": {
            "type": "number",
            "description": "The total value of order-level (group-level) handling discounts.",
            "format": "double"
          },
          "handlingTaxTotal": {
            "type": "number",
            "description": "Total tax on handling.",
            "format": "double"
          },
          "handlingTotal": {
            "type": "number",
            "description": "Overall handling total, accounting for line and order-level handling costs, any handling discounts, and handling tax.",
            "format": "double"
          },
          "total": {
            "type": "number",
            "description": "Final total",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "CheckoutCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Checkout"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Paged collection of checkouts."
      },
      "ShippingPrice": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "ISO currency code such as US dollars. Currently, only USD is supported.",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "How much the customer pays for shipping which includes any shipping discounts that the merchant offers.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Shipping pricing information which includes the cost to the merchant and the price that the customer pays."
      },
      "CommerceRuntimeShippingRate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShippingPrice"
          }
        ],
        "properties": {
          "shippingMethodCode": {
            "type": "string",
            "description": "Code that uniquely identifies the selected shipping method.",
            "nullable": true
          },
          "shippingMethodName": {
            "type": "string",
            "description": "Shipping Method Name",
            "nullable": true
          },
          "shippingZoneCode": {
            "type": "string",
            "description": "The shipping zone to which this rate applies.",
            "nullable": true
          },
          "isValid": {
            "type": "boolean",
            "description": "If true, the shipping rate is valid.",
            "nullable": true
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Messages and detail about why the shipping rate may be invalid.",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data returned by the shipping service.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "How much the customer and merchant pay for shipping based on the current shipping rate. \r\nThe cost can differ between the merchant and customer depending on any merchant discounts or \r\nextra fees."
      },
      "CheckoutGroupRates": {
        "type": "object",
        "properties": {
          "groupingId": {
            "type": "string",
            "nullable": true
          },
          "shippingRates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeShippingRate"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CheckoutGroupShippingMethod": {
        "type": "object",
        "properties": {
          "groupingId": {
            "type": "string",
            "nullable": true
          },
          "shippingRate": {
            "$ref": "#/components/schemas/CommerceRuntimeShippingRate"
          }
        },
        "additionalProperties": false
      },
      "CheckoutAction": {
        "type": "object",
        "properties": {
          "actionName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DigitalWallet": {
        "type": "object",
        "properties": {
          "digitalWalletData": {
            "type": "string",
            "description": "Digital wallet data.\r\nNote: Transform the Json data to a string.",
            "nullable": true
          },
          "cartId": {
            "type": "string",
            "description": "Cart ID\r\nNote: This property should only be set if the order is not created and user opted to \r\ncreate the order from cart using digital wallet.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Digital wallet contract"
      },
      "ItemsForDestination": {
        "type": "object",
        "properties": {
          "destinationId": {
            "type": "string",
            "nullable": true
          },
          "itemIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ItemsAndDeliveryDates": {
        "type": "object",
        "properties": {
          "deliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "itemIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentGatewayInteraction": {
        "type": "object",
        "properties": {
          "gatewayInteractionId": {
            "type": "integer",
            "description": "Gateway Transaction Id from PCIaaS.  Not populated by incoming request.",
            "format": "int32",
            "nullable": true
          },
          "gatewayTransactionId": {
            "type": "string",
            "description": "Gateway Transaction Id from PCIaaS.  Not populated by incoming request.",
            "nullable": true
          },
          "gatewayAuthCode": {
            "type": "string",
            "description": "Gateway Transaction Id from PCIaaS.  Not populated by incoming request.",
            "nullable": true
          },
          "gatewayAVSCodes": {
            "type": "string",
            "description": "Not populated by incoming request.",
            "nullable": true
          },
          "gatewayCVV2Codes": {
            "type": "string",
            "description": "Not populated by incoming request.",
            "nullable": true
          },
          "gatewayResponseCode": {
            "type": "string",
            "description": "Not populated by incoming request.",
            "nullable": true
          },
          "gatewayResponseText": {
            "type": "string",
            "description": "Gateway response text. Supplied by PCIaaS.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a manually entered payment gateway interaction."
      },
      "PaymentAction": {
        "type": "object",
        "properties": {
          "actionName": {
            "type": "string",
            "description": "Name of the Action to post",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO currency code for the transaction. Currently, only USD is supported.",
            "nullable": true
          },
          "checkNumber": {
            "type": "string",
            "description": "If paying by check, the check number.",
            "nullable": true
          },
          "returnUrl": {
            "type": "string",
            "description": "If paying by Paypal Express or some other potential non-gateway payment provider, a return redirect URL must be provided.",
            "nullable": true
          },
          "cancelUrl": {
            "type": "string",
            "description": "If paying by Paypal Express or some other potential non-gateway payment provider, a cancel redirect URL must be provided.\r\nThis will be used if something goes wrong on the third-party side.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount of funds to withdraw to pay for this order.",
            "format": "double",
            "nullable": true
          },
          "interactionDate": {
            "type": "string",
            "description": "Date the interaction occurred",
            "format": "date-time",
            "nullable": true
          },
          "newBillingInfo": {
            "$ref": "#/components/schemas/BillingInfo"
          },
          "referenceSourcePaymentId": {
            "type": "string",
            "description": "Reference payment id from which to copy the billing info.",
            "nullable": true
          },
          "manualGatewayInteraction": {
            "$ref": "#/components/schemas/PaymentGatewayInteraction"
          },
          "externalTransactionId": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data from payment providers",
            "nullable": true
          },
          "recaptcha": {
            "type": "string",
            "description": "Recaptcha for validation.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AbstractFulfillmentItem": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Code of the Product to be fulfilled.",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the order item",
            "format": "int32"
          },
          "fulfillmentItemType": {
            "type": "string",
            "description": "The type of fulfillment item",
            "nullable": true
          },
          "lineId": {
            "type": "integer",
            "description": "The line id associated with the fulfillment.",
            "format": "int32",
            "nullable": true
          },
          "optionAttributeFQN": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PackageItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractFulfillmentItem"
          }
        ],
        "additionalProperties": false,
        "description": "An item in a package representing a particular product."
      },
      "CollectionOfPackageItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the fulfillment unit.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "A human-readable identifier for this fulfillment unit.  If not set on create, will be autogenerated as a string of the form\r\n    {fulfillmentUnitType} #{next available int}",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of the fulfillment unit\r\nSee FulfillmentStatusConst",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageItem"
            },
            "description": "List of items in the fulfillment unit",
            "nullable": true
          },
          "fulfillmentDate": {
            "type": "string",
            "description": "Date of the pickup",
            "format": "date-time",
            "nullable": true
          },
          "fulfillmentLocationCode": {
            "type": "string",
            "description": "Location code from which to obtain this item",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Actions that can be taken on this fulfillment unit",
            "nullable": true
          },
          "changeMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeChangeMessage"
            },
            "description": "Change messages related to the fulfillment unit.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeTracking": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PackingSlipItemDetail": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {},
            "description": "Gets or Sets Attributes",
            "nullable": true
          },
          "lineId": {
            "type": "integer",
            "description": "Gets or Sets LineId",
            "format": "int32",
            "nullable": true
          },
          "originalOrderItemId": {
            "type": "string",
            "description": "Gets or Sets OriginalOrderItemId",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "Gets or Sets Quantity",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimePackage": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionOfPackageItem"
          }
        ],
        "properties": {
          "shippingMethodCode": {
            "type": "string",
            "description": "Code describing the shipping method.",
            "nullable": true
          },
          "shippingMethodName": {
            "type": "string",
            "description": "Name of the shipping method",
            "nullable": true
          },
          "shipmentId": {
            "type": "string",
            "description": "ID of the related shipment",
            "nullable": true
          },
          "trackingNumber": {
            "type": "string",
            "description": "Tracking number of this package (to support classic use cases)",
            "nullable": true
          },
          "trackingNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tracking number of this package",
            "nullable": true
          },
          "packagingType": {
            "type": "string",
            "description": "Packaging type of this package",
            "nullable": true
          },
          "hasLabel": {
            "type": "boolean",
            "description": "If there is a shipping label present for this Package, this will be set to true"
          },
          "measurements": {
            "$ref": "#/components/schemas/CommerceRuntimePackageMeasurements"
          },
          "carrier": {
            "type": "string",
            "description": "Carrier of this package",
            "nullable": true
          },
          "signatureRequired": {
            "type": "boolean",
            "description": "SignatureRequired for this package",
            "nullable": true
          },
          "trackings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeTracking"
            },
            "description": "Tracking number and url data for this package",
            "nullable": true
          },
          "packingSlipItemDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackingSlipItemDetail"
            },
            "description": "PackingSlipItemDetails for this package",
            "nullable": true
          },
          "packingSlipNumber": {
            "type": "integer",
            "description": "PackingSlipNumber for this package",
            "format": "int32",
            "nullable": true
          },
          "returnTrackings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeTracking"
            },
            "nullable": true
          },
          "returnTrackingNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "returnCarrier": {
            "type": "string",
            "nullable": true
          },
          "packageId": {
            "type": "string",
            "nullable": true
          },
          "manifestId": {
            "type": "string",
            "nullable": true
          },
          "labelFormat": {
            "type": "string",
            "nullable": true
          },
          "integratorId": {
            "type": "string",
            "nullable": true
          },
          "fxcbPackNotificationId": {
            "type": "string",
            "nullable": true
          },
          "fxcbDocumentsUrl": {
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes a package that will be shipped to somebody"
      },
      "Adjustment": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "internalComment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderNote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the note. System-supplied and read-only.",
            "nullable": true
          },
          "text": {
            "type": "string",
            "description": "Text of the note. Maximum 250 characters.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Internal notes that a merchant may add to the order. Maximum 250 characters."
      },
      "OrderValidationMessage": {
        "type": "object",
        "properties": {
          "orderItemId": {
            "type": "string",
            "description": "Order item id that this message applies to.  Can be empty.",
            "nullable": true
          },
          "messageType": {
            "type": "string",
            "description": "Identifier to indicate the type of the message, See OrderValidatorMessageTypeConst for options.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Actual message returned by the validator.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Validation message returned by an order validator."
      },
      "OrderValidationResult": {
        "type": "object",
        "properties": {
          "validationId": {
            "type": "string",
            "description": "Identifier set by the capability that states the id of this specific validation attempt",
            "nullable": true
          },
          "validatorName": {
            "type": "string",
            "description": "Identifier set by the capability that states the specific name of this validator.",
            "nullable": true
          },
          "validatorType": {
            "type": "string",
            "description": "Identifies the type of the validator (types are enumerated in OrderValidatorTypeConst)",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of the order validation result.  See OrderValidatorStatusConst for options.",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "DateTime that this validation result was created",
            "format": "date-time",
            "nullable": true
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderValidationMessage"
            },
            "description": "Messages returned by the order validator",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The result of an order validator."
      },
      "Refund": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of this order transaction.",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "description": "Unique identifier of the order with which this refund is associated.",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "description": "Merchant-entered reason for this refund.",
            "nullable": true
          },
          "reasonCode": {
            "type": "string",
            "nullable": true
          },
          "payment": {
            "$ref": "#/components/schemas/Payment"
          },
          "amount": {
            "type": "number",
            "description": "Amount refunded.",
            "format": "double"
          },
          "refundMethod": {
            "type": "string",
            "description": "Refund Method.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Refund associated with an order. A refund is a single exchange of money from merchant to customer\r\nthat either encapsulates a refund to a credit card or an issuance of a store credit.\r\nA refund does not reduce the 'amount collected' on an order and it is possible for a refund to exceed the total order amount."
      },
      "CommerceRuntimeCredit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of this order transaction.",
            "nullable": true
          },
          "parentPaymentId": {
            "type": "string",
            "description": "The paymentid of the Parent Payment associated with this Credit (if applicable).",
            "nullable": true
          },
          "parentPaymentInteractionId": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount credited.",
            "format": "double"
          },
          "giftCard": {
            "$ref": "#/components/schemas/GatewayGiftCard"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimePickupItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractFulfillmentItem"
          }
        ],
        "additionalProperties": false,
        "description": "Item that goes into the pickup to determine which items will be picked up."
      },
      "CollectionOfPickupItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the fulfillment unit.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "A human-readable identifier for this fulfillment unit.  If not set on create, will be autogenerated as a string of the form\r\n    {fulfillmentUnitType} #{next available int}",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of the fulfillment unit\r\nSee FulfillmentStatusConst",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimePickupItem"
            },
            "description": "List of items in the fulfillment unit",
            "nullable": true
          },
          "fulfillmentDate": {
            "type": "string",
            "description": "Date of the pickup",
            "format": "date-time",
            "nullable": true
          },
          "fulfillmentLocationCode": {
            "type": "string",
            "description": "Location code from which to obtain this item",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Actions that can be taken on this fulfillment unit",
            "nullable": true
          },
          "changeMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeChangeMessage"
            },
            "description": "Change messages related to the fulfillment unit.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Pickup": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionOfPickupItem"
          }
        ],
        "additionalProperties": false,
        "description": "Represents a pickup by a customer from a merchant."
      },
      "DigitalPackageItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractFulfillmentItem"
          }
        ],
        "properties": {
          "giftCardCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionOfDigitalPackageItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the fulfillment unit.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "A human-readable identifier for this fulfillment unit.  If not set on create, will be autogenerated as a string of the form\r\n    {fulfillmentUnitType} #{next available int}",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of the fulfillment unit\r\nSee FulfillmentStatusConst",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DigitalPackageItem"
            },
            "description": "List of items in the fulfillment unit",
            "nullable": true
          },
          "fulfillmentDate": {
            "type": "string",
            "description": "Date of the pickup",
            "format": "date-time",
            "nullable": true
          },
          "fulfillmentLocationCode": {
            "type": "string",
            "description": "Location code from which to obtain this item",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Actions that can be taken on this fulfillment unit",
            "nullable": true
          },
          "changeMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeChangeMessage"
            },
            "description": "Change messages related to the fulfillment unit.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DigitalPackage": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionOfDigitalPackageItem"
          }
        ],
        "additionalProperties": false
      },
      "CommerceRuntimeShipmentStatusReason": {
        "type": "object",
        "properties": {
          "reasonCode": {
            "type": "string",
            "nullable": true
          },
          "moreInfo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeLink": {
        "type": "object",
        "properties": {
          "deprecation": {
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true
          },
          "hreflang": {
            "type": "string",
            "nullable": true
          },
          "media": {
            "type": "string",
            "nullable": true
          },
          "rel": {
            "type": "string",
            "nullable": true
          },
          "templated": {
            "type": "boolean",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeTaskInput": {
        "type": "object",
        "properties": {
          "helpMessage": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "maxLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maximum": {
            "type": "number",
            "format": "double"
          },
          "minLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minimum": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {},
            "nullable": true
          },
          "pattern": {
            "type": "string",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FulfillmentTask": {
        "type": "object",
        "properties": {
          "links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CommerceRuntimeLink"
            },
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "completed": {
            "type": "boolean",
            "nullable": true
          },
          "completedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeTaskInput"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "skippable": {
            "type": "boolean",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "taskId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeWorkflowState": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "completedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "processInstanceId": {
            "type": "string",
            "nullable": true
          },
          "shipmentState": {
            "type": "string",
            "nullable": true
          },
          "taskList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentTask"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeGiftCard": {
        "type": "object",
        "properties": {
          "activationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cardNumber": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "creditType": {
            "type": "string",
            "nullable": true
          },
          "creditValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "currentBalance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "customerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "initialBalance": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShipmentItem": {
        "type": "object",
        "properties": {
          "lineId": {
            "type": "integer",
            "format": "int32"
          },
          "originalOrderItemId": {
            "type": "string",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "nullable": true
          },
          "productCode": {
            "type": "string",
            "nullable": true
          },
          "variationProductCode": {
            "type": "string",
            "nullable": true
          },
          "optionAttributeFQN": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "fulfillmentLocationCode": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "isTaxable": {
            "type": "boolean"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "type": "number",
            "format": "double"
          },
          "actualPrice": {
            "type": "number",
            "format": "double"
          },
          "overridePrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "itemDiscount": {
            "type": "number",
            "format": "double"
          },
          "lineItemCost": {
            "type": "number",
            "format": "double"
          },
          "itemTax": {
            "type": "number",
            "format": "double"
          },
          "shipping": {
            "type": "number",
            "format": "double"
          },
          "shippingDiscount": {
            "type": "number",
            "format": "double"
          },
          "shippingTax": {
            "type": "number",
            "format": "double"
          },
          "handling": {
            "type": "number",
            "format": "double"
          },
          "handlingDiscount": {
            "type": "number",
            "format": "double"
          },
          "handlingTax": {
            "type": "number",
            "format": "double"
          },
          "duty": {
            "type": "number",
            "format": "double"
          },
          "isPackagedStandAlone": {
            "type": "boolean",
            "nullable": true
          },
          "readyForPickupQuantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "backorderReleaseDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "measurements": {
            "$ref": "#/components/schemas/CommerceRuntimePackageMeasurements"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeProductOption"
            },
            "nullable": true
          },
          "data": {
            "type": "object",
            "nullable": true
          },
          "taxData": {
            "type": "object",
            "nullable": true
          },
          "weightedShipmentAdjustment": {
            "type": "number",
            "format": "double"
          },
          "weightedLineItemTaxAdjustment": {
            "type": "number",
            "format": "double"
          },
          "weightedShippingAdjustment": {
            "type": "number",
            "format": "double"
          },
          "weightedShippingTaxAdjustment": {
            "type": "number",
            "format": "double"
          },
          "weightedHandlingAdjustment": {
            "type": "number",
            "format": "double"
          },
          "weightedHandlingTaxAdjustment": {
            "type": "number",
            "format": "double"
          },
          "weightedDutyAdjustment": {
            "type": "number",
            "format": "double"
          },
          "taxableShipping": {
            "type": "number",
            "format": "double"
          },
          "taxableLineItemCost": {
            "type": "number",
            "format": "double"
          },
          "taxableHandling": {
            "type": "number",
            "format": "double"
          },
          "fulfillmentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeFulfillmentField"
            },
            "nullable": true
          },
          "isAssemblyRequired": {
            "type": "boolean",
            "nullable": true
          },
          "parentItemId": {
            "type": "string",
            "nullable": true
          },
          "childItemIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "giftCards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeGiftCard"
            },
            "nullable": true
          },
          "locatorName": {
            "type": "string",
            "nullable": true
          },
          "inventoryTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryTags"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeCanceledReason": {
        "type": "object",
        "properties": {
          "reasonCode": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "moreInfo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeCanceledItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShipmentItem"
          }
        ],
        "properties": {
          "originalQuantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "canceledReason": {
            "$ref": "#/components/schemas/CommerceRuntimeCanceledReason"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeFulfillmentShopperNotes": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "string",
            "nullable": true
          },
          "deliveryInstructions": {
            "type": "string",
            "nullable": true
          },
          "giftMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeCustomer": {
        "type": "object",
        "properties": {
          "customerContact": {
            "$ref": "#/components/schemas/CommerceRuntimeContact"
          },
          "data": {
            "description": "Custom data",
            "nullable": true
          },
          "isDestinationCommercial": {
            "type": "boolean",
            "description": "Destination Commercial Flag",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShipmentNote": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "noteId": {
            "type": "string",
            "nullable": true
          },
          "noteText": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FulfillmentAlternateContact": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First Name of alternate contact during order process",
            "nullable": true
          },
          "lastNameOrSurname": {
            "type": "string",
            "description": "Last Name of alternate contact during order process",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email Address of alternate contact during order process",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone Number of alternate contact during order process",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeShipment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the shipment",
            "nullable": true
          },
          "externalShipmentId": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "orderNumber": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "customerAccountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "customerTaxId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "shipmentType": {
            "type": "string",
            "nullable": true
          },
          "shippingMethodCode": {
            "type": "string",
            "nullable": true
          },
          "shippingMethodName": {
            "type": "string",
            "nullable": true
          },
          "fulfillmentLocationCode": {
            "type": "string",
            "nullable": true
          },
          "origin": {
            "$ref": "#/components/schemas/CommerceRuntimeContact"
          },
          "destination": {
            "$ref": "#/components/schemas/CommerceRuntimeDestination"
          },
          "shipmentStatus": {
            "type": "string",
            "nullable": true
          },
          "shipmentStatusReason": {
            "$ref": "#/components/schemas/CommerceRuntimeShipmentStatusReason"
          },
          "transferShipmentNumbers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "isTransfer": {
            "type": "boolean",
            "nullable": true
          },
          "originalShipmentNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "parentCheckoutNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "parentShipmentNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "fulfillmentStatus": {
            "type": "string",
            "nullable": true
          },
          "workflowProcessId": {
            "type": "string",
            "nullable": true
          },
          "workflowProcessContainerId": {
            "type": "string",
            "nullable": true
          },
          "workflowState": {
            "$ref": "#/components/schemas/CommerceRuntimeWorkflowState"
          },
          "backorderCreatedDate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "fulfillmentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "orderSubmitDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "pickStatus": {
            "type": "string",
            "nullable": true
          },
          "pickType": {
            "type": "string",
            "nullable": true
          },
          "changeMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeChangeMessage"
            },
            "nullable": true
          },
          "packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimePackage"
            },
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentItem"
            },
            "nullable": true
          },
          "canceledItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeCanceledItem"
            },
            "nullable": true
          },
          "data": {
            "type": "object",
            "nullable": true
          },
          "taxData": {
            "type": "object",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "shipmentAdjustment": {
            "type": "number",
            "format": "double"
          },
          "lineItemSubtotal": {
            "type": "number",
            "format": "double"
          },
          "lineItemTaxAdjustment": {
            "type": "number",
            "format": "double"
          },
          "lineItemTaxTotal": {
            "type": "number",
            "format": "double"
          },
          "lineItemTotal": {
            "type": "number",
            "format": "double"
          },
          "shippingAdjustment": {
            "type": "number",
            "format": "double"
          },
          "shippingSubtotal": {
            "type": "number",
            "format": "double"
          },
          "shippingTaxAdjustment": {
            "type": "number",
            "format": "double"
          },
          "shippingTaxTotal": {
            "type": "number",
            "format": "double"
          },
          "shippingTotal": {
            "type": "number",
            "format": "double"
          },
          "handlingAdjustment": {
            "type": "number",
            "format": "double"
          },
          "handlingSubtotal": {
            "type": "number",
            "format": "double"
          },
          "handlingTaxAdjustment": {
            "type": "number",
            "format": "double"
          },
          "handlingTaxTotal": {
            "type": "number",
            "format": "double"
          },
          "handlingTotal": {
            "type": "number",
            "format": "double"
          },
          "dutyAdjustment": {
            "type": "number",
            "format": "double"
          },
          "dutyTotal": {
            "type": "number",
            "format": "double"
          },
          "total": {
            "type": "number",
            "format": "double"
          },
          "cost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "externalOrderId": {
            "type": "string",
            "nullable": true
          },
          "isExpress": {
            "type": "boolean",
            "nullable": true
          },
          "readyToCapture": {
            "type": "boolean"
          },
          "pickupInfo": {
            "type": "object",
            "nullable": true
          },
          "shopperNotes": {
            "$ref": "#/components/schemas/CommerceRuntimeFulfillmentShopperNotes"
          },
          "customer": {
            "$ref": "#/components/schemas/CommerceRuntimeCustomer"
          },
          "shipmentNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentNote"
            },
            "nullable": true
          },
          "alternateContact": {
            "$ref": "#/components/schemas/FulfillmentAlternateContact"
          }
        },
        "additionalProperties": false
      },
      "Order": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommerceAggregate"
          }
        ],
        "properties": {
          "orderNumber": {
            "type": "integer",
            "description": "Order Number. This is an integer that is only assigned after an order is placed and enters the open state.",
            "format": "int32",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "Identifies the location at which the order was placed if the order was placed externally.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Version for concurrency purposes",
            "nullable": true
          },
          "parentOrderId": {
            "type": "string",
            "description": "If this Order has a parent order, this should be the parent's ID.",
            "nullable": true
          },
          "parentOrderNumber": {
            "type": "integer",
            "description": "If this order has a parent order, this should be the parent's Mozu.CommerceRuntime.Contracts.Orders.Order.OrderNumber.",
            "format": "int32",
            "nullable": true
          },
          "parentCheckoutId": {
            "type": "string",
            "description": "If this order originated from a multi-ship enabled site, this is the identifier of the originating checkout.",
            "nullable": true
          },
          "parentCheckoutNumber": {
            "type": "integer",
            "description": "If this order originated from a multi-ship enabled site, this is the number of the originating checkout.",
            "format": "int32",
            "nullable": true
          },
          "partialOrderNumber": {
            "type": "integer",
            "description": "If this order originated from a checkout, this is a sequence number out of the total orders created from that checkout.",
            "format": "int32",
            "nullable": true
          },
          "partialOrderCount": {
            "type": "integer",
            "description": "If this order originated from a checkout, this is the total number of orders created from that checkout.",
            "format": "int32",
            "nullable": true
          },
          "isPartialOrder": {
            "type": "boolean",
            "description": "Returns {true} if this order originated from a checkout and has sibling partial orders, otherwise {false}."
          },
          "parentReturnId": {
            "type": "string",
            "description": "If this order was created as part of a return, this should be the return's ID.",
            "nullable": true
          },
          "parentReturnNumber": {
            "type": "integer",
            "description": "If this order was created as part of a return, this should be the return's ReturnNumber.",
            "format": "int32",
            "nullable": true
          },
          "originalCartId": {
            "type": "string",
            "description": "Unique identifier for the cart that was converted to order.",
            "nullable": true
          },
          "originalQuoteId": {
            "type": "string",
            "description": "If this order originated from a quote, this is the identifier of the originating quote.",
            "nullable": true
          },
          "originalQuoteNumber": {
            "type": "integer",
            "description": "If this order originated from a quote, this is the number of the originating quote.",
            "format": "int32",
            "nullable": true
          },
          "priceListCode": {
            "type": "string",
            "description": "Pricelist code for the order",
            "nullable": true
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Actions available to the payment",
            "nullable": true
          },
          "shopperNotes": {
            "$ref": "#/components/schemas/CommerceRuntimeShopperNotes"
          },
          "customerAccountId": {
            "type": "integer",
            "description": "Unique identifier of the customer account.",
            "format": "int32",
            "nullable": true
          },
          "customerTaxId": {
            "type": "string",
            "description": "The customers tax ID.  If Customer Account ID exists in the system, will set this.",
            "nullable": true
          },
          "isTaxExempt": {
            "type": "boolean",
            "description": "Unique identifier of the customer account.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email address of the customer at the time the order is placed.",
            "nullable": true
          },
          "alternateContact": {
            "$ref": "#/components/schemas/AlternateContact"
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address of the user placing the order. (User or customer?)",
            "nullable": true
          },
          "sourceDevice": {
            "type": "string",
            "description": "Source device of the user placing the order. (User or customer?)",
            "nullable": true
          },
          "acceptsMarketing": {
            "type": "boolean",
            "description": "Does the customer accept marketing",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Current status of the order, which can be viewed in OrderStatusConst. System-supplied and read-only.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Is this Order Online or Offline? Online means shopper entered at checkout, offline means a phone order.",
            "nullable": true
          },
          "paymentStatus": {
            "type": "string",
            "description": "Current status of payment, which can be \"Null,\" \"AwaitingCheck,\" \"AwaitingPayment,\" \"Paid,\" \"Authorized,\" or \"Void.\" \r\nSystem-supplied and read-only.",
            "nullable": true
          },
          "returnStatus": {
            "type": "string",
            "description": "System-supplied and read-only.",
            "nullable": true
          },
          "isEligibleForReturns": {
            "type": "boolean",
            "description": "Marker for determining if the order is a) complete or b) has some items that are shipped and not part of any other return"
          },
          "totalCollected": {
            "type": "number",
            "description": "Total amount of money collected on the order via payments.",
            "format": "double"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderAttribute"
            },
            "nullable": true
          },
          "adjustment": {
            "$ref": "#/components/schemas/Adjustment"
          },
          "shippingAdjustment": {
            "$ref": "#/components/schemas/Adjustment"
          },
          "handlingAdjustment": {
            "$ref": "#/components/schemas/Adjustment"
          },
          "shippingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDiscount"
            },
            "nullable": true
          },
          "handlingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
            },
            "description": "The list of historically-applied handling discounts.  The active one will have IsExcluded == false",
            "nullable": true
          },
          "handlingAmount": {
            "type": "number",
            "description": "Order level handling fees excluding any discounts.",
            "format": "double",
            "nullable": true
          },
          "handlingSubTotal": {
            "type": "number",
            "description": "Handling fees for the Order as well as OrderItems (e.g. if the Order has a $5 handling fee and an OrderItem has a $2 handling fee per item quantity and the quantity of items is 2 then the value in this property would be $9)",
            "format": "double",
            "nullable": true
          },
          "handlingTotal": {
            "type": "number",
            "description": "Handling fees including any discounts.",
            "format": "double",
            "nullable": true
          },
          "dutyAmount": {
            "type": "number",
            "description": "Order level duty or tariff amount. Does not take into account duties or tariffs specifically on items on the order",
            "format": "double",
            "nullable": true
          },
          "dutyTotal": {
            "type": "number",
            "description": "Duties or tariffs for the Order as well as OrderItems (e.g. if the Order has a $5 duty or tariff for any reason and an OrderItem has a $2 duty or tariff then the value in this property would be $7)",
            "format": "double",
            "nullable": true
          },
          "fulfillmentStatus": {
            "type": "string",
            "description": "Current fulfillment status, which can be \"NotFulfilled,\", \"PartiallyFulfilled\", or \"Fufilled.\" \r\nSystem-supplied and read-only.  Values are available in FulfillmentStatusConst of this class.",
            "nullable": true
          },
          "isFulfillable": {
            "type": "boolean",
            "description": "Flag to indicate whether it is safe to proceed with fulfillment on shipments on the order."
          },
          "submittedDate": {
            "type": "string",
            "description": "When the customer placed (submitted) the order.",
            "format": "date-time",
            "nullable": true
          },
          "cancelledDate": {
            "type": "string",
            "description": "Date the order was cancelled.",
            "format": "date-time",
            "nullable": true
          },
          "closedDate": {
            "type": "string",
            "description": "Date the order was closed. A closed order means that the order has been processed and items shipped.",
            "format": "date-time",
            "nullable": true
          },
          "acceptedDate": {
            "type": "string",
            "description": "When the order was accepted by the merchant",
            "format": "date-time",
            "nullable": true
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderNote"
            },
            "description": "Internal notes that a merchant may add to the order. Maximum 250 characters.",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
            },
            "description": "List of items in the order.",
            "nullable": true
          },
          "validationResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderValidationResult"
            },
            "description": "Validation results for the order when processes against validation capabilities.",
            "nullable": true
          },
          "billingInfo": {
            "$ref": "#/components/schemas/BillingInfo"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            },
            "description": "Payment transaction associated with this order. It is the entire payment interchange between the merchant \r\nwho is forwarding the customer's payment information and the payment service who is authorizing and \r\ncapturing payment. Payment can be either by credit card, check, or PayPal.",
            "nullable": true
          },
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Refund"
            },
            "description": "Refunds associated with this order. A refund is a single exchange of money from merchant to customer\r\nthat either encapsulates a refund to a credit card or an issuance of a store credit.\r\nRefunds does not reduce the 'amount collected' on an order and it is possible for refunds to exceed the total order amount.",
            "nullable": true
          },
          "credits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeCredit"
            },
            "nullable": true
          },
          "packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimePackage"
            },
            "description": "Shipping package associated with this order.",
            "nullable": true
          },
          "pickups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pickup"
            },
            "description": "Fulfillment pickups associated with this order.",
            "nullable": true
          },
          "digitalPackages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DigitalPackage"
            },
            "description": "Fulfillment digital packages associated with this order.",
            "nullable": true
          },
          "shipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeShipment"
            },
            "description": "Package shipments associated with this order.",
            "nullable": true
          },
          "isDraft": {
            "type": "boolean",
            "description": "Is this order a draft version",
            "nullable": true
          },
          "hasDraft": {
            "type": "boolean",
            "description": "Does this order have a draft version.",
            "nullable": true
          },
          "isImport": {
            "type": "boolean",
            "description": "Was this order initiated from an external system",
            "nullable": true
          },
          "isHistoricalImport": {
            "type": "boolean",
            "description": "Indicates this was an order in a terminal state (completed/canceled) that was imported into the system for historical purposes.",
            "nullable": true
          },
          "importDate": {
            "type": "string",
            "description": "Date this item was imported",
            "format": "date-time",
            "nullable": true
          },
          "isUnified": {
            "type": "boolean",
            "description": "Was this order created by the Unified platform."
          },
          "externalId": {
            "type": "string",
            "description": "An order number to link this order to an external system",
            "nullable": true
          },
          "couponCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Coupon codes associated with this order.  Only set on order import.",
            "nullable": true
          },
          "invalidCoupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvalidCoupon"
            },
            "description": "A list of invalid coupons that were attempted on the order",
            "nullable": true
          },
          "amountAvailableForRefund": {
            "type": "number",
            "description": "This property represents AmountCaptured - AmountRefunded via returns.\r\nIt is read only.",
            "format": "double"
          },
          "amountRemainingForPayment": {
            "type": "number",
            "description": "A counter for how much of the order total has not been claimed by payments.\r\nThis is computed by Order.Total-(sum of Order.Payments where State is not voided/declined)",
            "format": "double"
          },
          "amountRefunded": {
            "type": "number",
            "description": "A counter for how much money has been issued in refunds.\r\nThis calculated field does NOT include refunds issued in returns.",
            "format": "double"
          },
          "readyToCapture": {
            "type": "boolean"
          },
          "isOptInForSms": {
            "type": "boolean",
            "description": "Whether the shopper opts in to curbside text notifications."
          },
          "subscriptionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "All the subscriptions associated with the current order.",
            "nullable": true
          },
          "continuityOrderOrdinal": {
            "type": "integer",
            "description": "The ordinal to track the Continuity order.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Order form."
      },
      "PaymentCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of payment transactions."
      },
      "ReasonItemBase": {
        "type": "object",
        "properties": {
          "reasonCode": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "needsMoreInfo": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RefundReasonItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReasonItemBase"
          }
        ],
        "additionalProperties": false
      },
      "RefundReasonCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundReasonItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderReturnableItem": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "The product code of the associated item.",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "description": "The name of the associated product.",
            "nullable": true
          },
          "shipmentNumber": {
            "type": "integer",
            "description": "Shipment Number associated with product",
            "format": "int32",
            "nullable": true
          },
          "shipmentItemId": {
            "type": "integer",
            "description": "Shipment Item Id Number associated with product",
            "format": "int32",
            "nullable": true
          },
          "quantityOrdered": {
            "type": "integer",
            "description": "The number of units ordered.",
            "format": "int32"
          },
          "quantityFulfilled": {
            "type": "integer",
            "description": "The number of units fulfilled.",
            "format": "int32"
          },
          "quantityReturned": {
            "type": "integer",
            "description": "The number if times this item configuration was found in live returns (not cancelled or rejected).",
            "format": "int32"
          },
          "quantityReturnable": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "fulfillmentStatus": {
            "type": "string",
            "nullable": true
          },
          "orderItemId": {
            "type": "string",
            "nullable": true
          },
          "orderLineId": {
            "type": "integer",
            "format": "int32"
          },
          "orderItemOptionAttributeFQN": {
            "type": "string",
            "nullable": true
          },
          "unitQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "parentProductCode": {
            "type": "string",
            "nullable": true
          },
          "parentProductName": {
            "type": "string",
            "nullable": true
          },
          "fulfillmentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeFulfillmentField"
            },
            "description": "List of unique product identifiers for an item on shipment",
            "nullable": true
          },
          "sku": {
            "type": "string",
            "nullable": true
          },
          "mfgPartNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderReturnableItemCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderReturnableItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of fulfillment information for items on an order."
      },
      "RepriceShipmentObject": {
        "type": "object",
        "properties": {
          "originalShipment": {
            "$ref": "#/components/schemas/CommerceRuntimeShipment"
          },
          "newShipment": {
            "$ref": "#/components/schemas/CommerceRuntimeShipment"
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeAppeasementReason": {
        "type": "object",
        "properties": {
          "reasonCode": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "moreInfo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShipmentAdjustment": {
        "type": "object",
        "properties": {
          "itemAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "itemTaxAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shippingAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shippingTaxAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "handlingAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "handlingTaxAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "appeasementReason": {
            "$ref": "#/components/schemas/CommerceRuntimeAppeasementReason"
          }
        },
        "additionalProperties": false
      },
      "ShipmentItemAdjustment": {
        "type": "object",
        "properties": {
          "overridePrice": {
            "type": "number",
            "description": "Unit price override",
            "format": "double",
            "nullable": true
          },
          "appeasementReason": {
            "$ref": "#/components/schemas/CommerceRuntimeAppeasementReason"
          }
        },
        "additionalProperties": false
      },
      "SplitShipmentsObject": {
        "type": "object",
        "properties": {
          "originalShipment": {
            "$ref": "#/components/schemas/CommerceRuntimeShipment"
          },
          "newShipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeShipment"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CancelReasonItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReasonItemBase"
          }
        ],
        "additionalProperties": false
      },
      "CancelReasonCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CancelReasonItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Paged collection of orders. This is paged in case it's returning a long list the orders. \r\nfor a store."
      },
      "OrderAction": {
        "type": "object",
        "properties": {
          "actionName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PricingTaxContext": {
        "type": "object",
        "properties": {
          "taxContextId": {
            "type": "string",
            "nullable": true
          },
          "customerId": {
            "type": "string",
            "nullable": true
          },
          "taxExemptId": {
            "type": "string",
            "nullable": true
          },
          "originAddress": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          },
          "destinationAddress": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          }
        },
        "additionalProperties": false
      },
      "PricingProductPropertyValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "stringValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PricingProductAttribute": {
        "type": "object",
        "properties": {
          "inputType": {
            "type": "string",
            "nullable": true
          },
          "valueType": {
            "type": "string",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PricingProductProperty": {
        "type": "object",
        "properties": {
          "attributeFQN": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingProductPropertyValue"
            },
            "nullable": true
          },
          "attributeDetail": {
            "$ref": "#/components/schemas/PricingProductAttribute"
          },
          "isHidden": {
            "type": "boolean",
            "nullable": true
          },
          "isMultiValue": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PricingDiscountTarget": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "includedCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "excludedCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "includedCategoriesOperator": {
            "type": "string",
            "nullable": true
          },
          "excludedCategoriesOperator": {
            "type": "string",
            "nullable": true
          },
          "includedProductCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "excludedProductCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "includeAllProducts": {
            "type": "boolean"
          },
          "shippingMethods": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "shippingZones": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PricingDiscountCondition": {
        "type": "object",
        "properties": {
          "requiresCoupon": {
            "type": "boolean"
          },
          "couponCode": {
            "type": "string",
            "nullable": true
          },
          "minimumQuantityProductsRequiredInCategories": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "includedCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "excludedCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "minimumQuantityRequiredProducts": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "includedProductCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "excludedProductCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "paymentWorkflows": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "customerSegmentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "minimumOrderAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maximumOrderAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "minimumLifetimeValueAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "minimumCategorySubtotalBeforeDiscounts": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "minDistinctProductsRequired": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PricingDiscount": {
        "type": "object",
        "properties": {
          "discountId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "friendlyDescription": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "scope": {
            "type": "string",
            "nullable": true
          },
          "maxRedemptions": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maximumUsesPerUser": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "requiresAuthenticatedUser": {
            "type": "boolean"
          },
          "doesNotApplyToProductsWithSalePrice": {
            "type": "boolean"
          },
          "maximumRedemptionsPerOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maximumDiscountValuePerOrder": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxDiscountValuePerRedemption": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "doesNotApplyToMultiShipToOrders": {
            "type": "boolean",
            "nullable": true
          },
          "includedPriceLists": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "redemptions": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "amountType": {
            "type": "string",
            "nullable": true
          },
          "target": {
            "$ref": "#/components/schemas/PricingDiscountTarget"
          },
          "condition": {
            "$ref": "#/components/schemas/PricingDiscountCondition"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "deprecated": true
          },
          "stackingLayer": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PricingAppliedDiscount": {
        "type": "object",
        "properties": {
          "impact": {
            "type": "number",
            "format": "double"
          },
          "discount": {
            "$ref": "#/components/schemas/PricingDiscount"
          },
          "couponCode": {
            "type": "string",
            "nullable": true
          },
          "couponSetId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PricingAppliedLineItemDiscount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PricingAppliedDiscount"
          }
        ],
        "properties": {
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "impactPerUnit": {
            "type": "number",
            "format": "double"
          },
          "isForced": {
            "type": "boolean"
          },
          "normalizedImpact": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PricingAppliedLineItemProductDiscount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PricingAppliedLineItemDiscount"
          }
        ],
        "properties": {
          "appliesToSalePrice": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PricingAppliedLineItemShippingDiscount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PricingAppliedLineItemDiscount"
          }
        ],
        "properties": {
          "shippingMethodCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PricingTaxableLineItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "productCode": {
            "type": "string",
            "nullable": true
          },
          "variantProductCode": {
            "type": "string",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "productProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingProductProperty"
            },
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "lineItemPrice": {
            "type": "number",
            "format": "double"
          },
          "discountTotal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "discountedTotal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shippingAmount": {
            "type": "number",
            "format": "double"
          },
          "handlingAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "feeTotal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "isTaxable": {
            "type": "boolean",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "object",
            "nullable": true
          },
          "productDiscount": {
            "$ref": "#/components/schemas/PricingAppliedLineItemProductDiscount"
          },
          "shippingDiscount": {
            "$ref": "#/components/schemas/PricingAppliedLineItemShippingDiscount"
          },
          "productDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingAppliedLineItemProductDiscount"
            },
            "nullable": true
          },
          "shippingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingAppliedLineItemShippingDiscount"
            },
            "nullable": true
          },
          "originAddress": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          },
          "destinationAddress": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          }
        },
        "additionalProperties": false
      },
      "PricingTaxAttribute": {
        "type": "object",
        "properties": {
          "fullyQualifiedName": {
            "type": "string",
            "nullable": true
          },
          "attributeDefinitionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {},
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PricingAppliedOrderShippingDiscount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PricingAppliedDiscount"
          }
        ],
        "properties": {
          "shippingMethodCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PricingTaxableOrder": {
        "type": "object",
        "properties": {
          "orderDate": {
            "type": "string",
            "format": "date-time"
          },
          "taxContext": {
            "$ref": "#/components/schemas/PricingTaxContext"
          },
          "lineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingTaxableLineItem"
            },
            "nullable": true
          },
          "shippingAmount": {
            "type": "number",
            "format": "double"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "handlingFee": {
            "type": "number",
            "format": "double"
          },
          "originalDocumentCode": {
            "type": "string",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "orderNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "originalOrderDate": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "object",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingTaxAttribute"
            },
            "nullable": true
          },
          "shippingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingAppliedOrderShippingDiscount"
            },
            "nullable": true
          },
          "shippingDiscount": {
            "$ref": "#/components/schemas/PricingAppliedOrderShippingDiscount"
          },
          "orderDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingAppliedDiscount"
            },
            "nullable": true
          },
          "orderDiscount": {
            "$ref": "#/components/schemas/PricingAppliedDiscount"
          },
          "handlingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricingAppliedDiscount"
            },
            "nullable": true
          },
          "handlingDiscount": {
            "$ref": "#/components/schemas/PricingAppliedDiscount"
          },
          "shippingMethodCode": {
            "type": "string",
            "nullable": true
          },
          "shippingMethodName": {
            "type": "string",
            "nullable": true
          },
          "taxRequestType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FulfillmentAction": {
        "type": "object",
        "properties": {
          "actionName": {
            "type": "string",
            "description": "Name of the fulfillment action to perform",
            "nullable": true
          },
          "packageIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ids of packages to mark as fulfilled",
            "nullable": true
          },
          "pickupIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ids of pickups to mark as fulfilled",
            "nullable": true
          },
          "digitalPackageIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ids of digital packages to mark as fulfilled",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Action to perform a fulfillment operation on the order."
      },
      "OrderItemCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of items listed on the order."
      },
      "CommerceRuntimeAttributeMetadataItem": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 50,
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeAttributeLocalizedContent": {
        "type": "object",
        "properties": {
          "localeCode": {
            "maxLength": 8,
            "type": "string",
            "nullable": true
          },
          "value": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeAttributeValidation": {
        "type": "object",
        "properties": {
          "regularExpression": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "minStringLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxStringLength": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minNumericValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxNumericValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "minDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "maxDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AttributeValueLocalizedContent": {
        "required": [
          "localeCode",
          "value"
        ],
        "type": "object",
        "properties": {
          "localeCode": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeAttributeVocabularyValue": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 50,
            "type": "string"
          },
          "sequence": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isHidden": {
            "type": "boolean",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/AttributeValueLocalizedContent"
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeAttribute": {
        "required": [
          "attributeCode",
          "displayGroup",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "adminName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "namespace": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "attributeCode": {
            "maxLength": 50,
            "type": "string"
          },
          "inputType": {
            "type": "string",
            "nullable": true
          },
          "valueType": {
            "type": "string"
          },
          "dataType": {
            "type": "string",
            "nullable": true
          },
          "attributeMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAttributeMetadataItem"
            },
            "nullable": true
          },
          "attributeFQN": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/CommerceRuntimeAttributeLocalizedContent"
          },
          "validation": {
            "$ref": "#/components/schemas/CommerceRuntimeAttributeValidation"
          },
          "vocabularyValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAttributeVocabularyValue"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "isActive": {
            "type": "boolean",
            "nullable": true
          },
          "isRequired": {
            "type": "boolean",
            "nullable": true
          },
          "isReadOnly": {
            "type": "boolean"
          },
          "isMultiValued": {
            "type": "boolean",
            "nullable": true
          },
          "isVisible": {
            "type": "boolean",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "displayGroup": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CommerceRuntimeAttributeCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAttribute"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QuoteComment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the comment. System-supplied and read-only.",
            "nullable": true
          },
          "text": {
            "type": "string",
            "description": "Text of the comment.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Quote Comments submitted by B2B buyer/seller."
      },
      "AuditRecordChangeField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Field/Property name which got Modified.",
            "nullable": true
          },
          "oldValue": {
            "type": "string",
            "description": "Old value of the field.",
            "nullable": true
          },
          "newValue": {
            "type": "string",
            "description": "Newly updated value of the field.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This will contains actual change in the AuditHistory."
      },
      "AuditRecordChange": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Indicate type of change like Add, Update, Remove.",
            "nullable": true
          },
          "path": {
            "type": "string",
            "description": "This will applicable only to the nested objects (Collection) on the quote like Quote Items, Destination contacts.\r\nThis field will indicate which item in the collection got modified exactly.\r\nNull path means it's not nested on the quote object.",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditRecordChangeField"
            },
            "description": "List of actual changes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Group all related audit changes into AuditRecordChange."
      },
      "AuditRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditRecordChange"
            },
            "description": "List of changes for this audit history entry.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Group a set of changes made by a single user into a single audit history entry."
      },
      "Quote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the quote",
            "nullable": true
          },
          "siteId": {
            "type": "integer",
            "description": "Unique identifier of the Site.",
            "format": "int32"
          },
          "tenantId": {
            "type": "integer",
            "description": "Unique identifier of the Tenant.",
            "format": "int32"
          },
          "number": {
            "type": "integer",
            "description": "Auto generated number that is assigned to the quote when creation.",
            "format": "int32",
            "nullable": true
          },
          "submittedDate": {
            "type": "string",
            "description": "When the customer placed (submitted) the Quote.",
            "format": "date-time",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeOrderItem"
            },
            "description": "List of items in the Quote.",
            "nullable": true
          },
          "auditHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditRecord"
            },
            "description": "User modified Audit History",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteComment"
            },
            "description": "Comments on a quote",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "When the quote will no longer be active. That is, the quote is considered abandoned. \r\nDate in UTC Date/Time.",
            "format": "date-time",
            "nullable": true
          },
          "fulfillmentInfo": {
            "$ref": "#/components/schemas/FulfillmentInfo"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "customerAccountId": {
            "type": "integer",
            "description": "Unique identifier of the customer account.",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email address for checkout",
            "nullable": true
          },
          "customerTaxId": {
            "type": "string",
            "description": "The customers tax ID. If Customer Account ID exists in the system, will set this.",
            "nullable": true,
            "readOnly": true
          },
          "isTaxExempt": {
            "type": "boolean",
            "description": "Unique identifier of the customer account.",
            "nullable": true,
            "readOnly": true
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO Currency Code.",
            "nullable": true
          },
          "priceListCode": {
            "type": "string",
            "description": "Pricelist code for the checkout",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data for a given vendor set within the commerce process.",
            "nullable": true
          },
          "taxData": {
            "type": "object",
            "description": "Storage for any additional/custom tax data.",
            "nullable": true
          },
          "channelCode": {
            "type": "string",
            "description": "Unique identifier of the channel for this item.",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "Identifies the location at which the order was placed if the order was placed externally.",
            "nullable": true
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address of the user placing the order. (User or customer?)",
            "nullable": true
          },
          "sourceDevice": {
            "type": "string",
            "description": "Source device of the user placing the order. (User or customer?)",
            "nullable": true
          },
          "visitId": {
            "type": "string",
            "description": "Identifies the Visit ID that was current when the order was placed or when the cart was last updated.",
            "nullable": true
          },
          "webSessionId": {
            "type": "string",
            "description": "Identifies the web session used to place the order or last update the cart.",
            "nullable": true
          },
          "customerInteractionType": {
            "type": "string",
            "description": "Determines the interaction type that a customer will use to create this object.\r\nValid values are: Website, Store, Call, Unknown",
            "nullable": true
          },
          "orderDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
            },
            "nullable": true
          },
          "subTotal": {
            "type": "number",
            "description": "Subtotal before any coupon codes, taxes, fees, etc.",
            "format": "double"
          },
          "itemLevelProductDiscountTotal": {
            "type": "number",
            "description": "The total value of item-level product discounts.",
            "format": "double"
          },
          "orderLevelProductDiscountTotal": {
            "type": "number",
            "description": "The total value of order-level (group-level) product discounts.",
            "format": "double"
          },
          "itemTaxTotal": {
            "type": "number",
            "description": "Total tax on products.",
            "format": "double"
          },
          "adjustment": {
            "$ref": "#/components/schemas/Adjustment"
          },
          "itemTotal": {
            "type": "number",
            "description": "The total product cost, accounting for discounts and tax.",
            "format": "double"
          },
          "total": {
            "type": "number",
            "description": "Final total",
            "format": "double"
          },
          "shippingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDiscount"
            },
            "nullable": true
          },
          "itemLevelShippingDiscountTotal": {
            "type": "number",
            "format": "double"
          },
          "orderLevelShippingDiscountTotal": {
            "type": "number",
            "format": "double"
          },
          "shippingAmount": {
            "type": "number",
            "format": "double"
          },
          "shippingAdjustment": {
            "$ref": "#/components/schemas/Adjustment"
          },
          "shippingSubTotal": {
            "type": "number",
            "format": "double"
          },
          "shippingTax": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shippingTaxTotal": {
            "type": "number",
            "format": "double"
          },
          "shippingTotal": {
            "type": "number",
            "format": "double"
          },
          "handlingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAppliedDiscount"
            },
            "nullable": true
          },
          "itemLevelHandlingDiscountTotal": {
            "type": "number",
            "format": "double"
          },
          "orderLevelHandlingDiscountTotal": {
            "type": "number",
            "format": "double"
          },
          "handlingAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "handlingAdjustment": {
            "$ref": "#/components/schemas/Adjustment"
          },
          "handlingSubTotal": {
            "type": "number",
            "format": "double"
          },
          "handlingTax": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "handlingTaxTotal": {
            "type": "number",
            "format": "double"
          },
          "handlingTotal": {
            "type": "number",
            "format": "double"
          },
          "dutyAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "dutyTotal": {
            "type": "number",
            "format": "double"
          },
          "feeTotal": {
            "type": "number",
            "format": "double"
          },
          "isDraft": {
            "type": "boolean",
            "description": "Is this quote a draft"
          },
          "hasDraft": {
            "type": "boolean",
            "description": "Does this quote have a draft"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "couponCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Coupon codes associated with this Quote.",
            "nullable": true
          },
          "invalidCoupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvalidCoupon"
            },
            "description": "A list of invalid coupons that were attempted on the quote",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QuoteCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Quote"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QuoteAdjustment": {
        "type": "object",
        "properties": {
          "adjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shippingAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "handlingAdjustment": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReturnReason": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The reason this item has been returned.",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity associated with this Reason.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a quantity associated with a given reason for a return"
      },
      "ReturnBundle": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Merchant-created code that uniquely identifies the product.",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The amount of this particular product in a bundle that is in this Return",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ReturnItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifer of the return",
            "nullable": true
          },
          "orderItemId": {
            "type": "string",
            "description": "The OrderItem that this ReturnItem is associated with. Either the Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.Product or the OrderItemId must be present.",
            "nullable": true
          },
          "orderLineId": {
            "type": "integer",
            "description": "The OrderLineId that this ReturnItem is associated with. If Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.OrderItemId is present, the OrderLineId should be present also.",
            "format": "int32",
            "nullable": true
          },
          "orderItemOptionAttributeFQN": {
            "type": "string",
            "description": "If this item refers to a product extra, provide the item's corresponding OptionAttributeFQN.",
            "nullable": true
          },
          "product": {
            "$ref": "#/components/schemas/CommerceRuntimeProduct"
          },
          "reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnReason"
            },
            "description": "For a given return reason (Damaged, Defective, MissingParts, DifferentExpectations, Late, NoLongerWanted, Other),\r\nhow many of the above OrderItem are to be replaced.  This value is provided by the Shopper when they request a Return.",
            "nullable": true
          },
          "excludeProductExtras": {
            "type": "boolean",
            "description": "If this return item refers to a product/bundle that has product extras, this specifies whether those child items should be included or excluded.\r\nFor backward compatibility, a null value will be treated as false, i.e. include the extras.",
            "nullable": true
          },
          "returnType": {
            "type": "string",
            "description": "Specifies whether the requested resolution for this item is Refund or Replace.",
            "nullable": true
          },
          "returnNotRequired": {
            "type": "boolean",
            "description": "Specifies whether this item should be returned to the merchant, e.g. if the item is irreparably damaged and it's not worth shipping back.\r\nEven if this is set to true, Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.QuantityShipped should still be set to the quantity of items involved in the return."
          },
          "quantityReceived": {
            "type": "integer",
            "description": "The amount of this item actually received from the shopper. It may differ from the sum of the ReturnReasons.\r\nThis is populated by the system when the Receive action is performed.",
            "format": "int32"
          },
          "receiveStatus": {
            "type": "string",
            "description": "Describes the receive status of this item.\r\nIf Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ReturnNotRequired is {true}, then this should be Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReceiveStatusConst.NOT_REQUESTED.\r\nOtherwise the value should be Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReceiveStatusConst.RECEIVED or Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReceiveStatusConst.WAITING depending on Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.QuantityReceived.",
            "nullable": true
          },
          "quantityShipped": {
            "type": "integer",
            "description": "The quantity of this item fulfilled on the parent order.",
            "format": "int32"
          },
          "replaceStatus": {
            "type": "string",
            "description": "Describes the replace status of this item.\r\nIf Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ReturnType is Mozu.CommerceRuntime.Contracts.Returns.Return.ReturnTypeConst.REFUND, then this should be Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReplaceStatusConst.NOT_REQUESTED.\r\nOtherwise the value should be Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReplaceStatusConst.REPLACED or Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemReplaceStatusConst.NOT_REPLACED depending on Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.QuantityReplaced.",
            "nullable": true
          },
          "quantityRestockable": {
            "type": "integer",
            "description": "Of the quantity returned, how many of this item can be added back into the inventory? This item is set by the merchant via an UpdateReturn call.\r\nIt is used during the Restock action to set some quantity of this item back into the inventory management system.",
            "format": "int32"
          },
          "quantityRestocked": {
            "type": "integer",
            "description": "Field to specify How many items added to inventory",
            "format": "int32"
          },
          "refundAmount": {
            "type": "number",
            "description": "If a refund is issued for the return, how much of the refund amount is for this particular item.",
            "format": "double",
            "nullable": true
          },
          "returnProcessingFeeApplied": {
            "type": "number",
            "description": "The processing fee on the item that gets persisted into the database",
            "format": "double",
            "nullable": true
          },
          "shippingAndHandlingRefunded": {
            "type": "boolean",
            "description": "Determines if shipping and handling is returned on the item",
            "nullable": true
          },
          "quantityRefunded": {
            "type": "integer",
            "description": "The quantity of the item being refunded is specified in this field",
            "format": "int32"
          },
          "refundStatus": {
            "type": "string",
            "description": "Describes the refund status of this item.\r\nIf Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ReturnType is Mozu.CommerceRuntime.Contracts.Returns.Return.ReturnTypeConst.REPLACE, then this should be Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemRefundStatusConst.NOT_REQUESTED.\r\nOtherwise the value should be Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemRefundStatusConst.REFUNDED or Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.ItemRefundStatusConst.NOT_REFUNDED depending on Mozu.CommerceRuntime.Contracts.Returns.ReturnItem.RefundAmount.",
            "nullable": true
          },
          "quantityReplaced": {
            "type": "integer",
            "description": "Specifies the quantity of this item that has been marked as replaced, i.e. it has been used to generate a replacement order for the return.\r\nNote that the quantity replaced may not line up with the quantity of the item actually sent back to the shopper,\r\nsuch as in the case of an exchange, e.g. swapping a medium shirt for a large shirt.",
            "format": "int32",
            "nullable": true
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderNote"
            },
            "description": "Any merchant-supplied notes for this ReturnItem.",
            "nullable": true
          },
          "productLossAmount": {
            "type": "number",
            "description": "The loss incurred of the returned products, used for accounting purposes.",
            "format": "double",
            "nullable": true
          },
          "productLossTaxAmount": {
            "type": "number",
            "description": "The tax on the returned products, used for accounting purposes.",
            "format": "double",
            "nullable": true
          },
          "shippingLossAmount": {
            "type": "number",
            "description": "The loss incurred of the returned product shipping, used for accounting purposes.",
            "format": "double",
            "nullable": true
          },
          "shippingLossTaxAmount": {
            "type": "number",
            "description": "The tax on the returned product shipping, used for accounting purposes.",
            "format": "double",
            "nullable": true
          },
          "bundledProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnBundle"
            },
            "description": "Deprecated. Not used.",
            "nullable": true,
            "deprecated": true
          },
          "totalWithoutWeightedShippingAndHandling": {
            "type": "number",
            "description": "Taxable Subtotal including Weighted Order amounts",
            "format": "double",
            "nullable": true
          },
          "totalWithWeightedShippingAndHandling": {
            "type": "number",
            "description": "Line item total with line item, Tax, Weighted Tax with Weighted shipping and handling costs",
            "format": "double",
            "nullable": true
          },
          "shipmentItemId": {
            "type": "integer",
            "description": "The identifer of the item",
            "format": "int32",
            "nullable": true
          },
          "shipmentNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "data": {
            "type": "object",
            "description": "Custom data for a given vendor set within the commerce process.",
            "nullable": true
          },
          "inventoryTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryTags"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "Return": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Identifier for this Return",
            "nullable": true
          },
          "customerAccountId": {
            "type": "integer",
            "description": "Unique identifier of the customer account.",
            "format": "int32",
            "nullable": true
          },
          "visitId": {
            "type": "string",
            "description": "Identifies the Visit ID that was current when the order was placed or when the cart was last updated.",
            "nullable": true
          },
          "webSessionId": {
            "type": "string",
            "description": "Identifies the web session used to place the order or last update the cart.",
            "nullable": true
          },
          "customerInteractionType": {
            "type": "string",
            "description": "Determines the interaction type that a customer will use to create this object.\r\nValid values are: Website, Store, Call, Unknown",
            "nullable": true
          },
          "availableActions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Current available actions.",
            "nullable": true
          },
          "returnNumber": {
            "type": "integer",
            "description": "A human-facing identifier that is unique within a tenant to represent the sequential ordering of Returns.",
            "format": "int32",
            "nullable": true
          },
          "contact": {
            "$ref": "#/components/schemas/CommerceRuntimeContact"
          },
          "locationCode": {
            "type": "string",
            "description": "Location code where the return was made/processed",
            "nullable": true
          },
          "originalOrderId": {
            "type": "string",
            "description": "The Id of the Order that this Return was generated from.",
            "nullable": true
          },
          "originalOrderNumber": {
            "type": "integer",
            "description": "The order number that this return was generated from.",
            "format": "int32",
            "nullable": true
          },
          "returnOrderId": {
            "type": "string",
            "description": "The Id of the Order that represents the items shipped to the shopper for this Return.",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO Currency Code. Currently, only USD is supported.",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "The Status of the Return.  Valid values are \r\n    Null, Created, ReturnAuthorized, ReturnPending, ReturnReceived, ReplacementShipped, Cancelled, and Closed.",
            "nullable": true
          },
          "receiveStatus": {
            "type": "string",
            "description": "A rollup status describing whether the return items have been received.\r\nSee Mozu.CommerceRuntime.Contracts.Returns.Return.ReceiveStatusConst for possible values.",
            "nullable": true
          },
          "refundStatus": {
            "type": "string",
            "description": "A rollup status describing whether the return items have been refunded.\r\nSee Mozu.CommerceRuntime.Contracts.Returns.Return.RefundStatusConst for possible values.",
            "nullable": true
          },
          "replaceStatus": {
            "type": "string",
            "description": "A rollup status describing whether the return items have been marked as replaced.\r\nSee Mozu.CommerceRuntime.Contracts.Returns.Return.ReplaceStatusConst for possible values.",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnItem"
            },
            "description": "The list of items being returned by the Shopper and replaced by the Merchant in this Return.",
            "nullable": true
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderNote"
            },
            "description": "Any Merchant Notes for this Return.",
            "nullable": true
          },
          "rmaDeadline": {
            "type": "string",
            "description": "The deadline for a Shopper to ship the items in this Return to the Merchant.",
            "format": "date-time",
            "nullable": true
          },
          "returnType": {
            "type": "string",
            "description": "Specifies whether this Return was a Refund or a Replace",
            "nullable": true
          },
          "refundAmount": {
            "type": "number",
            "description": "If this Return was refunded,  how much was credited to the shopper? This amount is summed from the refund payments.",
            "format": "double",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Payment"
            },
            "description": "Any Refund payments associated with this Return.",
            "nullable": true
          },
          "packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimePackage"
            },
            "description": "Shipping package associated with this return.",
            "nullable": true
          },
          "productLossTotal": {
            "type": "number",
            "description": "The Total Loss Amount is equal to the (cost of item) * quantity of item returned.\r\nIt is meant to represent the product value to the merchant of the items damaged or returned by a shopper.",
            "format": "double",
            "nullable": true
          },
          "shippingLossTotal": {
            "type": "number",
            "description": "The Shipping Loss Total is equal to the (shipping cost of item) * quantity of item returned.\r\nIt is meant to represent the product value to the merchant of the items damaged or returned by a shopper.",
            "format": "double",
            "nullable": true
          },
          "lossTotal": {
            "type": "number",
            "description": "Sum of the ProductLossTotal and the ShippingLossTotal.",
            "format": "double",
            "nullable": true
          },
          "productLossTaxTotal": {
            "type": "number",
            "description": "The Total Taxes assessed on the product loss.",
            "format": "double",
            "nullable": true
          },
          "shippingLossTaxTotal": {
            "type": "number",
            "description": "The Total Taxes assessed on the shipping loss.",
            "format": "double",
            "nullable": true
          },
          "tenantId": {
            "type": "integer",
            "description": "Unique identifier of the Tenant.",
            "format": "int32",
            "nullable": true
          },
          "siteId": {
            "type": "integer",
            "description": "Unique identifier of the Site.",
            "format": "int32",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the current user.",
            "nullable": true
          },
          "channelCode": {
            "type": "string",
            "description": "Unique identifier of the channel for this item.",
            "nullable": true
          },
          "changeMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeChangeMessage"
            },
            "description": "Change messages related to the return.",
            "nullable": true
          },
          "actionRequired": {
            "type": "boolean",
            "description": "To find Returns that have failed to refund."
          },
          "isUnified": {
            "type": "boolean",
            "description": "Was this return created by the Unified platform."
          },
          "canInitiateRefund": {
            "type": "boolean",
            "description": "To identify Return is refundable or not."
          },
          "refundToGC": {
            "type": "boolean",
            "description": "If this Flag is true, Refund will be done on new Gift Card."
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ReturnCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Return"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Paged collection of returns. This is paged in case it's returning a long list of returns. \r\nfor a store."
      },
      "ReturnAction": {
        "type": "object",
        "properties": {
          "actionName": {
            "type": "string",
            "description": "The name of the action to perform, query the Return for Available actions to get valid values. This is required.",
            "nullable": true
          },
          "returnIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of Returns upon which to perform the action. This is required.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ReasonCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReturnItemSpecifier": {
        "type": "object",
        "properties": {
          "returnItemId": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RestockableReturnItem": {
        "type": "object",
        "properties": {
          "returnItemId": {
            "type": "string",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "locationCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CarrierServiceGenerateLabelResponse": {
        "type": "object",
        "properties": {
          "imageURL": {
            "type": "string",
            "nullable": true
          },
          "integratorId": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "trackingNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutoRefundRequest": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string",
            "nullable": true
          },
          "returnProcessingFee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "refundShippingAndHandling": {
            "type": "boolean",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RefundPaymentAction": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "nullable": true
          },
          "paymentType": {
            "type": "string",
            "nullable": true
          },
          "paymentSource": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "amountCollected": {
            "type": "number",
            "format": "double"
          },
          "amountRefunded": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ReturnRefundDetails": {
        "type": "object",
        "properties": {
          "returnId": {
            "type": "string",
            "nullable": true
          },
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundPaymentAction"
            },
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnItem"
            },
            "nullable": true
          },
          "defaultReturnProcessingFee": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ReturnItemCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of return items listed on the order."
      },
      "WishlistItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommerceItem"
          }
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the wishlist line item. System-supplied and read-only.",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "description": "Comments for the wishlist item that are entered by the wishlist owner",
            "nullable": true
          },
          "priorityType": {
            "type": "string",
            "description": "Wishlist item priority that is a hint to how much this item is needed or desired",
            "nullable": true
          },
          "purchasableStatusType": {
            "type": "string",
            "description": "Is the item purchasable?",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A single line item of an order."
      },
      "Wishlist": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommerceAggregate"
          }
        ],
        "properties": {
          "customerAccountId": {
            "type": "integer",
            "description": "Unique identifier of the customer account.",
            "format": "int32",
            "nullable": true
          },
          "typeTag": {
            "type": "string",
            "description": "Open-ended Wishlist type, e.g. giftlist, gift, wish, wishlist, wedding, baby.  If the merchant does not need this level of granularity this is always null.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the list that is display or potentially shared (e.g. friends and family may view this description if the list is public and the list owner may see this description when viewing the list)",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WishlistItem"
            },
            "description": "List of items in the wishlist.",
            "nullable": true
          },
          "privacyType": {
            "type": "string",
            "description": "Is the wishlist public, viewable only through a shared link, or private (only the owner of the list may view the wishlist)?",
            "nullable": true
          },
          "sortOrder": {
            "type": "integer",
            "description": "The wishlist sort order.  Useful for scenarios where there is a default wishlist and other wishlists or arbitrary ordering",
            "format": "int32",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "Version for concurrency purposes",
            "nullable": true
          },
          "isImport": {
            "type": "boolean",
            "description": "Was this object imported from an external system?",
            "nullable": true
          },
          "importDate": {
            "type": "string",
            "description": "Date this item was imported",
            "format": "date-time",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "description": "Id in an external system this item may have been imported from",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details of the wishlist, items listed in the wishlist, and any system messages."
      },
      "WishlistCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Wishlist"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Paged collection of wishlists."
      },
      "WishlistItemCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WishlistItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Paged collection of wishlists."
      },
      "KeyValuePair2": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContentHttpContent": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyValuePair2"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ContentHttpRequestMessage": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/ContentHttpContent"
          },
          "method": {
            "$ref": "#/components/schemas/HttpMethod"
          },
          "requestUri": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyValuePair2"
            },
            "nullable": true,
            "readOnly": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ContentActiveDateRange": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The beginning of the active date range of this document",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "The end of the active date range for this document",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Document": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Read-only, system generated 32 digit alpha-numeric string that uniquely identifies the document.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The fully qualified name of the document including path.\r\nUnique within the documentList. This field is a required field, but it can be updated.",
            "nullable": true
          },
          "path": {
            "type": "string",
            "description": "ReadOnly, path portion of the Name property.",
            "nullable": true
          },
          "publishSetCode": {
            "type": "string",
            "description": "The name of the publish set that this document belongs to, if any.",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "description": "If applicable, the file extension associated with the document content.",
            "nullable": true
          },
          "documentTypeFQN": {
            "type": "string",
            "description": "The full name of the documentType that underlies this document.\r\nThis field must be supplied upon document creation and cannot be updated.",
            "nullable": true
          },
          "listFQN": {
            "type": "string",
            "description": "The fully qualified name of the documentList to which the document belongs.\r\nThis field is read-only and represents which documentList the document is created in.",
            "nullable": true
          },
          "contentLength": {
            "type": "integer",
            "description": "The size of the content subresource in decimal number of OCTETs.\r\nWhen updating the content subresource, the  contentLength is captured from the\r\nContent-Length header, if present, or is otherwise computed from the total size of the http body.",
            "format": "int64",
            "nullable": true
          },
          "contentMimeType": {
            "type": "string",
            "description": "The mime type of the document's binary content, provided via the Content-Type header when updating the content\r\nsubresource. If no value is provided then \"application/octet-stream\" is set by default.",
            "nullable": true
          },
          "contentUpdateDate": {
            "type": "string",
            "description": "The date and time the most recent content update was made via the content subresource. UTC date/time.\r\nSystem-supplied and read-only.",
            "format": "date-time",
            "nullable": true
          },
          "publishState": {
            "type": "string",
            "description": "The current publish status of the document. If publishing is not supported or is currently disabled in the\r\ndocumentList then the value will be \"active\".\r\nIf publishing is supported and enabled, then the publish state may be \"draft\" or \"active\". A document may have both\r\nan \"active\" and \"draft\" version. The publishState\r\ndenotes which version of the document being interacted with. This field is read-only.",
            "nullable": true
          },
          "properties": {
            "description": "A JSON object of name/value pairs. Name parts are matched against the underlying documentType properties names. Any\r\nmatching name parts must have a value part that conforms to the matching property schema.\r\nAny non-matching name/value pairs are considered dynamic schema and may have a value part of valid JSON.\r\nThe properties field can be used for sorting/filtering and can be projected in the documents returned within a\r\ndocumentList view.",
            "nullable": true
          },
          "insertDate": {
            "type": "string",
            "description": "The date and time the document was added to the documentList. This field is system-supplied and read-only.",
            "format": "date-time",
            "nullable": true
          },
          "updateDate": {
            "type": "string",
            "description": "The date and time the most recent document update was made. If publishing is enabled, then this value will\r\nrepresent\r\nthe last draft update if the publishState is draft, or the last publish date if the publishState is active.",
            "format": "date-time",
            "nullable": true
          },
          "activeDateRange": {
            "$ref": "#/components/schemas/ContentActiveDateRange"
          }
        },
        "additionalProperties": false,
        "description": "Container for schema-enforced and schemaless data. A document is primarily used to store content (html, text,\r\nnumbers, dates, JSON, binary data) that is directly or indirectly used for the storefront website experience\r\nand may be addressed via the Hypr theming engine language. A document belongs to a documentList and has an\r\nunderlying documentType.  The documentType describes any required and optional schema. Additionally, a binary\r\nobject may be stored on the document's content subresource and edge cached via the Mozu CDN."
      },
      "DocumentCollection": {
        "type": "object",
        "properties": {
          "subPaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentMoveSummary": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "moveCount": {
            "type": "integer",
            "format": "int64"
          },
          "duplicateCount": {
            "type": "integer",
            "format": "int64"
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "sourcePath": {
            "type": "string",
            "nullable": true
          },
          "destPath": {
            "type": "string",
            "nullable": true
          },
          "preview": {
            "type": "boolean"
          },
          "renameDuplicates": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Summary information for Move operation"
      },
      "DocumentCopyRequest": {
        "type": "object",
        "properties": {
          "documentIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Document Id's to copy",
            "nullable": true
          },
          "destinationPath": {
            "type": "string",
            "description": "The destination path to copy documents to",
            "nullable": true
          },
          "updatedBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentCopyMessage": {
        "type": "object",
        "properties": {
          "originalDocumentId": {
            "type": "string",
            "nullable": true
          },
          "documentId": {
            "type": "string",
            "nullable": true
          },
          "documentName": {
            "type": "string",
            "nullable": true
          },
          "documentPublishSetCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "success": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DocumentCopyResponse": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentCopyMessage"
            },
            "nullable": true
          },
          "numberFilesCopied": {
            "type": "integer",
            "format": "int32"
          },
          "numberFilesErrored": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ViewField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the field projected into the view document, meaning the name given to the target field after it is projected.\r\nThe name must be unique within the list of viewFields provided in the view.",
            "nullable": true
          },
          "target": {
            "type": "string",
            "description": "Specifies the document field to project. First-class fields will be returned on the document, but can be projected into the view properties. \r\nValid first-class fields include name, id, documentTypeFqn, listFqn and publishState. Dynamic fields within the properties field can be projected by prefixing the target string with \"properties.\"\r\nExample: \"properties.property1\". If a property is an object, then dot notation can be used to walk to particular subelements. Example: \"properties.property1.subProperty1\"\r\nIndividual array elements can be selected as well. Example: \"properties.property1.subProperty1.subSubArray[2].propertyOnArrayItem\"\r\nAny target miss will result in a null value returning for the projected field.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The projection of an individual field in a view."
      },
      "View": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A view is addressed via its name, which is unique within the documentList or documentListType in which it is defined.",
            "nullable": true
          },
          "usages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "tbd",
            "nullable": true
          },
          "metadata": {
            "description": "The metadata field allows arbitrary data to be stored on the view.",
            "nullable": true
          },
          "isVisibleInStorefront": {
            "type": "boolean",
            "description": "The isVisibleInStorefront field indicates whether documents in the view can be accessed from the Mozu storefront application. If true, the storefront application and storefront client application (javascript tier) \r\ncan GET documents from the view.",
            "nullable": true
          },
          "filter": {
            "type": "string",
            "description": "Filter criteria to apply automatically when documents from this view are accessed, using the standard Mozu filter syntax. Only documents matching the filter criteria will be returned. \r\nAny filter provided by an operation is combined with the view filter.",
            "nullable": true
          },
          "includeInactiveMode": {
            "type": "string",
            "description": "If view documents are requested with includeInactive=true, then this controls which documents return. If includeInactive is not provided or set to false, then only active documents return.\r\nIf not set, or set to \"all\", then all documents return.\r\nIf set to \"active\", then only documents within the active date range and documents with no active date range are returned.\r\nIf set to \"scheduled\", then only documents with an active date range in the future are returned.\r\nIf set to \"activeOrScheduled\", then only documents that are active or documents with an active date range in the future are returned.\r\nIf set to \"ended\", then only documents with an active date range in the past are returned.",
            "nullable": true
          },
          "isAdminDefault": {
            "type": "boolean",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewField"
            },
            "description": "Designation of which document fields are returned (projection) when GETing documents from the view.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A view provides GET access to documents within the documentList the view belongs to. The view can designate which document fields are returned (projection) and\r\na security model for providing GET access independent of the documentList's security model."
      },
      "DocumentList": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name component of the listFQN, name@namespace. The name must be unique within the namespace component and cannot be updated.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType.",
            "nullable": true
          },
          "namespace": {
            "type": "string",
            "description": "The namespace component of the listFQN, name@namespace. The issued dev account namespace must be used unless elevated privileges allow a blank namespace to be used. The namespace cannot be updated.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType.",
            "nullable": true
          },
          "listFQN": {
            "type": "string",
            "description": "The unique identifier of the documentList, represented by name@namespace. The listFQN must be provided when creating the documentList, or the name and namespace fields must be provided.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType.",
            "nullable": true
          },
          "documentTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of the full names (name@namespace) of the documentTypes supported by the documentList. A document in the documentList must belong to one of these documentTypes.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType. DocumentTypes can be added/removed to the documentList, even when\r\nbased on a documentListType. Existing documents that belong to a documentType removed from the documentList will not be removed.",
            "nullable": true
          },
          "supportsPublishing": {
            "type": "boolean",
            "description": "Determines if the documentList will support drafting and publishing documents. \r\nThis field defaults to false and cannot be updated.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType.",
            "nullable": true
          },
          "enablePublishing": {
            "type": "boolean",
            "description": "Determines if the documentList has publishing turned on or off. If the documentList has a supportsPublishing value of true, then the enablePublishing value will be honored.\r\nIf enablePublishing is true, then a document draft will be created for a document create or update operation. A document must then be published to become \"active\".\r\nIf enablePublish is false, then all document changes are immediately \"active\".\r\nIf enablePublish is true, then updating it to false will immediately publish all draft changes.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType, but can be overridden on update.",
            "nullable": true
          },
          "supportsActiveDateRanges": {
            "type": "boolean",
            "description": "Determines if the documentList will support ranges of dates that documents are considered 'active'. \r\nThis field defaults to false and cannot be updated.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType.",
            "nullable": true
          },
          "enableActiveDateRanges": {
            "type": "boolean",
            "description": "Determines if the documentList has ActiveDateRanges turned on or off. If the documentList has a supportsActiveDateRanges value of true, then the enableActiveDateRanges value will be honored.\r\nIf enableActiveDateRanges is true, then a document will only be returned if the request is made within the time frame the document has been set to be 'active'.\r\nIf enableActiveDateRanges is false, then the properties can be set but will not be honored.\r\nIf enableActiveDateRanges is true, then updating it to false will immediately start honoring the previously-set date range.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType, but can be overridden on update.",
            "nullable": true
          },
          "views": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/View"
            },
            "description": "An array of one or more views, which each allow GET access to a projection of fields from the documents in the given documentList. \r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType. Views can be added/removed to the documentList, even when\r\nthe documentList derives from a documentListType.",
            "nullable": true
          },
          "usages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings that describes to the Mozu platform the manner(s) in which a documentList can be used. The following values are valid:\r\nentitymanager -- the documentList should be visible in the Admin Content/Entities UI, which allows admin users to create, manage and publish documents within the documentList.\r\nsitebuilder -- the documentList should be visible in Site Builder. A documentList will display in the Site Builder Navigation Content List node, which supports document creation, management and web cms integration.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType. Usages can be added or removed from the documentList, even when the documentList derives from a\r\ndocumentListType.",
            "nullable": true
          },
          "security": {
            "type": "string",
            "description": "tbd",
            "nullable": true
          },
          "scopeId": {
            "type": "integer",
            "description": "Used in conjunction with the scopeType field to determine the exact context within which the documentList resides.\r\nExample: A documentList with a scopeId of 5 and scopeType of masterCatalog belongs to masterCatalog 5.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType. This value is read-only after the documentList is created.",
            "format": "int32",
            "nullable": true
          },
          "scopeType": {
            "type": "string",
            "description": "The context level the documentList resides in. Valid values are \"tenant\", \"masterCatalog\", \"catalog\" and \"site\". This field is used in conjunction with the scopeId field\r\nto determine the exact context within which this documentList resides. This field is read-only after insert.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType. This value is read-only after the documentList is created.",
            "nullable": true
          },
          "documentListType": {
            "type": "string",
            "description": "The full name of the documentListType (name@namespace) that underlies the documentList. This value is only populated when the Mozu platform creates a documentList from a documentListType.\r\nA documentList that is directly created cannot specify a documentListType. This field is therefore read-only.",
            "nullable": true
          },
          "metadata": {
            "description": "Allows arbitrary data to be stored on the documentList.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType, but can be overridden on update.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A container for documents and related settings, such as supported documentTypes and publishing. \r\nA documentList belongs to a Mozu context, denoted by the documentList scopyeType and scopeId fields. \r\nExample: documentList A belongs to catalog 123, denoted by the documentList scopeType value of catalog and scopeId value of 123.\r\nA documentList can only be accessed if the API context is inclusive of the documentList's scope.\r\nExample: documentList A belongs to catalog 123. An API call with an API context of catalog 123 will be able to address documentList A.\r\nExample: site 456 uses catalog 123. An API call with an API context of site 456 will be able to address documentList A.\r\nExample: masterCatalog 789 is the parent of catalog 123. An API call with an API context of masterCatalog 789 will NOT be able to address documentList A.\r\nDocuments can be created, queried, managed and published from within a documentList. A documentList may be directly created, or indirectly created from a documentListType."
      },
      "DocumentListCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentList"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentInstallation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the document to create.",
            "nullable": true
          },
          "documentTypeFQN": {
            "type": "string",
            "description": "The full name of the documentType that underlies this document.",
            "nullable": true
          },
          "properties": {
            "description": "The properties of this document.",
            "nullable": true
          },
          "locale": {
            "type": "string",
            "description": "tbd",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The definition of a document to create when a documentList is created."
      },
      "DocumentListType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name component of the documentListTypeFQN, name@namespace. The name must be unique within the namespace component and cannot be updated.\r\nEach documentList created from the documentListType will use this value.",
            "nullable": true
          },
          "namespace": {
            "type": "string",
            "description": "The namespace component of the documentListTypeFQN, name@namespace. The issued dev account namespace must be used unless elevated privileges allow a blank namespace to be used. The namespace cannot be updated.\r\nEach documentList created from the documentListType will use this value.",
            "nullable": true
          },
          "documentListTypeFQN": {
            "type": "string",
            "description": "The unique identifier of the documentListType, represented by name@namespace. The documentListTypeFQN must be provided when creating the documentListType, or the name and namespace fields must be provided.\r\nThis field cannot be updated and each documentList created from the documentListType will use this value.",
            "nullable": true
          },
          "scopeType": {
            "type": "string",
            "description": "The context level at which this documentListType will create documentLists. Valid values are \"tenant\", \"masterCatalog\", \"catalog\" and \"site\". This field is read-only after insert.",
            "nullable": true
          },
          "installationPackage": {
            "type": "string",
            "description": "Optionally, a documentListType can be defined in an installationPackage and then installed into a tenant. Installed documentListsTypes can only be updated via installation upgrades. \r\nCurrently only internal Mozu platform components can create installations. This field is system-supplied and read-only.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "The version of the installationPackge installed. This field is read-only.",
            "nullable": true
          },
          "defaultDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentInstallation"
            },
            "description": "The definition of any documents to create when a documentList is created.",
            "nullable": true
          },
          "documentTypeFQNs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The full names (name@namespace) of the types of documents that can be created within the documentLists belonging to this documentListType. \r\nEach documentList created from the documentListType will use this value, but it can be overridden in an individual documentList.",
            "nullable": true
          },
          "supportsPublishing": {
            "type": "boolean",
            "description": "Determines if documentLists belonging to this documentListType will support drafting and publishing documents. \r\nThis field defaults to false and cannot be updated. Each documentList created from the documentListType will use this value."
          },
          "enablePublishing": {
            "type": "boolean",
            "description": "Determines if documentLists belonging to this documentListType have publishing turned on or off. \r\nEach documentList created from the documentListType will use this value, but it can be overridden in an individual documentList.",
            "nullable": true
          },
          "supportsActiveDateRanges": {
            "type": "boolean",
            "description": "Determines if documentLists belonging to this documentListType will support drafting and ActiveDateRanges documents. \r\nThis field defaults to false and cannot be updated. Each documentList created from the documentListType will use this value."
          },
          "enableActiveDateRanges": {
            "type": "boolean",
            "description": "Determines if documentLists belonging to this documentListType have ActiveDateRanges turned on or off. \r\nEach documentList created from the documentListType will use this value, but it can be overridden in an individual documentList.",
            "nullable": true
          },
          "views": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/View"
            },
            "description": "An array of one or more views, which each allow GET access to a projection of fields from the documents in the given documentList. \r\nEach documentList created from this documentListType will use this value, but it can be overridden in an individual documentList.",
            "nullable": true
          },
          "usages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings that describes to the Mozu platform the manner(s) in which a documentList can be used. The following values are valid:\r\nentitymanager -- the documentList should be visible in the Admin Content/Entities screen, which allows admin users to create, manage and publish documents within the documentList.\r\nsitebuilder -- the documentList should be visible in Sitebuilder. A documentList will display in the Sitebuilder Navigation Content List node, which supports document creation, management and web cms integration.\r\nEach documentList created from this documentListType will use this value, but it can be overridden in an individual documentList.",
            "nullable": true
          },
          "metadata": {
            "description": "Allows arbitrary data to be stored on the documentListType. Each documentList created from this documentListType will use this value, \r\nbut it can be overridden in an individual documentList.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A documentListType instructs the Mozu platform to automatically create documentLists within a scopeType. Example: Creating a documentListType in tenant X with a \r\nscopeType of site tells the Mozu platform to immediately create a documentList in each site tenant X has. The Mozu platform will also automatically create a new \r\ndocumentList for every site subsequently provisioned in tenant X. Any defaultDocuments defined on the documentListType will be created within \r\neach documentList. Each documentList will be addressable via the documenetListType's fully qualified name and will, by default, use the documentListType's views, \r\nusages and metadata. Therefore the documentListType can be used to centrally manage each associated documentList."
      },
      "DocumentListTypeCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentListType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentDraftSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The system generated 32 digit alpha-numeric string that uniquely identifies the document.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The unique name of the document.",
            "nullable": true
          },
          "documentTypeFQN": {
            "type": "string",
            "description": "The full name of the documentType that underlies this document.",
            "nullable": true
          },
          "listFQN": {
            "type": "string",
            "description": "The fully qualified name of the documentList to which the document belongs.",
            "nullable": true
          },
          "activeUpdateDate": {
            "type": "string",
            "description": "The date and time the document was last published, if any.",
            "format": "date-time",
            "nullable": true
          },
          "draftUpdateDate": {
            "type": "string",
            "description": "The date and time the document draft was last updated.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The userId or applicationId that last updated the draft document.",
            "nullable": true
          },
          "activeUpdatedBy": {
            "type": "string",
            "nullable": true
          },
          "publishType": {
            "type": "string",
            "description": "Denotes the type of draft. \r\n\"Created\" -- the document has never been published. \r\n\"Updated\" -- the document has an \"active\" version and this is a subsequent draft.\r\n\"Deleted\" -- the \"active\" document will be permanently deleted when this draft is published.",
            "nullable": true
          },
          "publishSetCode": {
            "type": "string",
            "nullable": true
          },
          "masterCatalogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "catalogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "siteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Summary information on a Document Draft"
      },
      "DocumentDraftSummaryPagedCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentDraftSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddOrDeletePublishItem": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "nullable": true
          },
          "docListFQN": {
            "type": "string",
            "nullable": true
          },
          "scopeType": {
            "type": "string",
            "nullable": true
          },
          "scopeId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PublishSetSummary": {
        "type": "object",
        "properties": {
          "publishSetCode": {
            "type": "string",
            "description": "the code of the associated publish set",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "the count of documents in the associated publish set",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Summary information of documents in a publishing set"
      },
      "PublishSetSummaryPagedCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublishSetSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name component of the propertyType, name@namespace. The name must be unique within the namespace component and cannot be updated.",
            "nullable": true
          },
          "namespace": {
            "type": "string",
            "description": "The namespace component of the propertyType, name@namespace. The issued dev account namespace must be used unless elevated privileges allow a blank namespace to be used. The namespace cannot be updated.",
            "nullable": true
          },
          "propertyTypeFQN": {
            "type": "string",
            "description": "The unique identifier of the propertyTYpe, represented by name@namespace. The propertyTypeFQN must be provided when creating the propertyType, or the name and namespace fields must be provided.",
            "nullable": true
          },
          "adminName": {
            "type": "string",
            "description": "The administrative name of the propertyType.",
            "nullable": true
          },
          "installationPackage": {
            "type": "string",
            "description": "Optionally, a propertyType can be defined in an installationPackage and then installed into a tenant. Installed propertyTypes can only be updated via installation upgrades. \r\nCurrently only internal Mozu platform components can create installations. This field is system-supplied and read-only.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "The version of the installationPackge installed. This field is read-only.",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "description": "The underlying value type that can be held in the document's property value. Valid values are\r\nstring\r\nnumber\r\nboolean\r\ndatetime\r\njson\r\nThe dataType is analogous to an intrinsic value type in object oriented programming, or to a column data type in relational database terminology.",
            "nullable": true
          },
          "isQueryable": {
            "type": "boolean",
            "description": "tbd",
            "nullable": true
          },
          "isSortable": {
            "type": "boolean",
            "description": "tbd",
            "nullable": true
          },
          "isAggregatable": {
            "type": "boolean",
            "description": "tbd",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The schema a document property value must implement. A propertyType is created at a tenant scope and is therefore shared amongst all child contexts (masterCatalog, catalog, site).\r\nA propertyType is analogous to the type argument of a class property in object oriented programming. \r\nA propertyType's dataType field is analogous to an intrinsic value type in object oriented programming, or to a column data type in relational database terminology."
      },
      "Property": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name portion of the name/value pair stored on a document's properties field. The property name value must be unique within the properties defined on the documentType.\r\nThis value cannot be updated after property creation.",
            "nullable": true
          },
          "isRequired": {
            "type": "boolean",
            "description": "True if the property must be present on the document. This value is false by default."
          },
          "isMultiValued": {
            "type": "boolean",
            "description": "True if the property value is an array, where each array value must conform to the propertyType. When false, the property value must directly conform to the propertyType. This value is false by default."
          },
          "propertyType": {
            "$ref": "#/components/schemas/PropertyType"
          }
        },
        "additionalProperties": false,
        "description": "A schema element describing a name/value pair that can be stored on a document's properties field, where the name is directly defined by the propertyName and the value is constrained by the propertyType."
      },
      "DocumentType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name component of the documentType, name@namespace. The name must be unique within the namespace component and cannot be updated.",
            "nullable": true
          },
          "namespace": {
            "type": "string",
            "description": "The namespace component of the documentType, name@namespace. The issued dev account namespace must be used unless elevated privileges allow a blank namespace to be used. The namespace cannot be updated.",
            "nullable": true
          },
          "documentTypeFQN": {
            "type": "string",
            "description": "The unique identifier of the documentType, represented by name@namespace. The documentTypeFQN must be provided when creating the documentType, or the name and namespace fields must be provided.",
            "nullable": true
          },
          "adminName": {
            "type": "string",
            "description": "The administrative name of the documentType.",
            "nullable": true
          },
          "installationPackage": {
            "type": "string",
            "description": "Optionally, a documentType can be defined in an installationPackage and then installed into a tenant. Installed documentTypes can only be updated via installation upgrades. \r\nCurrently only internal Mozu platform components can create installations. This field is system-supplied and read-only.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "The version of the installationPackge installed. This field is read-only.",
            "nullable": true
          },
          "metadata": {
            "description": "Allows arbitrary data to be stored on the documentType.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "An array of the schema elements that a document implementing this documentType will have.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The schema a document must implement and associated metadata. A documentType is created at a tenant scope and is therefore shared amongst all child contexts (masterCatalog, catalog, site)."
      },
      "DocumentTypeCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyTypeCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressValidationRequest": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          }
        },
        "additionalProperties": false,
        "description": "Address Validation Request"
      },
      "AddressValidationResponse": {
        "type": "object",
        "properties": {
          "addressCandidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommerceRuntimeAddress"
            },
            "description": "Address Candidates",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Address Validation Response"
      },
      "CustomerUserAuthInfo": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CurrencyAmount": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "Currency code for the amount of the order. Currently, only \"USD\" is supported.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Total amount of the order. Currently, only US dollar amounts are supported.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "The currency code and amount of an order listed in the order history of a customer account. Currently, only USD is supported."
      },
      "CommerceSummary": {
        "type": "object",
        "properties": {
          "totalOrderAmount": {
            "$ref": "#/components/schemas/CurrencyAmount"
          },
          "orderCount": {
            "type": "integer",
            "description": "Number of orders listed in the order history of a customer account.",
            "format": "int32"
          },
          "lastOrderDate": {
            "type": "string",
            "description": "When the last order was placed.",
            "format": "date-time",
            "nullable": true
          },
          "wishlistCount": {
            "type": "integer",
            "description": "Number of wishlists listed in the wishlist count of a customer account",
            "format": "int32"
          },
          "visitsCount": {
            "type": "integer",
            "description": "Number of visits for this customer across the entire tenant.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Commerce (orders and wishlists) on a customer account which lists all the orders the customer has made with the order date, order amount, and status. Includes cancellations and returns.  Also includes wishlist information."
      },
      "ContactType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "isPrimary": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CustomerContact": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "integer",
            "format": "int32"
          },
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactType"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "faxNumber": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "middleNameOrInitial": {
            "type": "string",
            "nullable": true
          },
          "lastNameOrSurname": {
            "type": "string",
            "nullable": true
          },
          "companyOrOrganization": {
            "type": "string",
            "nullable": true
          },
          "phoneNumbers": {
            "$ref": "#/components/schemas/CommerceRuntimePhone"
          },
          "address": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          }
        },
        "additionalProperties": false,
        "description": "CustomerContact information for a customer account including the name, company, phone numbers, email addresses, and billing and shipping addresses (if supplied)."
      },
      "CustomerNote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the note.",
            "format": "int32"
          },
          "content": {
            "type": "string",
            "description": "Content of the note that the merchant added.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Note added to the customer account. Merchants can add internal notes, for example, to keep track of a customer's interests or complaints."
      },
      "CustomerAttribute": {
        "type": "object",
        "properties": {
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "fullyQualifiedName": {
            "type": "string",
            "nullable": true
          },
          "attributeDefinitionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {},
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerCustomerSegment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the customer segment.",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "description": "Unique identifier of the customer segment.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the customer segment.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the customer segment.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "A customer segment."
      },
      "AccountBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the account, also known as a customer number.",
            "format": "int32"
          },
          "customerSet": {
            "type": "string",
            "nullable": true
          },
          "commerceSummary": {
            "$ref": "#/components/schemas/CommerceSummary"
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerContact"
            },
            "description": "List of contacts for this account. A customer account can have multiple contacts for billing and shipping addresses.",
            "nullable": true
          },
          "companyOrOrganization": {
            "type": "string",
            "description": "The company or organization name for an account.",
            "nullable": true
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerNote"
            },
            "description": "List of notes for the account. Merchants use these internal notes, for example, to make a note of a customer's interests or complaints. \r\nNotes are available only from the merchant's view, customers cannot view these notes.",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAttribute"
            },
            "description": "List of attributes for the account.",
            "nullable": true
          },
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerCustomerSegment"
            },
            "description": "List of segments assigned to account. Merchants create segments, for example, to manage discounts or assign VIP status. \r\nThen they assign the account to the segment. An account can belong to several segments or none at all.",
            "nullable": true
          },
          "taxExempt": {
            "type": "boolean"
          },
          "taxId": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "customerSinceDate": {
            "type": "string",
            "description": "Date when the customer account is created.",
            "format": "date-time",
            "nullable": true
          },
          "accountType": {
            "type": "string",
            "description": "Type of account.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Customer account. Customers provide contact information, view order history, and set email preferences on their account. \r\nMerchants can edit accounts to add internal notes or assign them to segments."
      },
      "CustomerAccount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountBase"
          }
        ],
        "properties": {
          "emailAddress": {
            "type": "string",
            "description": "\"Email addresss of the customer.",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "User name for the customer account.",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "First name of the customer.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the customer.",
            "nullable": true
          },
          "localeCode": {
            "type": "string",
            "description": "Locale Code.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user who is currently logged in. This is null if the user is anonymous (not logged in).  Unicode data with a maximum length of 55 characters.",
            "nullable": true
          },
          "isAnonymous": {
            "type": "boolean",
            "description": "Is the account Anonymous?"
          },
          "isLocked": {
            "type": "boolean",
            "description": "Is the account locked?"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is the account active?"
          },
          "acceptsMarketing": {
            "type": "boolean",
            "description": "If true, the customer prefers to receive marketing material such as newsletters or email offers."
          },
          "hasExternalPassword": {
            "type": "boolean",
            "description": "Indicates if an external password is set on this account"
          }
        },
        "additionalProperties": false,
        "description": "Customer account. Customers provide contact information, view order history, and set email preferences on their account. \r\nMerchants can edit accounts to add internal notes or assign them to segments."
      },
      "CustomerAuthTicket": {
        "type": "object",
        "properties": {
          "customerAccount": {
            "$ref": "#/components/schemas/CustomerAccount"
          },
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "accessTokenExpiration": {
            "type": "string",
            "format": "date-time"
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "refreshTokenExpiration": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "jwtAccessToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerAttributeCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAttribute"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of notes added to a customer account returned as a whole. A collection is not paged."
      },
      "B2BUser": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "localeCode": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user who is currently logged in. This is null if the user is anonymous (not logged in).  Unicode data with a maximum length of 55 characters.",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRole"
            },
            "nullable": true
          },
          "isLocked": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "isRemoved": {
            "type": "boolean"
          },
          "acceptsMarketing": {
            "type": "boolean",
            "description": "If true, the customer prefers to receive marketing material such as newsletters or email offers."
          },
          "hasExternalPassword": {
            "type": "boolean",
            "description": "Indicates if an external password is set on this account"
          }
        },
        "additionalProperties": false,
        "description": "Customer account. Customers provide contact information, view order history, and set email preferences on their account. \r\nMerchants can edit accounts to add internal notes or assign them to segments."
      },
      "AccountSalesRep": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "integer",
            "format": "int32"
          },
          "adminUserId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BAccount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountBase"
          }
        ],
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BUser"
            },
            "description": "List of B2B users on the account.",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Is the B2B account active?",
            "nullable": true
          },
          "priceList": {
            "type": "string",
            "description": "Price list on B2B account.",
            "nullable": true
          },
          "salesReps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountSalesRep"
            },
            "description": "List of sales rep on B2B account.",
            "nullable": true
          },
          "rootAccountId": {
            "type": "integer",
            "description": "Root account Id in B2B hierarchy",
            "format": "int32",
            "nullable": true
          },
          "parentAccountId": {
            "type": "integer",
            "description": "Parent account Id in B2B hierarchy",
            "format": "int32",
            "nullable": true
          },
          "approvalStatus": {
            "type": "string",
            "description": "Status on B2B account.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Customer account. Customers provide contact information, view order history, and set email preferences on their account. \r\nMerchants can edit accounts to add internal notes or assign them to segments."
      },
      "B2BAccountCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BAccount"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of all the B2B Accounts returned as a whole. A collection is not paged."
      },
      "AccountHierarchyNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "children": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BAccountHierarchyResult": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BAccount"
            },
            "description": "All accounts belonging to this account hierarchy.",
            "nullable": true
          },
          "hierarchy": {
            "$ref": "#/components/schemas/AccountHierarchyNode"
          }
        },
        "additionalProperties": false
      },
      "UpgradeToB2BAccountError": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "integer",
            "format": "int32"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This class is used for reporting errors while upgrading the B2C account to B2B."
      },
      "UpgradeToB2BAccountResponse": {
        "type": "object",
        "properties": {
          "successAccountIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "skippedAccountIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "errorAccountIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpgradeToB2BAccountError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This class is used for sending custom response while upgrading the B2C accounts to B2B.\r\nThe custom response returns a list of success, skipped and error accountIDs while upgrade."
      },
      "B2BUserAndAuthInfo": {
        "type": "object",
        "properties": {
          "b2BUser": {
            "$ref": "#/components/schemas/B2BUser"
          },
          "externalPassword": {
            "type": "string",
            "nullable": true
          },
          "isImport": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "B2BUserCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BUser"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of users in a B2B account."
      },
      "CustomerUserRoleCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRole"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExtendedCustomerContact": {
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "nullable": true
          },
          "accountId": {
            "type": "integer",
            "format": "int32"
          },
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactType"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "faxNumber": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "middleNameOrInitial": {
            "type": "string",
            "nullable": true
          },
          "lastNameOrSurname": {
            "type": "string",
            "nullable": true
          },
          "companyOrOrganization": {
            "type": "string",
            "nullable": true
          },
          "phoneNumbers": {
            "$ref": "#/components/schemas/CommerceRuntimePhone"
          },
          "address": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          }
        },
        "additionalProperties": false
      },
      "ExtendedCustomerContactCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtendedCustomerContact"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of contacts returned as a whole."
      },
      "CreditAuditEntry": {
        "type": "object",
        "properties": {
          "activityType": {
            "type": "string",
            "description": "Mozu.Customer.Contracts.Credit.CreditAuditEntry.CreditAuditActivityType",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Detials of what was done",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "activityTypeId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Log entry for any change made to a Credit.\r\n\r\nThe system will generate all entries.  Contract is for display only.\r\nAll values are ReadOnly."
      },
      "CreditAuditEntryCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditAuditEntry"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerCredit": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique number identifier representing this credit.\r\nNumber may be generated or set by the Tenant\r\nNumber is unique within the Tenant context.\r\nReadOnly after credit creation",
            "nullable": true
          },
          "activationDate": {
            "type": "string",
            "description": "Date the credit was activated.  Null if card is not active.\r\nCredits must be activated before they can be used.\r\nReadOnly after activation",
            "format": "date-time",
            "nullable": true
          },
          "creditType": {
            "type": "string",
            "description": "Type of Credit.\r\nMozu.Customer.Contracts.Credit.Credit.CreditTypeConst\r\nRequired.\r\nReadOnly after credit creation",
            "nullable": true
          },
          "customCreditType": {
            "type": "string",
            "description": "Name of custom credit type\r\nOptional.",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "Currency Code",
            "nullable": true
          },
          "initialBalance": {
            "type": "number",
            "description": "Balance assigned when credit was initially created.\r\nMay be zero and updated later.\r\nReadOnly after intial credit creation",
            "format": "double",
            "nullable": true
          },
          "currentBalance": {
            "type": "number",
            "description": "Do we want to track this here?\r\nCurrent Balance\r\nReadOnly",
            "format": "double",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Date after which this credit is no longer valid\r\nOptional\r\nDefaults to 365 days",
            "format": "date-time",
            "nullable": true
          },
          "customerId": {
            "type": "integer",
            "description": "Id of the N:Mozu.Customer\r\nthat this credit is assigned to.\r\nOptional.",
            "format": "int32",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "creditTypeId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represetation of a store credit or gift card."
      },
      "CreditCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerCredit"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreditTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id unique within the tenant\r\nReadOnly",
            "format": "int32",
            "nullable": true
          },
          "transactionType": {
            "type": "string",
            "description": "Mozu.Customer.Contracts.Credit.CreditTransaction.CreditTransactionType\r\n            Requried",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "description": "Comments about the transaction.  Depending on the user interface, these comments may be readable by authorized users or customers.",
            "nullable": true
          },
          "impactAmount": {
            "type": "number",
            "description": "Amount to apply to Credit Balance\r\nRequired",
            "format": "double",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "orderId": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "description": "Custom data for credit transactions",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Credit Transactions are used to make adjustments to a Credit Balance"
      },
      "CreditTransactionCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditTransaction"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Card": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Card ID from Payment Service",
            "nullable": true
          },
          "nameOnCard": {
            "type": "string",
            "nullable": true
          },
          "cardType": {
            "type": "string",
            "nullable": true
          },
          "expireMonth": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "expireYear": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cardNumberPart": {
            "type": "string",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32"
          },
          "isDefaultPayMethod": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CardCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Card"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerContactCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerContact"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of contacts returned as a whole."
      },
      "CustomerAccountCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAccount"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of all the merchant's customers returned as a whole. A collection is not paged."
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "nullable": true
          },
          "visitId": {
            "type": "string",
            "nullable": true
          },
          "transactionType": {
            "type": "string",
            "nullable": true
          },
          "interactionType": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerNoteCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerNote"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of notes added to a customer account returned as a whole. A collection is not paged."
      },
      "CustomerSegmentCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerCustomerSegment"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of customer segements returned as a whole. A collection is not paged."
      },
      "CustomerAuditEntry": {
        "type": "object",
        "properties": {
          "customerAccountId": {
            "type": "integer",
            "description": "Customer associated with this entry",
            "format": "int32"
          },
          "customerAuditEntryId": {
            "type": "integer",
            "description": "Id of this entry",
            "format": "int32"
          },
          "entryDate": {
            "type": "string",
            "description": "Date of the Entry",
            "format": "date-time"
          },
          "entryUser": {
            "type": "string",
            "description": "User ID associated with this Entry",
            "nullable": true
          },
          "application": {
            "type": "string",
            "description": "Applicattion associated with this entry",
            "nullable": true
          },
          "site": {
            "type": "string",
            "description": "Site associated wit this entry",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the change (UI Displayable)",
            "nullable": true
          },
          "fieldPath": {
            "type": "string",
            "description": "Path of the field value being changed (e.g. /Customer/Contacts/1/FirstName)",
            "nullable": true
          },
          "oldValue": {
            "type": "string",
            "description": "Original value before this event",
            "nullable": true
          },
          "newValue": {
            "type": "string",
            "description": "New Value after this event",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerAuditEntryCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAuditEntry"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerPurchaseOrderPaymentTerm": {
        "type": "object",
        "properties": {
          "siteId": {
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "CustomerPurchaseOrderAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "accountId": {
            "type": "integer",
            "format": "int32"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "creditLimit": {
            "type": "number",
            "format": "double"
          },
          "availableBalance": {
            "type": "number",
            "format": "double"
          },
          "totalAvailableBalance": {
            "type": "number",
            "format": "double"
          },
          "overdraftAllowance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "overdraftAllowanceType": {
            "type": "string",
            "description": "Indicates type of overdraft. Possible values are \"Percent\" and \"Amount\"",
            "nullable": true
          },
          "customerPurchaseOrderPaymentTerms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerPurchaseOrderPaymentTerm"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderTransaction": {
        "type": "object",
        "properties": {
          "customerPurchaseOrderAccountId": {
            "type": "integer",
            "description": "Unique identifier for Customer purchase order account",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "siteId": {
            "type": "integer",
            "description": "Site Id associated with transaction log",
            "format": "int32"
          },
          "tenantId": {
            "type": "integer",
            "description": "Tenant Id associated with transaction log",
            "format": "int32"
          },
          "transactionDate": {
            "type": "string",
            "description": "Date when the transaction was made on a purchase order account",
            "format": "date-time"
          },
          "orderId": {
            "type": "string",
            "description": "Unique identifier for an order",
            "nullable": true
          },
          "purchaseOrderNumber": {
            "type": "string",
            "description": "Purchase order number",
            "nullable": true
          },
          "transactionAmount": {
            "type": "number",
            "description": "Transaction amount in transaction log for a purchase order account",
            "format": "double"
          },
          "creditLimit": {
            "type": "number",
            "description": "Maximum credit available on a purchase order account",
            "format": "double"
          },
          "additionalTransactionDetail": {
            "type": "string",
            "description": "Any additional transaction detail other than transaction description",
            "nullable": true
          },
          "availableBalance": {
            "type": "number",
            "description": "Current available balance on Purchase Order account",
            "format": "double"
          },
          "transactionTypeId": {
            "type": "integer",
            "description": " Purchase Order transaction type\r\n1 - Line of Credit Change\r\n2 - Order Submitted\r\n3 - Payment Collected\r\n4 - Payment Voided\r\n5 - Payment Refund\r\n6 - Manual Adjustment",
            "format": "int32"
          },
          "transactionDescription": {
            "type": "string",
            "description": "Purchase Order transaction description\r\nLine of Credit Change\r\nOrder Submitted\r\nPayment Collected\r\nPayment Voided\r\nPayment Refund\r\nManual Adjustment",
            "nullable": true
          },
          "author": {
            "type": "string",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Customer purchase order transaction log"
      },
      "PurchaseOrderTransactionCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderTransaction"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of purchase order transactions returned as a whole. \r\nA collection is not paged."
      },
      "CustomerPurchaseOrderAccountCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerPurchaseOrderAccount"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginState": {
        "type": "object",
        "properties": {
          "isPasswordChangeRequired": {
            "type": "boolean"
          },
          "lastPasswordChangeOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isLocked": {
            "type": "boolean"
          },
          "lastLockedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "failedLoginAttemptCount": {
            "type": "integer",
            "format": "int32"
          },
          "remainingLoginAttempts": {
            "type": "integer",
            "format": "int32"
          },
          "firstFailedLoginAttemptOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastLoginOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerPasswordInfo": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "description": "Old password.",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "description": "New password.",
            "nullable": true
          },
          "externalPassword": {
            "type": "string",
            "description": "The External Password, typically used for imports in conjunction with a custom action",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Old password and new password."
      },
      "AccountPasswordInfo": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "integer",
            "description": "The Id of the Account which this password info applies",
            "format": "int32"
          },
          "userId": {
            "type": "string",
            "description": "If the account has multiple users, provide the Id of a specific user",
            "nullable": true
          },
          "unlockAccount": {
            "type": "boolean",
            "description": "Indicates to unlock the Account",
            "nullable": true
          },
          "passwordInfo": {
            "$ref": "#/components/schemas/CustomerPasswordInfo"
          }
        },
        "additionalProperties": false,
        "description": "Password information for an Account"
      },
      "AccountPasswordInfoCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountPasswordInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordResult": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "integer",
            "format": "int32"
          },
          "succeeded": {
            "type": "boolean"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordResultCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangePasswordResult"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerResetPasswordInfo": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "customerSetCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfirmationInfo": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "UserName of the user who has requested a new password.",
            "nullable": true
          },
          "confirmationCode": {
            "type": "string",
            "description": "Confirmation code that a user supplies when requesting a new password.",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "description": "The user's new password.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to update a user's forgotten password. Contains the user's email address, new password, and the confirmation code \r\nthat is required to update the password."
      },
      "CustomerLoginInfo": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "externalPassword": {
            "type": "string",
            "nullable": true
          },
          "isImport": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerAccountAndAuthInfo": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/CustomerAccount"
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "externalPassword": {
            "type": "string",
            "nullable": true
          },
          "isImport": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CustomerSetSite": {
        "type": "object",
        "properties": {
          "siteId": {
            "type": "integer",
            "format": "int32"
          },
          "customerSetCode": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerSetAggregateInfo": {
        "type": "object",
        "properties": {
          "customerCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CustomerSet": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique identifier of the customer segment.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the customer segment.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the customer segment.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "sites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerSetSite"
            },
            "nullable": true
          },
          "isDefault": {
            "type": "boolean"
          },
          "aggregateInfo": {
            "$ref": "#/components/schemas/CustomerSetAggregateInfo"
          }
        },
        "additionalProperties": false,
        "description": "A customer segment."
      },
      "CustomerSetCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerSet"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Visit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "accountId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "nullable": true
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "webSiteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "webReferrer": {
            "type": "string",
            "nullable": true
          },
          "webSessionId": {
            "type": "string",
            "nullable": true
          },
          "webUserAgent": {
            "type": "string",
            "nullable": true
          },
          "browserLocationCode": {
            "type": "string",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VisitCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Visit"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InStockNotificationSubscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email.  E-mail or CustomerId are required.",
            "nullable": true
          },
          "customerId": {
            "type": "integer",
            "description": "Id of the N:Mozu.Customer\r\nthat this subscription is assigned to.\r\nOptional.  E-mail or CustomerId are required.",
            "format": "int32",
            "nullable": true
          },
          "productCode": {
            "type": "string",
            "description": "Product Code",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "description": "Location Code",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "User Id for multi-user b2b accounts",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Inventory in-stock notification subscription.  Notification sender/processor view.  Generally for internal consumption only."
      },
      "InStockNotificationSubscriptionCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InStockNotificationSubscription"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of InStockNotificationSubscriptions"
      },
      "EventExtendedProperty": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Event Extended Property"
      },
      "EventEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for an event",
            "nullable": true
          },
          "tenantId": {
            "type": "integer",
            "description": "TenantId",
            "format": "int32",
            "nullable": true
          },
          "masterCatalogId": {
            "type": "integer",
            "description": "MasterCatalogId",
            "format": "int32",
            "nullable": true
          },
          "catalogId": {
            "type": "integer",
            "description": "CatalogId",
            "format": "int32",
            "nullable": true
          },
          "siteId": {
            "type": "integer",
            "description": "SiteId",
            "format": "int32",
            "nullable": true
          },
          "topic": {
            "type": "string",
            "description": "The topic of the event (i.e. product.created)",
            "nullable": true
          },
          "entityId": {
            "type": "string",
            "description": "The identifier / ID of the entity that changed (i.e. product code)",
            "nullable": true
          },
          "isTest": {
            "type": "boolean",
            "description": "Is this a test?",
            "nullable": true
          },
          "correlationId": {
            "type": "string",
            "description": "The Correlation Id of the original API request that caused this event to occur",
            "nullable": true
          },
          "extendedProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventExtendedProperty"
            },
            "description": "Extended properties. Note: This is purposefully not a CollectionBase type wrapper so consumers start to get used to not having counts returned.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "The external/public Event entity used specifically in PULL/POLL event scenarios"
      },
      "EventCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventEvent"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of events returned as a whole."
      },
      "EventSummary": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "Note: Remember in the contract version to convert this Guid to ToString(\"N\") so the dashes are not present",
            "nullable": true
          },
          "tenantId": {
            "type": "integer",
            "description": "Tenant Id",
            "format": "int32",
            "nullable": true
          },
          "masterCatalogId": {
            "type": "integer",
            "description": "Master Catalog Id",
            "format": "int32",
            "nullable": true
          },
          "catalogId": {
            "type": "integer",
            "description": "Catalog Id",
            "format": "int32",
            "nullable": true
          },
          "siteId": {
            "type": "integer",
            "description": "Site Id",
            "format": "int32",
            "nullable": true
          },
          "entityId": {
            "type": "string",
            "description": "Entity Id",
            "nullable": true
          },
          "topic": {
            "type": "string",
            "description": "Topic",
            "nullable": true
          },
          "extendedProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventExtendedProperty"
            },
            "description": "Extended properties. Note: This is purposefully not a CollectionBase type wrapper so consumers start to get used to not having counts returned.",
            "nullable": true
          },
          "correlationId": {
            "type": "string",
            "description": "Correlation Id",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "description": "Create Date",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Event Summary is a trimmed version of an event that is utilized when displaying the event delivery (aka webhook, HTTP callback, HTTP POST) process history/details"
      },
      "HttpStatus": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The higher-level integer based HTTP Status Code returned by the remote endpoint",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Friendly text the HTTP Status Code returned by the remote endpoint",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Http Status"
      },
      "EventDeliveryAttempt": {
        "type": "object",
        "properties": {
          "deliveryStatus": {
            "type": "string",
            "description": "Status of the delivery process (EventDeliveryStatusType). System-supplied and read-only.",
            "nullable": true
          },
          "errorType": {
            "type": "string",
            "description": "Type of error that occurred, if the delivery was unsuccessful",
            "nullable": true
          },
          "httpStatus": {
            "$ref": "#/components/schemas/HttpStatus"
          },
          "message": {
            "type": "string",
            "description": "HTTP message returned by the remote endpoint",
            "nullable": true
          },
          "executionDate": {
            "type": "string",
            "description": "The date that the delivery was attempted",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The external/public Event entity used specifically in PULL/POLL event scenarios"
      },
      "EventDeliverySummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for an event delivery summary",
            "format": "int32",
            "nullable": true
          },
          "deliveryStatus": {
            "type": "string",
            "description": "Status of the delivery process (EventDeliveryStatusType)",
            "nullable": true
          },
          "eventSummary": {
            "$ref": "#/components/schemas/EventSummary"
          },
          "isRunning": {
            "type": "boolean",
            "description": "Indicates whether delivery of the event is currently being attempted at this moment in time"
          },
          "lastExecutionDate": {
            "type": "string",
            "description": "The date that the delivery was last attempted (either successfully or not)",
            "format": "date-time"
          },
          "nextExecutionDate": {
            "type": "string",
            "description": "The date that the delivery will next be attempted, if the event has not been successfully delivered yet and there are still retries remaining",
            "format": "date-time"
          },
          "retriesRemaining": {
            "type": "integer",
            "description": "Number of delivery attempts remaining",
            "format": "int32",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "description": "Create Date",
            "format": "date-time",
            "nullable": true
          },
          "updateDate": {
            "type": "string",
            "description": "Update Date",
            "format": "date-time",
            "nullable": true
          },
          "deliveryAttempts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventDeliveryAttempt"
            },
            "description": "Details about each attempted delivery of the event to the endpoint",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The external/public Event entity used specifically in PULL/POLL event scenarios"
      },
      "EventDeliverySummaryCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventDeliverySummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of event deliver summaries"
      },
      "SubscribingSite": {
        "type": "object",
        "properties": {
          "siteId": {
            "type": "integer",
            "description": "The site identifier",
            "format": "int32",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Is the subscription active at the site level?",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "A site that is associated with a subscription"
      },
      "SubscribingTenant": {
        "type": "object",
        "properties": {
          "subscribingContextLevelType": {
            "type": "string",
            "description": "Type of Subscribing Context\r\n!:SubscribingContextLevelTypeConst\r\nDerived from state of the subscription.  If any Subscribing Sites exist (e.g. subscription is not at the Tenant Level, then the value will be Site)",
            "nullable": true
          },
          "tenantId": {
            "type": "integer",
            "description": "The tenant identifier",
            "format": "int32",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Is the subscription active at the tenant level?  If the subscription context is at the Tenant Level this property will be utilized over the SiteLevel",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "subscribingSites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscribingSite"
            },
            "description": "Subscribing Sites",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A tenant that is associated with a subscription"
      },
      "EventSubscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for a subscription",
            "nullable": true
          },
          "appId": {
            "type": "string",
            "description": "Application identifier for subscription",
            "nullable": true
          },
          "apiVersion": {
            "type": "string",
            "description": "ApiVersion",
            "nullable": true
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of topics that the subscription relates to",
            "nullable": true
          },
          "subscribingTenants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscribingTenant"
            },
            "description": "A list of subscribers or subscribing tenants that the subscription relates to",
            "nullable": true
          },
          "notificationDeliveryType": {
            "type": "string",
            "description": "Notification delivery type which is a string representation of an enumeration of values.  Example: Http (this is case insensitive, so http may also be passed in)",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "description": "Content type of the payload that will be delivered.  This is utilized in combination with the notification delivery type.  Example:  A HTTP Post (notification delivery type) is performed with a JSON representation of the event data (content type).",
            "nullable": true
          },
          "endpoint": {
            "type": "string",
            "description": "The delivery endpoint that will receive notifications when events concerning the specified topics on the subscription occur.  The format of the endpoint may differ depending on the notification type.  For example, the endpoint may be a URL in some cases and an email address in others if multiple notification types are available.",
            "nullable": true
          },
          "confirmed": {
            "type": "boolean",
            "description": "A boolean value that indicates if the subscription endpoint has been confirmed",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "A boolean value that indicates if the subscription is active.  The subscription may be inactive due to repeated downtimes at the endpoint.  If they subscription is deactivated the subscription owner or application will need to reactivate it for notifications to be delivered.",
            "nullable": true
          },
          "noCallback": {
            "type": "boolean",
            "description": "A boolean value that indicates if events should be delivered that resulted from an API call by the application.  If true, any events that occur as a result of a direct API call by the same application will not be delivered. This can prevent an endless loop in certain scenarios.",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "description": "When the entity was created. System-supplied and read-only.",
            "format": "date-time",
            "nullable": true
          },
          "updateDate": {
            "type": "string",
            "description": "When the entity was updated. System-supplied and read-only.",
            "format": "date-time",
            "nullable": true
          },
          "createBy": {
            "type": "string",
            "description": "Identifier of the user who created the entity. System-supplied and read-only.",
            "nullable": true
          },
          "updateBy": {
            "type": "string",
            "description": "Identifier of the user who updated the entity. System-supplied and read-only.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The subscription entity used specifically in PUSH event scenarios where a third-party desires to receive notification of events"
      },
      "EventSubscriptionCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSubscription"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of subscriptions returned as a whole."
      },
      "Links": {
        "title": "Links",
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        }
      },
      "FulfillmentAuditInfo": {
        "title": "AuditInfo",
        "type": "object",
        "properties": {
          "createBy": {
            "type": "string"
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "updateBy": {
            "type": "string"
          },
          "updateDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CustomerSurveyEntry": {
        "title": "CustomerSurveyEntry",
        "type": "object",
        "properties": {
          "answer": {
            "type": "object"
          },
          "question": {
            "type": "string"
          }
        }
      },
      "EntityModelOfCustomerSurvey": {
        "title": "EntityModelOfCustomerSurvey",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "auditInfo": {
            "$ref": "#/components/schemas/FulfillmentAuditInfo"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerSurveyEntry"
            }
          },
          "id": {
            "type": "string"
          },
          "shipmentNumber": {
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "type": "integer",
            "format": "int32"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LinkRelation": {
        "title": "LinkRelation",
        "type": "object"
      },
      "FulfillmentLink": {
        "title": "Link",
        "type": "object",
        "properties": {
          "deprecation": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "hreflang": {
            "type": "string"
          },
          "media": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "profile": {
            "type": "string"
          },
          "rel": {
            "$ref": "#/components/schemas/LinkRelation"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "CollectionModelOfEntityModelOfCustomerSurvey": {
        "title": "CollectionModelOfEntityModelOfCustomerSurvey",
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityModelOfCustomerSurvey"
              }
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FulfillmentLink"
            }
          }
        }
      },
      "CustomerSurvey": {
        "title": "CustomerSurvey",
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "auditInfo": {
            "$ref": "#/components/schemas/FulfillmentAuditInfo"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerSurveyEntry"
            }
          },
          "id": {
            "type": "string"
          },
          "shipmentNumber": {
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "type": "integer",
            "format": "int32"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AuditInfo0": {
        "title": "AuditInfo0",
        "type": "object",
        "properties": {
          "createBy": {
            "type": "string"
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "updateBy": {
            "type": "string"
          },
          "updateDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "FulfillmentAddress": {
        "title": "Address",
        "type": "object",
        "properties": {
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "address3": {
            "type": "string"
          },
          "address4": {
            "type": "string"
          },
          "addressType": {
            "type": "string",
            "enum": [
              "Commercial",
              "Residential"
            ]
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "cityOrTown": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "isValidated": {
            "type": "boolean"
          },
          "latitude": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          },
          "postalOrZipCode": {
            "type": "string"
          },
          "stateOrProvince": {
            "type": "string"
          }
        }
      },
      "FulfillmentPhone": {
        "title": "Phone",
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "home": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "work": {
            "type": "string"
          }
        }
      },
      "FulfillmentContact": {
        "title": "Contact",
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/FulfillmentAddress"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "companyOrOrganization": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "lastNameOrSurname": {
            "type": "string"
          },
          "middleNameOrInitial": {
            "type": "string"
          },
          "phoneNumbers": {
            "$ref": "#/components/schemas/FulfillmentPhone"
          },
          "shortFullName": {
            "type": "string"
          }
        }
      },
      "FulfillmentDestination": {
        "title": "Destination",
        "type": "object",
        "properties": {
          "data": {
            "type": "object"
          },
          "destinationContact": {
            "$ref": "#/components/schemas/FulfillmentContact"
          },
          "isDestinationCommercial": {
            "type": "boolean"
          },
          "locationCode": {
            "type": "string"
          }
        }
      },
      "FulfillmentMeasurement": {
        "title": "Measurement",
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "unit": {
            "type": "string"
          },
          "value": {
            "type": "number",
            "format": "bigdecimal"
          }
        }
      },
      "FulfillmentPackageMeasurements": {
        "title": "PackageMeasurements",
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "height": {
            "$ref": "#/components/schemas/FulfillmentMeasurement"
          },
          "length": {
            "$ref": "#/components/schemas/FulfillmentMeasurement"
          },
          "weight": {
            "$ref": "#/components/schemas/FulfillmentMeasurement"
          },
          "width": {
            "$ref": "#/components/schemas/FulfillmentMeasurement"
          }
        }
      },
      "PackingSlipItemDetailDto": {
        "title": "PackingSlipItemDetailDto",
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "lineId": {
            "type": "integer",
            "format": "int32"
          },
          "originalOrderItemId": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "FulfillmentTracking": {
        "title": "Tracking",
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "number": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "FulfillmentPackage": {
        "title": "Package",
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "auditInfo": {
            "$ref": "#/components/schemas/FulfillmentAuditInfo"
          },
          "carrier": {
            "type": "string"
          },
          "fxcbDocumentsUrl": {
            "type": "string"
          },
          "fxcbPackNotificationId": {
            "type": "string"
          },
          "hasLabel": {
            "type": "boolean"
          },
          "integratorId": {
            "type": "string"
          },
          "labelFormat": {
            "type": "string"
          },
          "manifestId": {
            "type": "string"
          },
          "measurements": {
            "$ref": "#/components/schemas/FulfillmentPackageMeasurements"
          },
          "packageId": {
            "type": "string"
          },
          "packagingType": {
            "type": "string"
          },
          "packingSlipItemDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackingSlipItemDetailDto"
            }
          },
          "packingSlipNumber": {
            "type": "integer",
            "format": "int32"
          },
          "returnCarrier": {
            "type": "string"
          },
          "returnTrackingNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "returnTrackings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentTracking"
            }
          },
          "shippingMethodCode": {
            "type": "string"
          },
          "shippingMethodName": {
            "type": "string"
          },
          "signatureRequired": {
            "type": "boolean"
          },
          "trackingNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trackings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentTracking"
            }
          }
        }
      },
      "ManifestShipment": {
        "title": "ManifestShipment",
        "type": "object",
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/FulfillmentDestination"
          },
          "externalOrderId": {
            "type": "string"
          },
          "fulfillmentLocationCode": {
            "type": "string"
          },
          "orderNumber": {
            "type": "integer",
            "format": "int32"
          },
          "packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentPackage"
            }
          },
          "shipmentNumber": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentType": {
            "type": "string"
          }
        }
      },
      "Manifest": {
        "title": "Manifest",
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AuditInfo0"
          },
          "carrierId": {
            "type": "string"
          },
          "internalId": {
            "type": "string"
          },
          "locationCode": {
            "type": "string"
          },
          "manifestId": {
            "type": "string"
          },
          "manifestUrl": {
            "type": "string"
          },
          "numberOfPackages": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfShipments": {
            "type": "integer",
            "format": "int32"
          },
          "shipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManifestShipment"
            }
          },
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "userDisplayName": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "CollectionModelOfManifest": {
        "title": "CollectionModelOfManifest",
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Manifest"
              }
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FulfillmentLink"
            }
          }
        }
      },
      "ManifestRequestShipment": {
        "title": "ManifestRequestShipment",
        "required": [
          "shipmentNumber"
        ],
        "type": "object",
        "properties": {
          "integratorIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "shipmentNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ManifestRequest": {
        "title": "ManifestRequest",
        "required": [
          "carrierId",
          "locationCode"
        ],
        "type": "object",
        "properties": {
          "carrierId": {
            "type": "string"
          },
          "includedShipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManifestRequestShipment"
            }
          },
          "locationCode": {
            "type": "string"
          }
        }
      },
      "EntityModelOfManifest": {
        "title": "EntityModelOfManifest",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AuditInfo0"
          },
          "carrierId": {
            "type": "string"
          },
          "internalId": {
            "type": "string"
          },
          "locationCode": {
            "type": "string"
          },
          "manifestId": {
            "type": "string"
          },
          "manifestUrl": {
            "type": "string"
          },
          "numberOfPackages": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfShipments": {
            "type": "integer",
            "format": "int32"
          },
          "shipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManifestShipment"
            }
          },
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "userDisplayName": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "FulfillmentAppeasementReason": {
        "title": "AppeasementReason",
        "type": "object",
        "properties": {
          "moreInfo": {
            "type": "string"
          },
          "reasonCode": {
            "type": "string"
          }
        }
      },
      "FulfillmentCanceledReason": {
        "title": "CanceledReason",
        "type": "object",
        "properties": {
          "moreInfo": {
            "type": "string"
          },
          "reasonCode": {
            "type": "string"
          }
        }
      },
      "FulfillmentFulfillmentField": {
        "title": "FulfillmentField",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "userEnteredValue": {
            "type": "object"
          }
        }
      },
      "FulfillmentGiftCard": {
        "title": "GiftCard",
        "type": "object",
        "properties": {
          "activationDate": {
            "type": "string",
            "format": "date-time"
          },
          "cardNumber": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "creditType": {
            "type": "string"
          },
          "creditValue": {
            "type": "number",
            "format": "bigdecimal"
          },
          "currencyCode": {
            "type": "string"
          },
          "currentBalance": {
            "type": "number",
            "format": "bigdecimal"
          },
          "customerId": {
            "type": "integer",
            "format": "int32"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "initialBalance": {
            "type": "number",
            "format": "bigdecimal"
          }
        }
      },
      "FulfillmentInventoryTag": {
        "title": "InventoryTag",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "FulfillmentProductOption": {
        "title": "ProductOption",
        "type": "object",
        "properties": {
          "attributeFQN": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "dataType": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "shopperEnteredValue": {
            "type": "object"
          },
          "stringValue": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        }
      },
      "FulfillmentCanceledItem": {
        "title": "CanceledItem",
        "required": [
          "handling",
          "handlingTax",
          "itemTax",
          "lineId",
          "quantity",
          "shipping",
          "shippingTax"
        ],
        "type": "object",
        "properties": {
          "actualPrice": {
            "type": "number",
            "format": "bigdecimal"
          },
          "allowsBackOrder": {
            "type": "boolean"
          },
          "appeasementReason": {
            "$ref": "#/components/schemas/FulfillmentAppeasementReason"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AuditInfo0"
          },
          "backorderReleaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "blockAssignment": {
            "type": "boolean"
          },
          "canceledReason": {
            "$ref": "#/components/schemas/FulfillmentCanceledReason"
          },
          "childItemIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "creditCurrencyCode": {
            "type": "string"
          },
          "creditValue": {
            "type": "number",
            "format": "bigdecimal"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "duty": {
            "type": "number",
            "format": "bigdecimal"
          },
          "expectedDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "fulfillmentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentFulfillmentField"
            }
          },
          "giftCards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentGiftCard"
            }
          },
          "goodsType": {
            "type": "string",
            "enum": [
              "Digital",
              "DigitalCredit",
              "DigitalGiftCard",
              "Physical",
              "Service"
            ]
          },
          "handling": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingDiscount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingTax": {
            "type": "number",
            "format": "bigdecimal"
          },
          "imageUrl": {
            "type": "string"
          },
          "inventoryTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentInventoryTag"
            }
          },
          "isAssemblyRequired": {
            "type": "boolean"
          },
          "isTaxable": {
            "type": "boolean"
          },
          "itemDiscount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "itemTax": {
            "type": "number",
            "format": "bigdecimal"
          },
          "lineId": {
            "type": "integer",
            "format": "int32"
          },
          "lineItemCost": {
            "type": "number",
            "format": "bigdecimal"
          },
          "locatorName": {
            "type": "string"
          },
          "manageStock": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "optionAttributeFQN": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentProductOption"
            }
          },
          "originalOrderItemId": {
            "type": "string"
          },
          "originalQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "overridePrice": {
            "type": "number",
            "format": "bigdecimal"
          },
          "parentId": {
            "type": "string"
          },
          "parentItemId": {
            "type": "string"
          },
          "partNumber": {
            "type": "string"
          },
          "productCode": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "readyForPickupQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipping": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingDiscount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingTax": {
            "type": "number",
            "format": "bigdecimal"
          },
          "sku": {
            "type": "string"
          },
          "taxData": {
            "type": "object"
          },
          "taxableHandling": {
            "type": "number",
            "format": "bigdecimal"
          },
          "taxableLineItemCost": {
            "type": "number",
            "format": "bigdecimal"
          },
          "taxableShipping": {
            "type": "number",
            "format": "bigdecimal"
          },
          "transferQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "trueTransferQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "type": "number",
            "format": "bigdecimal"
          },
          "upc": {
            "type": "string"
          },
          "variationProductCode": {
            "type": "string"
          },
          "weight": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightUnit": {
            "type": "string"
          },
          "weightedDutyAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedHandlingAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedHandlingTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedLineItemTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedShipmentAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedShippingAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedShippingTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          }
        }
      },
      "FulfillmentChangeMessage": {
        "title": "ChangeMessage",
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "appId": {
            "type": "string"
          },
          "appKey": {
            "type": "string"
          },
          "appName": {
            "type": "string"
          },
          "appeasementReason": {
            "$ref": "#/components/schemas/FulfillmentAppeasementReason"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "changeMessageId": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "identifier": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "type": "string"
          },
          "newValue": {
            "type": "string"
          },
          "oldValue": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "subjectType": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "userDisplayName": {
            "type": "string"
          },
          "userFirstName": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "userLastName": {
            "type": "string"
          },
          "verb": {
            "type": "string"
          }
        }
      },
      "FulfillmentCustomer": {
        "title": "Customer",
        "type": "object",
        "properties": {
          "customerContact": {
            "$ref": "#/components/schemas/FulfillmentContact"
          },
          "data": {
            "type": "object"
          },
          "isDestinationCommercial": {
            "type": "boolean"
          }
        }
      },
      "FulfillmentItem": {
        "title": "Item",
        "required": [
          "handling",
          "handlingTax",
          "itemTax",
          "lineId",
          "quantity",
          "shipping",
          "shippingTax"
        ],
        "type": "object",
        "properties": {
          "actualPrice": {
            "type": "number",
            "format": "bigdecimal"
          },
          "allowsBackOrder": {
            "type": "boolean"
          },
          "appeasementReason": {
            "$ref": "#/components/schemas/FulfillmentAppeasementReason"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AuditInfo0"
          },
          "backorderReleaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "childItemIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "creditCurrencyCode": {
            "type": "string"
          },
          "creditValue": {
            "type": "number",
            "format": "bigdecimal"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "duty": {
            "type": "number",
            "format": "bigdecimal"
          },
          "expectedDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "fulfillmentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentFulfillmentField"
            }
          },
          "giftCards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentGiftCard"
            }
          },
          "goodsType": {
            "type": "string",
            "enum": [
              "Digital",
              "DigitalCredit",
              "DigitalGiftCard",
              "Physical",
              "Service"
            ]
          },
          "handling": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingDiscount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingTax": {
            "type": "number",
            "format": "bigdecimal"
          },
          "imageUrl": {
            "type": "string"
          },
          "inventoryTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentInventoryTag"
            }
          },
          "isAssemblyRequired": {
            "type": "boolean"
          },
          "isTaxable": {
            "type": "boolean"
          },
          "itemDiscount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "itemTax": {
            "type": "number",
            "format": "bigdecimal"
          },
          "lineId": {
            "type": "integer",
            "format": "int32"
          },
          "lineItemCost": {
            "type": "number",
            "format": "bigdecimal"
          },
          "locatorName": {
            "type": "string"
          },
          "manageStock": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "optionAttributeFQN": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentProductOption"
            }
          },
          "originalOrderItemId": {
            "type": "string"
          },
          "overridePrice": {
            "type": "number",
            "format": "bigdecimal"
          },
          "parentId": {
            "type": "string"
          },
          "parentItemId": {
            "type": "string"
          },
          "partNumber": {
            "type": "string"
          },
          "productCode": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "readyForPickupQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipping": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingDiscount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingTax": {
            "type": "number",
            "format": "bigdecimal"
          },
          "sku": {
            "type": "string"
          },
          "taxData": {
            "type": "object"
          },
          "taxableHandling": {
            "type": "number",
            "format": "bigdecimal"
          },
          "taxableLineItemCost": {
            "type": "number",
            "format": "bigdecimal"
          },
          "taxableShipping": {
            "type": "number",
            "format": "bigdecimal"
          },
          "transferQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "trueTransferQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "type": "number",
            "format": "bigdecimal"
          },
          "upc": {
            "type": "string"
          },
          "variationProductCode": {
            "type": "string"
          },
          "weight": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightUnit": {
            "type": "string"
          },
          "weightedDutyAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedHandlingAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedHandlingTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedLineItemTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedShipmentAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedShippingAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedShippingTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          }
        }
      },
      "ReassignedReason": {
        "title": "ReassignedReason",
        "type": "object",
        "properties": {
          "moreInfo": {
            "type": "string"
          },
          "reasonCode": {
            "type": "string"
          }
        }
      },
      "ReassignedItem": {
        "title": "ReassignedItem",
        "required": [
          "handling",
          "handlingTax",
          "itemTax",
          "lineId",
          "quantity",
          "shipping",
          "shippingTax"
        ],
        "type": "object",
        "properties": {
          "actualPrice": {
            "type": "number",
            "format": "bigdecimal"
          },
          "allowsBackOrder": {
            "type": "boolean"
          },
          "appeasementReason": {
            "$ref": "#/components/schemas/FulfillmentAppeasementReason"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AuditInfo0"
          },
          "backorderReleaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "blockAssignment": {
            "type": "boolean"
          },
          "childItemIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "creditCurrencyCode": {
            "type": "string"
          },
          "creditValue": {
            "type": "number",
            "format": "bigdecimal"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "duty": {
            "type": "number",
            "format": "bigdecimal"
          },
          "expectedDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "fulfillmentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentFulfillmentField"
            }
          },
          "fulfillmentLocationCode": {
            "type": "string"
          },
          "giftCards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentGiftCard"
            }
          },
          "goodsType": {
            "type": "string",
            "enum": [
              "Digital",
              "DigitalCredit",
              "DigitalGiftCard",
              "Physical",
              "Service"
            ]
          },
          "handling": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingDiscount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingTax": {
            "type": "number",
            "format": "bigdecimal"
          },
          "imageUrl": {
            "type": "string"
          },
          "inventoryTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentInventoryTag"
            }
          },
          "isAssemblyRequired": {
            "type": "boolean"
          },
          "isTaxable": {
            "type": "boolean"
          },
          "itemDiscount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "itemTax": {
            "type": "number",
            "format": "bigdecimal"
          },
          "lineId": {
            "type": "integer",
            "format": "int32"
          },
          "lineItemCost": {
            "type": "number",
            "format": "bigdecimal"
          },
          "locatorName": {
            "type": "string"
          },
          "manageStock": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "optionAttributeFQN": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentProductOption"
            }
          },
          "originalOrderItemId": {
            "type": "string"
          },
          "originalQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "overridePrice": {
            "type": "number",
            "format": "bigdecimal"
          },
          "parentId": {
            "type": "string"
          },
          "parentItemId": {
            "type": "string"
          },
          "partNumber": {
            "type": "string"
          },
          "productCode": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "readyForPickupQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "reassignedReason": {
            "$ref": "#/components/schemas/ReassignedReason"
          },
          "shipping": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingDiscount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingTax": {
            "type": "number",
            "format": "bigdecimal"
          },
          "sku": {
            "type": "string"
          },
          "taxData": {
            "type": "object"
          },
          "taxableHandling": {
            "type": "number",
            "format": "bigdecimal"
          },
          "taxableLineItemCost": {
            "type": "number",
            "format": "bigdecimal"
          },
          "taxableShipping": {
            "type": "number",
            "format": "bigdecimal"
          },
          "transferQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "trueTransferQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "type": "number",
            "format": "bigdecimal"
          },
          "upc": {
            "type": "string"
          },
          "variationProductCode": {
            "type": "string"
          },
          "weight": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightUnit": {
            "type": "string"
          },
          "weightedDutyAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedHandlingAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedHandlingTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedLineItemTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedShipmentAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedShippingAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedShippingTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          }
        }
      },
      "RejectedReason": {
        "title": "RejectedReason",
        "type": "object",
        "properties": {
          "moreInfo": {
            "type": "string"
          },
          "reasonCode": {
            "type": "string"
          }
        }
      },
      "RejectedItem": {
        "title": "RejectedItem",
        "required": [
          "handling",
          "handlingTax",
          "itemTax",
          "lineId",
          "quantity",
          "shipping",
          "shippingTax"
        ],
        "type": "object",
        "properties": {
          "actualPrice": {
            "type": "number",
            "format": "bigdecimal"
          },
          "allowsBackOrder": {
            "type": "boolean"
          },
          "appeasementReason": {
            "$ref": "#/components/schemas/FulfillmentAppeasementReason"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AuditInfo0"
          },
          "backorderReleaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "blockAssignment": {
            "type": "boolean"
          },
          "childItemIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "creditCurrencyCode": {
            "type": "string"
          },
          "creditValue": {
            "type": "number",
            "format": "bigdecimal"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "duty": {
            "type": "number",
            "format": "bigdecimal"
          },
          "expectedDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "fulfillmentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentFulfillmentField"
            }
          },
          "giftCards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentGiftCard"
            }
          },
          "goodsType": {
            "type": "string",
            "enum": [
              "Digital",
              "DigitalCredit",
              "DigitalGiftCard",
              "Physical",
              "Service"
            ]
          },
          "handling": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingDiscount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingTax": {
            "type": "number",
            "format": "bigdecimal"
          },
          "imageUrl": {
            "type": "string"
          },
          "inventoryTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentInventoryTag"
            }
          },
          "isAssemblyRequired": {
            "type": "boolean"
          },
          "isTaxable": {
            "type": "boolean"
          },
          "itemDiscount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "itemTax": {
            "type": "number",
            "format": "bigdecimal"
          },
          "lineId": {
            "type": "integer",
            "format": "int32"
          },
          "lineItemCost": {
            "type": "number",
            "format": "bigdecimal"
          },
          "locatorName": {
            "type": "string"
          },
          "manageStock": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "optionAttributeFQN": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentProductOption"
            }
          },
          "originalOrderItemId": {
            "type": "string"
          },
          "originalQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "overridePrice": {
            "type": "number",
            "format": "bigdecimal"
          },
          "parentId": {
            "type": "string"
          },
          "parentItemId": {
            "type": "string"
          },
          "partNumber": {
            "type": "string"
          },
          "productCode": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "readyForPickupQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "rejectedReason": {
            "$ref": "#/components/schemas/RejectedReason"
          },
          "shipping": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingDiscount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingTax": {
            "type": "number",
            "format": "bigdecimal"
          },
          "sku": {
            "type": "string"
          },
          "taxData": {
            "type": "object"
          },
          "taxableHandling": {
            "type": "number",
            "format": "bigdecimal"
          },
          "taxableLineItemCost": {
            "type": "number",
            "format": "bigdecimal"
          },
          "taxableShipping": {
            "type": "number",
            "format": "bigdecimal"
          },
          "transferQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "trueTransferQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "type": "number",
            "format": "bigdecimal"
          },
          "upc": {
            "type": "string"
          },
          "variationProductCode": {
            "type": "string"
          },
          "weight": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightUnit": {
            "type": "string"
          },
          "weightedDutyAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedHandlingAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedHandlingTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedLineItemTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedShipmentAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedShippingAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedShippingTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          }
        }
      },
      "FulfillmentShipmentStatusReason": {
        "title": "ShipmentStatusReason",
        "type": "object",
        "properties": {
          "moreInfo": {
            "type": "string"
          },
          "reasonCode": {
            "type": "string"
          }
        }
      },
      "FulfillmentFulfillmentShopperNotes": {
        "title": "ShopperNotes",
        "type": "object",
        "properties": {
          "comments": {
            "type": "string"
          },
          "deliveryInstructions": {
            "type": "string"
          },
          "giftMessage": {
            "type": "string"
          }
        }
      },
      "TransferredItem": {
        "title": "TransferredItem",
        "required": [
          "handling",
          "handlingTax",
          "itemTax",
          "lineId",
          "quantity",
          "shipping",
          "shippingTax"
        ],
        "type": "object",
        "properties": {
          "actualPrice": {
            "type": "number",
            "format": "bigdecimal"
          },
          "allowsBackOrder": {
            "type": "boolean"
          },
          "appeasementReason": {
            "$ref": "#/components/schemas/FulfillmentAppeasementReason"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AuditInfo0"
          },
          "backorderReleaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "blockAssignment": {
            "type": "boolean"
          },
          "childItemIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "creditCurrencyCode": {
            "type": "string"
          },
          "creditValue": {
            "type": "number",
            "format": "bigdecimal"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "duty": {
            "type": "number",
            "format": "bigdecimal"
          },
          "expectedDeliveryDate": {
            "type": "string",
            "format": "date-time"
          },
          "fulfillmentFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentFulfillmentField"
            }
          },
          "fulfillmentLocationCode": {
            "type": "string"
          },
          "giftCards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentGiftCard"
            }
          },
          "goodsType": {
            "type": "string",
            "enum": [
              "Digital",
              "DigitalCredit",
              "DigitalGiftCard",
              "Physical",
              "Service"
            ]
          },
          "handling": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingDiscount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingTax": {
            "type": "number",
            "format": "bigdecimal"
          },
          "imageUrl": {
            "type": "string"
          },
          "inventoryTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentInventoryTag"
            }
          },
          "isAssemblyRequired": {
            "type": "boolean"
          },
          "isTaxable": {
            "type": "boolean"
          },
          "itemDiscount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "itemTax": {
            "type": "number",
            "format": "bigdecimal"
          },
          "lineId": {
            "type": "integer",
            "format": "int32"
          },
          "lineItemCost": {
            "type": "number",
            "format": "bigdecimal"
          },
          "locatorName": {
            "type": "string"
          },
          "manageStock": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "optionAttributeFQN": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentProductOption"
            }
          },
          "originalOrderItemId": {
            "type": "string"
          },
          "originalQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "overridePrice": {
            "type": "number",
            "format": "bigdecimal"
          },
          "parentId": {
            "type": "string"
          },
          "parentItemId": {
            "type": "string"
          },
          "partNumber": {
            "type": "string"
          },
          "productCode": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "readyForPickupQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "rejectedReason": {
            "$ref": "#/components/schemas/RejectedReason"
          },
          "shipping": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingDiscount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingTax": {
            "type": "number",
            "format": "bigdecimal"
          },
          "sku": {
            "type": "string"
          },
          "taxData": {
            "type": "object"
          },
          "taxableHandling": {
            "type": "number",
            "format": "bigdecimal"
          },
          "taxableLineItemCost": {
            "type": "number",
            "format": "bigdecimal"
          },
          "taxableShipping": {
            "type": "number",
            "format": "bigdecimal"
          },
          "transferQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "trueTransferQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "unitPrice": {
            "type": "number",
            "format": "bigdecimal"
          },
          "upc": {
            "type": "string"
          },
          "variationProductCode": {
            "type": "string"
          },
          "weight": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightUnit": {
            "type": "string"
          },
          "weightedDutyAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedHandlingAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedHandlingTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedLineItemTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedShipmentAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedShippingAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "weightedShippingTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          }
        }
      },
      "FulfillmentTaskInput": {
        "title": "TaskInput",
        "type": "object",
        "properties": {
          "helpMessage": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "maxLength": {
            "type": "integer",
            "format": "int32"
          },
          "maximum": {
            "type": "number",
            "format": "bigdecimal"
          },
          "minLength": {
            "type": "integer",
            "format": "int32"
          },
          "minimum": {
            "type": "number",
            "format": "bigdecimal"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "pattern": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "BOOLEAN",
              "INTEGER",
              "LIST",
              "NUMBER",
              "OBJECT",
              "STRING",
              "UNKNOWN"
            ]
          }
        }
      },
      "Task": {
        "title": "Task",
        "type": "object",
        "properties": {
          "_links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FulfillmentLink"
            }
          },
          "active": {
            "type": "boolean"
          },
          "completed": {
            "type": "boolean"
          },
          "completedDate": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentTaskInput"
            }
          },
          "name": {
            "type": "string"
          },
          "skippable": {
            "type": "boolean"
          },
          "subject": {
            "type": "string"
          },
          "taskId": {
            "type": "string"
          }
        }
      },
      "BpmVariable": {
        "title": "BpmVariable",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "oldValue": {
            "type": "string"
          },
          "updateDate": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "FulfillmentWorkflowState": {
        "title": "WorkflowState",
        "type": "object",
        "properties": {
          "activeTaskName": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AuditInfo0"
          },
          "completedDate": {
            "type": "string",
            "format": "date-time"
          },
          "processInstanceId": {
            "type": "string"
          },
          "shipmentState": {
            "type": "string"
          },
          "taskList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          },
          "variables": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/BpmVariable"
            }
          }
        }
      },
      "FulfillmentShipment": {
        "title": "Shipment",
        "required": [
          "orderId",
          "orderNumber",
          "shipmentType",
          "total"
        ],
        "type": "object",
        "properties": {
          "acceptedDate": {
            "type": "string",
            "format": "date-time"
          },
          "appeasementReason": {
            "$ref": "#/components/schemas/FulfillmentAppeasementReason"
          },
          "assignedLocationCode": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AuditInfo0"
          },
          "canceledItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentCanceledItem"
            }
          },
          "changeMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentChangeMessage"
            }
          },
          "childShipmentNumbers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "currencyCode": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/FulfillmentCustomer"
          },
          "customerAccountId": {
            "type": "integer",
            "format": "int32"
          },
          "customerAddressId": {
            "type": "integer",
            "format": "int32"
          },
          "customerTaxId": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "destination": {
            "$ref": "#/components/schemas/FulfillmentDestination"
          },
          "dutyAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "dutyTotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "email": {
            "type": "string"
          },
          "externalOrderId": {
            "type": "string"
          },
          "fulfillmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "fulfillmentLocationCode": {
            "type": "string"
          },
          "fulfillmentStatus": {
            "type": "string",
            "enum": [
              "Fulfilled",
              "NotFulfilled"
            ]
          },
          "handlingAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingSubtotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingTaxTotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingTotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "isExpress": {
            "type": "boolean"
          },
          "isOptInForSms": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentItem"
            }
          },
          "lineItemSubtotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "lineItemTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "lineItemTaxTotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "lineItemTotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "orderId": {
            "type": "string"
          },
          "orderNumber": {
            "type": "integer",
            "format": "int32"
          },
          "orderSubmitDate": {
            "type": "string",
            "format": "date-time"
          },
          "originalShipmentNumber": {
            "type": "integer",
            "format": "int32"
          },
          "packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentPackage"
            }
          },
          "parentShipmentNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pickStatus": {
            "type": "string",
            "enum": [
              "AVAILABLE",
              "COMPLETE",
              "IN_WAVE",
              "PICKED",
              "TRANSFER"
            ]
          },
          "pickType": {
            "type": "string",
            "enum": [
              "MULTIPLE",
              "NORMAL",
              "SINGLE"
            ]
          },
          "pickWaveNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pickupInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "readyForPickup": {
            "type": "boolean"
          },
          "readyForPickupDate": {
            "type": "string",
            "format": "date-time"
          },
          "readyToCapture": {
            "type": "boolean"
          },
          "reassignedItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReassignedItem"
            }
          },
          "receivedDate": {
            "type": "string",
            "format": "date-time"
          },
          "rejectedItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RejectedItem"
            }
          },
          "sentCustomerAtStoreNotification": {
            "type": "boolean"
          },
          "sentCustomerInTransitNotification": {
            "type": "boolean"
          },
          "shipmentAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shipmentNumber": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentStatus": {
            "type": "string",
            "enum": [
              "BACKORDER",
              "CANCELED",
              "CUSTOMER_CARE",
              "FULFILLED",
              "READY",
              "REASSIGNED"
            ]
          },
          "shipmentStatusReason": {
            "$ref": "#/components/schemas/FulfillmentShipmentStatusReason"
          },
          "shipmentType": {
            "type": "string"
          },
          "shippingAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingMethodCode": {
            "type": "string"
          },
          "shippingMethodName": {
            "type": "string"
          },
          "shippingSubtotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingTaxTotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingTotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shopperNotes": {
            "$ref": "#/components/schemas/FulfillmentFulfillmentShopperNotes"
          },
          "siteId": {
            "type": "integer",
            "format": "int32"
          },
          "taxData": {
            "type": "object"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "number",
            "format": "bigdecimal"
          },
          "transferShipmentNumbers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "transferredItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferredItem"
            }
          },
          "transitTime": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "workflowProcessContainerId": {
            "type": "string"
          },
          "workflowProcessId": {
            "type": "string"
          },
          "workflowState": {
            "$ref": "#/components/schemas/FulfillmentWorkflowState"
          }
        }
      },
      "CollectionModelOfShipment": {
        "title": "CollectionModelOfShipment",
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FulfillmentShipment"
              }
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FulfillmentLink"
            }
          }
        }
      },
      "PickWaveBinRange": {
        "title": "PickWaveBinRange",
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "endBinName": {
            "type": "string"
          },
          "startBinName": {
            "type": "string"
          }
        }
      },
      "PickWaveProductMatch": {
        "title": "PickWaveProductMatch",
        "required": [
          "identifier",
          "matchType"
        ],
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "identifier": {
            "type": "string",
            "enum": [
              "PRODUCT_CODE",
              "UPC"
            ]
          },
          "matchType": {
            "type": "string",
            "enum": [
              "CONTAINS",
              "ENDS_WITH",
              "EXACT",
              "STARTS_WITH"
            ]
          },
          "value": {
            "type": "string"
          }
        }
      },
      "CreatePickWave": {
        "title": "CreatePickWave",
        "required": [
          "fulfillmentLocationCode",
          "maxShipments",
          "shipmentType"
        ],
        "type": "object",
        "properties": {
          "allowEmptyWave": {
            "type": "boolean"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "binRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PickWaveBinRange"
            }
          },
          "fulfillmentLocationCode": {
            "type": "string"
          },
          "includeZeroInventory": {
            "type": "boolean"
          },
          "lockWave": {
            "type": "boolean"
          },
          "maxShipments": {
            "type": "integer",
            "format": "int32"
          },
          "pickWaveType": {
            "type": "string",
            "enum": [
              "MULTIPLE",
              "NORMAL",
              "SINGLE"
            ]
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PickWaveProductMatch"
            }
          },
          "shipmentDateEnd": {
            "type": "string",
            "format": "date-time"
          },
          "shipmentDateStart": {
            "type": "string",
            "format": "date-time"
          },
          "shipmentType": {
            "type": "string",
            "enum": [
              "BOPIS",
              "STH"
            ]
          },
          "shippingOption": {
            "type": "string",
            "enum": [
              "ALL",
              "EXPRESS_ONLY",
              "STANDARD_ONLY"
            ]
          }
        }
      },
      "PickWaveContent": {
        "title": "PickWaveContent",
        "type": "object",
        "properties": {
          "actualQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AuditInfo0"
          },
          "binId": {
            "type": "integer",
            "format": "int32"
          },
          "binName": {
            "type": "string"
          },
          "contentId": {
            "type": "string"
          },
          "externalOrderId": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "itemLineId": {
            "type": "integer",
            "format": "int32"
          },
          "locatorName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "optionAttributeFQN": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentProductOption"
            }
          },
          "orderNumber": {
            "type": "integer",
            "format": "int32"
          },
          "partNumber": {
            "type": "string"
          },
          "productCode": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentNumber": {
            "type": "integer",
            "format": "int32"
          },
          "sku": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "PICKED",
              "REMOVED"
            ]
          },
          "upc": {
            "type": "string"
          },
          "variationProductCode": {
            "type": "string"
          }
        }
      },
      "EntityModelOfPickWave": {
        "title": "EntityModelOfPickWave",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AuditInfo0"
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PickWaveContent"
            }
          },
          "fulfillmentLocationCode": {
            "type": "string"
          },
          "maxShipments": {
            "type": "integer",
            "format": "int32"
          },
          "parentPickWaveNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pickType": {
            "type": "string",
            "enum": [
              "MULTIPLE",
              "NORMAL",
              "SINGLE"
            ]
          },
          "pickWaveId": {
            "type": "string"
          },
          "pickWaveNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pickWaveStatus": {
            "type": "string",
            "enum": [
              "CLOSED",
              "ERROR",
              "IN_PROGRESS",
              "PENDING",
              "PENDING_RECOVERY"
            ]
          },
          "recoveryPickWaveNumber": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentNumbers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "shipmentType": {
            "type": "string"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "userDisplayName": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "PickWave": {
        "title": "PickWave",
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AuditInfo0"
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PickWaveContent"
            }
          },
          "fulfillmentLocationCode": {
            "type": "string"
          },
          "maxShipments": {
            "type": "integer",
            "format": "int32"
          },
          "parentPickWaveNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pickType": {
            "type": "string",
            "enum": [
              "MULTIPLE",
              "NORMAL",
              "SINGLE"
            ]
          },
          "pickWaveId": {
            "type": "string"
          },
          "pickWaveNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pickWaveStatus": {
            "type": "string",
            "enum": [
              "CLOSED",
              "ERROR",
              "IN_PROGRESS",
              "PENDING",
              "PENDING_RECOVERY"
            ]
          },
          "recoveryPickWaveNumber": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentNumbers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "shipmentType": {
            "type": "string"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "userDisplayName": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "CollectionModelOfPickWave": {
        "title": "CollectionModelOfPickWave",
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PickWave"
              }
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FulfillmentLink"
            }
          }
        }
      },
      "BinShipmentProductQuantity": {
        "title": "BinShipmentProductQuantity",
        "required": [
          "actualQuantity",
          "binName",
          "shipmentNumber"
        ],
        "type": "object",
        "properties": {
          "actualQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "binName": {
            "type": "string"
          },
          "productCode": {
            "type": "string"
          },
          "shipmentNumber": {
            "type": "integer",
            "format": "int32"
          },
          "variationProductCode": {
            "type": "string"
          }
        }
      },
      "ClosePickWave": {
        "title": "ClosePickWave",
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "createRecovery": {
            "type": "boolean"
          },
          "quantities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BinShipmentProductQuantity"
            }
          }
        }
      },
      "EntityModelOfstring": {
        "title": "EntityModelOfstring",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/Links"
          }
        }
      },
      "ShipmentAttribute": {
        "title": "ShipmentAttribute",
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        }
      },
      "EntityModelOfShipment": {
        "title": "EntityModelOfShipment",
        "required": [
          "orderId",
          "orderNumber",
          "shipmentType",
          "total"
        ],
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "acceptedDate": {
            "type": "string",
            "format": "date-time"
          },
          "appeasementReason": {
            "$ref": "#/components/schemas/FulfillmentAppeasementReason"
          },
          "assignedLocationCode": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AuditInfo0"
          },
          "canceledItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentCanceledItem"
            }
          },
          "changeMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentChangeMessage"
            }
          },
          "childShipmentNumbers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "currencyCode": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/FulfillmentCustomer"
          },
          "customerAccountId": {
            "type": "integer",
            "format": "int32"
          },
          "customerAddressId": {
            "type": "integer",
            "format": "int32"
          },
          "customerTaxId": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "destination": {
            "$ref": "#/components/schemas/FulfillmentDestination"
          },
          "dutyAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "dutyTotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "email": {
            "type": "string"
          },
          "externalOrderId": {
            "type": "string"
          },
          "fulfillmentDate": {
            "type": "string",
            "format": "date-time"
          },
          "fulfillmentLocationCode": {
            "type": "string"
          },
          "fulfillmentStatus": {
            "type": "string",
            "enum": [
              "Fulfilled",
              "NotFulfilled"
            ]
          },
          "handlingAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingSubtotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingTaxTotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "handlingTotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "isExpress": {
            "type": "boolean"
          },
          "isOptInForSms": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentItem"
            }
          },
          "lineItemSubtotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "lineItemTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "lineItemTaxTotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "lineItemTotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "orderId": {
            "type": "string"
          },
          "orderNumber": {
            "type": "integer",
            "format": "int32"
          },
          "orderSubmitDate": {
            "type": "string",
            "format": "date-time"
          },
          "originalShipmentNumber": {
            "type": "integer",
            "format": "int32"
          },
          "packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentPackage"
            }
          },
          "parentShipmentNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pickStatus": {
            "type": "string",
            "enum": [
              "AVAILABLE",
              "COMPLETE",
              "IN_WAVE",
              "PICKED",
              "TRANSFER"
            ]
          },
          "pickType": {
            "type": "string",
            "enum": [
              "MULTIPLE",
              "NORMAL",
              "SINGLE"
            ]
          },
          "pickWaveNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pickupInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "readyForPickup": {
            "type": "boolean"
          },
          "readyForPickupDate": {
            "type": "string",
            "format": "date-time"
          },
          "readyToCapture": {
            "type": "boolean"
          },
          "reassignedItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReassignedItem"
            }
          },
          "receivedDate": {
            "type": "string",
            "format": "date-time"
          },
          "rejectedItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RejectedItem"
            }
          },
          "sentCustomerAtStoreNotification": {
            "type": "boolean"
          },
          "sentCustomerInTransitNotification": {
            "type": "boolean"
          },
          "shipmentAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shipmentNumber": {
            "type": "integer",
            "format": "int32"
          },
          "shipmentStatus": {
            "type": "string",
            "enum": [
              "BACKORDER",
              "CANCELED",
              "CUSTOMER_CARE",
              "FULFILLED",
              "READY",
              "REASSIGNED"
            ]
          },
          "shipmentStatusReason": {
            "$ref": "#/components/schemas/FulfillmentShipmentStatusReason"
          },
          "shipmentType": {
            "type": "string"
          },
          "shippingAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingMethodCode": {
            "type": "string"
          },
          "shippingMethodName": {
            "type": "string"
          },
          "shippingSubtotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingTaxAdjustment": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingTaxTotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shippingTotal": {
            "type": "number",
            "format": "bigdecimal"
          },
          "shopperNotes": {
            "$ref": "#/components/schemas/FulfillmentFulfillmentShopperNotes"
          },
          "siteId": {
            "type": "integer",
            "format": "int32"
          },
          "taxData": {
            "type": "object"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "number",
            "format": "bigdecimal"
          },
          "transferShipmentNumbers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "transferredItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferredItem"
            }
          },
          "transitTime": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "workflowProcessContainerId": {
            "type": "string"
          },
          "workflowProcessId": {
            "type": "string"
          },
          "workflowState": {
            "$ref": "#/components/schemas/FulfillmentWorkflowState"
          }
        }
      },
      "PageMetadata": {
        "title": "PageMetadata",
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PagedModelOfEntityModelOfShipment": {
        "title": "PagedModelOfEntityModelOfShipment",
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityModelOfShipment"
              }
            }
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "page": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        }
      },
      "CollectionModelOfEntityModelOfShipment": {
        "title": "CollectionModelOfEntityModelOfShipment",
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityModelOfShipment"
              }
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FulfillmentLink"
            }
          }
        }
      },
      "DashboardStep": {
        "title": "DashboardStep",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "name": {
            "type": "string"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EntityModelOfDashboardResponse": {
        "title": "EntityModelOfDashboardResponse",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "shipmentType": {
            "type": "string"
          },
          "shipmentTypeDisplayName": {
            "type": "string"
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardStep"
            }
          }
        }
      },
      "DashboardResponse": {
        "title": "DashboardResponse",
        "type": "object",
        "properties": {
          "shipmentType": {
            "type": "string"
          },
          "shipmentTypeDisplayName": {
            "type": "string"
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardStep"
            }
          }
        }
      },
      "CollectionModelOfDashboardResponse": {
        "title": "CollectionModelOfDashboardResponse",
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DashboardResponse"
              }
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FulfillmentLink"
            }
          }
        }
      },
      "LocationSummary": {
        "title": "LocationSummary",
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string"
          },
          "currentAmount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "currentItems": {
            "type": "integer",
            "format": "int32"
          },
          "currentShipments": {
            "type": "integer",
            "format": "int32"
          },
          "locationCode": {
            "type": "string"
          },
          "totalAmount": {
            "type": "number",
            "format": "bigdecimal"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "totalShipments": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CollectionModelOfLocationSummary": {
        "title": "CollectionModelOfLocationSummary",
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LocationSummary"
              }
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FulfillmentLink"
            }
          }
        }
      },
      "CancelShipment": {
        "title": "CancelShipment",
        "type": "object",
        "properties": {
          "blockAssignment": {
            "type": "boolean"
          },
          "canceledReason": {
            "$ref": "#/components/schemas/FulfillmentCanceledReason"
          },
          "sendNotifications": {
            "type": "boolean"
          }
        }
      },
      "BackorderShipmentRequest": {
        "title": "BackorderShipmentRequest",
        "type": "object",
        "properties": {
          "backorderReleaseDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BackorderItemUpdate": {
        "title": "BackorderItemUpdate",
        "required": [
          "lineId"
        ],
        "type": "object",
        "properties": {
          "backorderReleaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "lineId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BackorderItemsUpdateRequest": {
        "title": "BackorderItemsUpdateRequest",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackorderItemUpdate"
            }
          }
        }
      },
      "BackorderItem": {
        "title": "BackorderItem",
        "required": [
          "lineId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "backorderReleaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "blockAssignment": {
            "type": "boolean"
          },
          "lineId": {
            "type": "integer",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BackorderItemsRequest": {
        "title": "BackorderItemsRequest",
        "type": "object",
        "properties": {
          "isUserAction": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackorderItem"
            }
          }
        }
      },
      "CancelItem": {
        "title": "CancelItem",
        "required": [
          "lineId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "canceledReason": {
            "$ref": "#/components/schemas/FulfillmentCanceledReason"
          },
          "lineId": {
            "type": "integer",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CancelItemsRequest": {
        "title": "CancelItemsRequest",
        "type": "object",
        "properties": {
          "blockAssignment": {
            "type": "boolean"
          },
          "isUserAction": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CancelItem"
            }
          },
          "sendNotifications": {
            "type": "boolean"
          }
        }
      },
      "RejectItem": {
        "title": "RejectItem",
        "required": [
          "lineId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "blockAssignment": {
            "type": "boolean"
          },
          "lineId": {
            "type": "integer",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "rejectedReason": {
            "$ref": "#/components/schemas/RejectedReason"
          }
        }
      },
      "RejectShipment": {
        "title": "RejectShipment",
        "type": "object",
        "properties": {
          "blockAssignment": {
            "type": "boolean"
          },
          "isUserAction": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RejectItem"
            }
          },
          "rejectedReason": {
            "$ref": "#/components/schemas/RejectedReason"
          }
        }
      },
      "RejectItemsRequest": {
        "title": "RejectItemsRequest",
        "type": "object",
        "properties": {
          "isUserAction": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RejectItem"
            }
          }
        }
      },
      "GiftCardInfoRequest": {
        "title": "GiftCardInfoRequest",
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "giftCardMessage": {
            "type": "string"
          },
          "lastNameOrSurname": {
            "type": "string"
          }
        }
      },
      "FulfillmentPickupItem": {
        "title": "PickupItem",
        "required": [
          "lineId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "lineId": {
            "type": "integer",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PickupItemsRequest": {
        "title": "PickupItemsRequest",
        "type": "object",
        "properties": {
          "isUserAction": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentPickupItem"
            }
          }
        }
      },
      "ReassignItem": {
        "title": "ReassignItem",
        "required": [
          "lineId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "blockAssignment": {
            "type": "boolean"
          },
          "fulfillmentLocationCode": {
            "type": "string"
          },
          "lineId": {
            "type": "integer",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "reassignedReason": {
            "$ref": "#/components/schemas/ReassignedReason"
          }
        }
      },
      "ReassignShipment": {
        "title": "ReassignShipment",
        "type": "object",
        "properties": {
          "blockAssignment": {
            "type": "boolean"
          },
          "fulfillmentLocationCode": {
            "type": "string"
          },
          "isUserAction": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReassignItem"
            }
          },
          "reassignedReason": {
            "$ref": "#/components/schemas/ReassignedReason"
          }
        }
      },
      "ReassignItemsRequest": {
        "title": "ReassignItemsRequest",
        "type": "object",
        "properties": {
          "isUserAction": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReassignItem"
            }
          }
        }
      },
      "CollectionModelOfTask": {
        "title": "CollectionModelOfTask",
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Task"
              }
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FulfillmentLink"
            }
          }
        }
      },
      "TaskReason": {
        "title": "TaskReason",
        "type": "object",
        "properties": {
          "moreInfo": {
            "type": "string"
          },
          "reasonCode": {
            "type": "string"
          }
        }
      },
      "HandleOption": {
        "title": "HandleOption",
        "type": "object",
        "properties": {
          "blockAssignment": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentItem"
            }
          },
          "reason": {
            "$ref": "#/components/schemas/TaskReason"
          }
        }
      },
      "TaskComplete": {
        "title": "TaskComplete",
        "type": "object",
        "properties": {
          "handleOption": {
            "$ref": "#/components/schemas/HandleOption"
          },
          "taskBody": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "TransferredReason": {
        "title": "TransferredReason",
        "type": "object",
        "properties": {
          "moreInfo": {
            "type": "string"
          },
          "reasonCode": {
            "type": "string"
          }
        }
      },
      "TransferItem": {
        "title": "TransferItem",
        "required": [
          "lineId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "blockAssignment": {
            "type": "boolean"
          },
          "fulfillmentLocationCode": {
            "type": "string"
          },
          "lineId": {
            "type": "integer",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "transferredReason": {
            "$ref": "#/components/schemas/TransferredReason"
          }
        }
      },
      "TransferShipment": {
        "title": "TransferShipment",
        "type": "object",
        "properties": {
          "blockAssignment": {
            "type": "boolean"
          },
          "fulfillmentLocationCode": {
            "type": "string"
          },
          "isUserAction": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferItem"
            }
          },
          "transferredReason": {
            "$ref": "#/components/schemas/TransferredReason"
          }
        }
      },
      "TransferItemsRequest": {
        "title": "TransferItemsRequest",
        "type": "object",
        "properties": {
          "isUserAction": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferItem"
            }
          }
        }
      },
      "TaskDefinition": {
        "title": "TaskDefinition",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentTaskInput"
            }
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "skippable": {
            "type": "boolean"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "WorkflowProcessVariable": {
        "title": "WorkflowProcessVariable",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "BOOLEAN",
              "INTEGER",
              "LIST",
              "NUMBER",
              "OBJECT",
              "STRING",
              "UNKNOWN"
            ]
          }
        }
      },
      "EntityModelOfWorkflowProcess": {
        "title": "EntityModelOfWorkflowProcess",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "containerAlias": {
            "type": "string"
          },
          "containerId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskDefinition"
            }
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowProcessVariable"
            }
          },
          "version": {
            "type": "string"
          }
        }
      },
      "PagedModelOfEntityModelOfWorkflowProcess": {
        "title": "PagedModelOfEntityModelOfWorkflowProcess",
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityModelOfWorkflowProcess"
            }
          },
          "_links": {
            "$ref": "#/components/schemas/Links"
          },
          "page": {
            "$ref": "#/components/schemas/PageMetadata"
          }
        }
      },
      "BaseRequest": {
        "title": "Base Request",
        "description": "Base Request Model",
        "properties": {
          "locationCode": {
            "title": "location code",
            "description": "Location Code",
            "type": "string"
          },
          "userID": {
            "description": "user id",
            "type": "integer"
          },
          "pageSize": {
            "description": "how many results to show per page",
            "type": "integer"
          },
          "pageNum": {
            "description": "which page to show",
            "type": "integer"
          },
          "sortBy": {
            "description": "index to sort results by",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExportSettingsFTP": {
        "title": "Export Settings FTP",
        "description": "Export Settings FTP",
        "required": [
          "name",
          "ftpServer",
          "ftpPort",
          "ftpDirectory"
        ],
        "properties": {
          "active": {
            "description": "Flag for Active State",
            "type": "boolean"
          },
          "exportSettingsID": {
            "description": "Export Settings ID",
            "type": "integer"
          },
          "name": {
            "description": "Export Settings FTP Name",
            "type": "string"
          },
          "ftpServer": {
            "description": "FTP Server Address",
            "type": "string"
          },
          "ftpPort": {
            "description": "FTP Server Port",
            "type": "integer"
          },
          "ftpDirectory": {
            "description": "FTP Server Directory",
            "type": "string"
          },
          "ftpDirectoryControlFile": {
            "description": "FTP Server Control File Directory",
            "type": "string"
          },
          "ftpUser": {
            "description": "FTP Username",
            "type": "string"
          },
          "ftpPassword": {
            "description": "FTP Password",
            "type": "string"
          },
          "deliveryClass": {
            "description": "FTP Delivery Class. Defaults to ExportDeliveryDefault",
            "type": "string"
          },
          "controlFile": {
            "description": "Control File",
            "type": "string"
          },
          "controlFileEmail": {
            "description": "Control File Email",
            "type": "string"
          },
          "remoteFileName": {
            "description": "Remote File Name",
            "type": "string"
          },
          "controlFileName": {
            "description": "Control File Name",
            "type": "string"
          },
          "endpoint": {
            "description": "Endpoint",
            "type": "string"
          },
          "environment": {
            "description": "Environment",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExportSettingsS3": {
        "title": "Export Settings S3",
        "description": "Export Settings S3",
        "required": [
          "name",
          "region",
          "key",
          "secret",
          "bucket"
        ],
        "properties": {
          "exportSettingsID": {
            "description": "Export Settings ID",
            "type": "integer"
          },
          "name": {
            "description": "Export Settings S3 Name",
            "type": "string"
          },
          "active": {
            "description": "Flag for Active State",
            "type": "boolean"
          },
          "region": {
            "description": "S3 Region",
            "type": "string"
          },
          "bucket": {
            "description": "S3 Bucket (directory)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "tags": {
        "description": "Associative Map of <String, String> for tagCategoryName => tagName",
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "ExportSettings": {
        "title": "Export Settings",
        "description": "Export Settings",
        "required": [
          "name",
          "fileFormat",
          "exportType",
          "ftpInformation"
        ],
        "properties": {
          "name": {
            "description": "Export Settings Name",
            "type": "string"
          },
          "fileFormat": {
            "description": "Format for the export file",
            "type": "string",
            "enum": [
              "XML",
              "CSV"
            ]
          },
          "exportType": {
            "description": "Type of exportGG for the settings",
            "type": "string",
            "enum": [
              "AGGREGATE",
              "LOCATION"
            ]
          },
          "onlySendAvailable": {
            "description": "Flag for only sending available",
            "type": "boolean"
          },
          "onlySendActiveLocations": {
            "description": "Flag for only sending from active locations",
            "type": "boolean"
          },
          "ftpInformation": {
            "description": "List of export FTP settings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportSettingsFTP"
            }
          },
          "s3Information": {
            "description": "List of export S3 settings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportSettingsS3"
            }
          },
          "exportSingleFile": {
            "description": "Flag for exporting as a single file",
            "type": "boolean"
          },
          "safetyStock": {
            "description": "Safety Stock",
            "type": "string",
            "enum": [
              "SAFETY_STOCK_MAX",
              "SAFETY_STOCK_MIN",
              "SAFETY_STOCK_AVG",
              "SAFETY_STOCK_SUM"
            ]
          },
          "floor": {
            "description": "Floor",
            "type": "string",
            "enum": [
              "FLOOR_MAX",
              "FLOOR_MIN",
              "FLOOR_AVG",
              "FLOOR_SUM"
            ]
          },
          "ltd": {
            "description": "LTD",
            "type": "string",
            "enum": [
              "LTD_MAX",
              "LTD_MIN",
              "LTD_AVG",
              "LTD_SUM"
            ]
          },
          "fileName": {
            "description": "Name for the export file",
            "type": "string"
          },
          "includeAttributes": {
            "description": "Flag for including attributes",
            "type": "boolean"
          },
          "zipFiles": {
            "description": "Flag for zipping the files",
            "type": "boolean"
          },
          "zipFileName": {
            "description": "Name for the zipped file",
            "type": "string"
          },
          "untransformedFileName": {
            "description": "Untransformed File Name",
            "type": "string"
          },
          "untransformedZipFileName": {
            "description": "Untransformed Zip File Name",
            "type": "string"
          },
          "locationGroupIDs": {
            "description": "Location Group Ids associated with the settings",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "siteIDs": {
            "description": "Site Ids associated with the settings",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "directShip": {
            "description": "Flag for only using locations with Direct Ship enabled",
            "type": "boolean"
          },
          "pickup": {
            "description": "Flag for only using locations with In Store Pickup enabled",
            "type": "boolean"
          },
          "transfer": {
            "description": "Flag for only using locations with Transfer enabled",
            "type": "boolean"
          },
          "productMapping": {
            "title": "productMapping",
            "description": "Enum for export productMapping",
            "type": "string",
            "enum": [
              "SWAP_PART_NUMBER_WITH_UPC",
              "SWAP_SKU_WITH_UPC"
            ]
          },
          "isClassic": {
            "description": "Flag for marking the setting as a classic export",
            "type": "boolean"
          },
          "ignoreNegativeInventoryLocations": {
            "description": "Flag for excluding negative inventory locations",
            "type": "boolean"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "type": "object"
      },
      "CreateExportSettingsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Create Export Settings Request",
            "description": "Request needed for creating Export Settings",
            "required": [
              "exportSettings"
            ],
            "properties": {
              "exportSettings": {
                "description": "Export Settings to create",
                "type": "object",
                "$ref": "#/components/schemas/ExportSettings"
              }
            },
            "type": "object"
          }
        ]
      },
      "ExportSettingsResponse": {
        "title": "Job ID Response",
        "description": "Job ID Response",
        "properties": {
          "exportSettingsName": {
            "description": "Created Export Settings Name",
            "type": "string"
          },
          "exportSettingsFTPName": {
            "description": "Created Export Settings FTP Name",
            "type": "string"
          },
          "exportSettingsS3Name": {
            "description": "Created Export Settings S3 Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExportInventoryRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Export Inventory Request",
            "description": "Export Inventory Request",
            "properties": {
              "exportSettingsName": {
                "description": "Name of the Export Settings to use",
                "type": "string"
              },
              "exportSettingsFTPName": {
                "description": "Name of the FTP Settings to use. Will only check for this if exportID is already set",
                "type": "string"
              },
              "exportSettingsS3Name": {
                "description": "Name of the S3 Settings to use. Will only check for this if exportID is already set",
                "type": "string"
              },
              "development": {
                "description": "Flag for sending the exports to the development droppoint",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ]
      },
      "ExportInventoryJobResponse": {
        "title": "Export Inventory Job Response",
        "description": "Response for each export job creation",
        "properties": {
          "exportSettingsID": {
            "description": "Export Settings ID",
            "type": "integer"
          },
          "jobID": {
            "description": "ID of newly created job",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ExportInventoryResponse": {
        "title": "Export Inventory Response",
        "description": "Response for Export Inventory api",
        "properties": {
          "exportInventoryJobResponses": {
            "description": "List of Export Inventory Job Responses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportInventoryJobResponse"
            }
          }
        },
        "type": "object"
      },
      "UpdateExportSettingsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Update Export Settings Request",
            "description": "Request needed updating existing Export Settings",
            "required": [
              "exportSettingsID",
              "exportSettings"
            ],
            "properties": {
              "exportSettings": {
                "description": "Export Settings to update",
                "type": "object",
                "$ref": "#/components/schemas/ExportSettings"
              }
            },
            "type": "object"
          }
        ]
      },
      "BaseResponse": {
        "title": "Base Response",
        "description": "Base Response Model",
        "properties": {
          "success": {
            "description": "Flag for success",
            "type": "boolean"
          },
          "messages": {
            "description": "List of messages",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "numResults": {
            "description": "Number of results",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UpdateExportSettingsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Update Export Settings Response",
            "description": "Update Export Settings Response",
            "properties": {
              "tenantID": {
                "description": "Tenant ID",
                "type": "integer"
              },
              "name": {
                "description": "Name",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "DeletedCountResponse": {
        "title": "Deleted Count Response",
        "description": "Deleted Count Response Model",
        "properties": {
          "deleted": {
            "description": "Count of deleted entries",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreateExportSettingsFTPRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Create Export Settings FTP Request",
            "description": "Request needed for creating Export Settings FTP",
            "required": [
              "exportSettingsFTP",
              "exportSettingsName"
            ],
            "properties": {
              "exportSettingsName": {
                "description": "Export Settings Name to associate the ftp settings with",
                "type": "string"
              },
              "exportSettingsFTP": {
                "description": "Export Settings FTP to create",
                "type": "object",
                "$ref": "#/components/schemas/ExportSettingsFTP"
              }
            },
            "type": "object"
          }
        ]
      },
      "UpdateExportSettingsFTPRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Update Export Settings FTP Request",
            "description": "Request needed updating existing Export Settings FTP",
            "required": [
              "exportSettingsName",
              "exportSettingsFTP"
            ],
            "properties": {
              "exportSettingsName": {
                "description": "Export Settings Name to associate the ftp settings with",
                "type": "string"
              },
              "exportSettingsFTP": {
                "description": "Export Settings FTP to update",
                "type": "object",
                "$ref": "#/components/schemas/ExportSettingsFTP"
              }
            },
            "type": "object"
          }
        ]
      },
      "UpdateExportSettingsFTPResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Update Export Settings FTP Response",
            "description": "Update Export Settings FTP Response",
            "properties": {
              "tenantID": {
                "description": "Tenant ID",
                "type": "integer"
              },
              "exportSettingsFTPName": {
                "description": "Export Settings FTP Name",
                "type": "string"
              },
              "exportSettingsName": {
                "description": "Export Settings Name to associate the ftp settings with",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "CreateExportSettingsS3Request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Create Export Settings S3 Request",
            "description": "Request needed for creating Export Settings S3",
            "required": [
              "exportSettingsS3",
              "exportSettingsName"
            ],
            "properties": {
              "exportSettingsName": {
                "description": "Export Settings Name to associate the ftp settings with",
                "type": "string"
              },
              "exportSettingsS3": {
                "description": "Export Settings S3 to create",
                "type": "object",
                "$ref": "#/components/schemas/ExportSettingsS3"
              }
            },
            "type": "object"
          }
        ]
      },
      "UpdateExportSettingsS3Request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Update Export Settings S3 Request",
            "description": "Request needed updating existing Export Settings S3",
            "required": [
              "exportSettingsName",
              "exportSettingsS3"
            ],
            "properties": {
              "exportSettingsName": {
                "description": "Export Settings Name to associate the ftp settings with",
                "type": "string"
              },
              "exportSettingsS3": {
                "description": "Export Settings S3 to update",
                "type": "object",
                "$ref": "#/components/schemas/ExportSettingsS3"
              }
            },
            "type": "object"
          }
        ]
      },
      "UpdateExportSettingsS3Response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Update Export Settings S3 Response",
            "description": "Update Export Settings S3 Response",
            "properties": {
              "tenantID": {
                "description": "Tenant ID",
                "type": "integer"
              },
              "exportSettingsS3ID": {
                "description": "Export Settings S3 ID",
                "type": "integer"
              },
              "exportSettingsID": {
                "description": "Export Settings ID to associate the s3 settings with",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "DeletedResponse": {
        "title": "Deleted Response",
        "description": "Deleted Response Model",
        "properties": {
          "deleted": {
            "description": "Whether the delete was successful",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "FetchFileConnectionResponse": {
        "title": "FetchFileConnectionResponse",
        "description": "FetchFileConnectionResponse",
        "properties": {
          "ftpFiles": {
            "description": "List of files found on the specified sftp directory",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ftpArchiveFiles": {
            "description": "List of files found on the specified sftp archive directory",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "s3Files": {
            "description": "List of files found on the specified s3 bucket/path",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "s3ArchiveFiles": {
            "description": "List of files found on the specified s3 archive bucket/path",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "JobQueueResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Job Queue Response",
            "description": "Response for getting a job",
            "properties": {
              "jobID": {
                "description": "Internal identifier that uniquely identifies a single job",
                "type": "integer"
              },
              "tenantID": {
                "description": "Unique internal identifier of the tenant that owns the job",
                "type": "integer"
              },
              "locationCode": {
                "description": "Unique internal Identifier of the owning location",
                "type": "string"
              },
              "type": {
                "description": "Purpose of the job",
                "type": "string",
                "enum": [
                  "REFRESH",
                  "ADJUST",
                  "RELEASE_SHIPMENTS",
                  "CREATE_PICK_WAVE",
                  "CLOSE_PICK_WAVE",
                  "PUT_AWAY_FILE",
                  "SHORT_PICK_ERROR",
                  "BIN_AUDIT_START",
                  "BIN_AUDIT_COMPLETION",
                  "CREATE_BIN_AUDIT",
                  "RELEASE_PENDING_ITEMS"
                ]
              },
              "added": {
                "description": "Time and date the job was added to the queue in ISO8601 format in UTC",
                "type": "string"
              },
              "started": {
                "description": "Time and date the job was started in ISO8601 format in UTC",
                "type": "string"
              },
              "finished": {
                "description": "Time and date the job was finished in ISO8601 format in UTC",
                "type": "string"
              },
              "originalFilename": {
                "description": "The full name of the file that was picked up at the secure droppoint server before being split up by location. Applies only to refresh and adjust jobs created via file fetch process",
                "type": "string"
              },
              "hasData": {
                "description": "True if the job was not created from a fetched file",
                "type": "boolean"
              },
              "itemCount": {
                "description": "The number of items processed, only for job types REFRESH and ADJUST",
                "type": "integer"
              },
              "status": {
                "description": "Current status of job completion",
                "type": "string",
                "enum": [
                  "PENDING",
                  "WORKING",
                  "SUCCESS",
                  "FAILED"
                ]
              }
            },
            "type": "object"
          }
        ]
      },
      "InventoryTag": {
        "title": "Tag Response",
        "description": "Request/Response object for a tag",
        "properties": {
          "tagID": {
            "description": "Tag ID",
            "type": "integer"
          },
          "tagValue": {
            "description": "Tag Value",
            "type": "string"
          },
          "isDefault": {
            "description": "Whether or not this tag is the default tag for its category.",
            "type": "boolean"
          },
          "percent": {
            "description": "Percentage of available inventory this tag will get when the percentage update is performed. Must be between 0 and 100 (inclusive).",
            "type": "integer"
          },
          "created": {
            "description": "Date this tag was created",
            "type": "string"
          },
          "updated": {
            "description": "Date this tag was last updated",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TagCategory": {
        "title": "Tag Category Response",
        "description": "Request and response object for a tag category",
        "properties": {
          "tagCategoryID": {
            "description": "Tag Category ID",
            "type": "integer"
          },
          "name": {
            "description": "Tag Category Name",
            "type": "string"
          },
          "created": {
            "description": "Date tag category was created.",
            "type": "string"
          },
          "tags": {
            "description": "Tags within this category",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryTag"
            }
          }
        },
        "type": "object"
      },
      "AllocateItem": {
        "title": "AllocateItem",
        "description": "Item for Allocation",
        "required": [
          "quantity",
          "orderItemID",
          "orderID",
          "shipmentID",
          "locationID"
        ],
        "properties": {
          "partNumber": {
            "title": "part number",
            "description": "part number",
            "type": "string"
          },
          "upc": {
            "title": "upc",
            "description": "upc",
            "type": "string"
          },
          "sku": {
            "title": "sku",
            "description": "sku",
            "type": "string"
          },
          "quantity": {
            "title": "quantity",
            "description": "quantity",
            "type": "integer"
          },
          "orderID": {
            "title": "order ID",
            "description": "order ID",
            "type": "integer"
          },
          "orderItemID": {
            "title": "order item ID",
            "description": "order item ID",
            "type": "integer"
          },
          "shipmentID": {
            "title": "shipment ID",
            "description": "shipment ID",
            "type": "integer"
          },
          "locationCode": {
            "title": "location Code",
            "description": "location Code",
            "type": "string"
          },
          "previousOrderItemID": {
            "title": "previous order item ID",
            "description": "previous order item ID",
            "type": "integer"
          },
          "binID": {
            "title": "bin ID",
            "description": "Bin Location Identifier",
            "type": "integer"
          },
          "blockAssignment": {
            "title": "Block Item Assignment",
            "description": "Block assignment of item at product/location level. ONLY allowed on deallocate.",
            "type": "boolean"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "type": "object"
      },
      "AllocateInventoryRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Allocate Inventory Request",
            "description": "Request needed for allocating inventory",
            "required": [
              "tenantID",
              "items"
            ],
            "properties": {
              "items": {
                "description": "list of AllocateItems",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AllocateItem"
                }
              },
              "orderDate": {
                "description": "order date",
                "type": "string"
              },
              "orderWeight": {
                "description": "order weight",
                "type": "integer"
              },
              "decrementOnHandOnDeallocate": {
                "description": "flag to determine deallocation on decrements",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ]
      },
      "M_FetchFileConfig": {
        "title": "M_FetchFileConfig",
        "description": "Fetch File Config Model",
        "properties": {
          "fetchFileConfigID": {
            "description": "Fetch File Config ID",
            "type": "integer"
          },
          "tenantID": {
            "description": "Tenant ID",
            "type": "integer"
          },
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "lastModified": {
            "description": "Time config was last modified",
            "type": "string"
          },
          "emailList": {
            "description": "Email List",
            "type": "string"
          },
          "refreshEnabled": {
            "description": "Flag for Refresh Enabled",
            "type": "boolean"
          },
          "refreshFileDescription": {
            "description": "Description for the refresh file",
            "type": "string"
          },
          "updateEnabled": {
            "description": "Flag for Update Enabled",
            "type": "boolean"
          },
          "updateFileDescription": {
            "description": "Description for the update file",
            "type": "string"
          },
          "ftpServer": {
            "description": "FTP server address",
            "type": "string"
          },
          "ftpUsername": {
            "description": "FTP server username",
            "type": "string"
          },
          "ftpPassword": {
            "description": "FTP server password",
            "type": "string"
          },
          "ftpPort": {
            "description": "FTP server port",
            "type": "integer"
          },
          "ftpRemotePath": {
            "description": "FTP server remote path",
            "type": "string"
          },
          "ftpRemotePathArchive": {
            "description": "FTP server remote path archive",
            "type": "string"
          },
          "region": {
            "description": "S3 Region",
            "type": "string"
          },
          "bucket": {
            "description": "S3 Bucket",
            "type": "string"
          },
          "s3Path": {
            "description": "S3 Bucket Path (directory)",
            "type": "string"
          },
          "archiveBucket": {
            "description": "S3 Archive Bucket",
            "type": "string"
          },
          "s3ArchivePath": {
            "description": "S3 Archive Bucket Path (directory)",
            "type": "string"
          },
          "lockName": {
            "description": "Lock name",
            "type": "string"
          },
          "postProcessAction": {
            "description": "Enum denoting action post processing",
            "type": "integer"
          },
          "useControlFile": {
            "description": "Flag for using control file",
            "type": "boolean"
          },
          "multipleFiles": {
            "description": "Flag for using multiple files",
            "type": "boolean"
          },
          "zeroOutNegatives": {
            "description": "Flag for converting negatives to zero",
            "type": "boolean"
          },
          "fieldNameMap": {
            "description": "List of field names",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ignoreExtraFields": {
            "description": "Flag for ignoring extra fields",
            "type": "boolean"
          },
          "blankQuantityIsZero": {
            "description": "Flag to convert null quantities to zero",
            "type": "boolean"
          },
          "csvDelimiter": {
            "description": "CSV Delimiter",
            "type": "string"
          },
          "exportAfterRefresh": {
            "description": "Flag for exporting after refresh",
            "type": "boolean"
          },
          "postImportExportId": {
            "description": "Export id post import",
            "type": "integer"
          },
          "postImportFtpId": {
            "description": "FTP id post import",
            "type": "integer"
          },
          "productMapping": {
            "title": "productMapping",
            "description": "Enum for fetch file mapping",
            "type": "string",
            "enum": [
              "SWAP_PART_NUMBER_WITH_UPC",
              "SWAP_SKU_WITH_UPC"
            ]
          }
        },
        "type": "object"
      },
      "FetchFileConfigRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Fetch File Config Request",
            "description": "Request for Fetch File Configs",
            "required": [
              "active",
              "lockName",
              "ftpServer",
              "ftpUsername",
              "ftpPassword",
              "ftpRemotePath",
              "postProcessAction"
            ],
            "properties": {
              "fetchFileConfigID": {
                "description": "Fetch File Config ID",
                "type": "integer"
              },
              "active": {
                "description": "Flag for active state",
                "type": "boolean"
              },
              "emailList": {
                "description": "Email List",
                "type": "string"
              },
              "refreshEnabled": {
                "description": "Flag for Refresh Enabled",
                "type": "boolean"
              },
              "refreshFileDescription": {
                "description": "Description for the refresh file",
                "type": "string"
              },
              "updateEnabled": {
                "description": "Flag for Update Enabled",
                "type": "boolean"
              },
              "updateFileDescription": {
                "description": "Description for the update file",
                "type": "string"
              },
              "ftpServer": {
                "description": "FTP server address",
                "type": "string"
              },
              "ftpUsername": {
                "description": "FTP server username",
                "type": "string"
              },
              "ftpPassword": {
                "description": "FTP server password",
                "type": "string"
              },
              "ftpPort": {
                "description": "FTP server port",
                "type": "integer"
              },
              "ftpRemotePath": {
                "description": "FTP server remote path",
                "type": "string"
              },
              "ftpRemotePathArchive": {
                "description": "FTP server remote path archive",
                "type": "string"
              },
              "region": {
                "description": "S3 Region",
                "type": "string"
              },
              "bucket": {
                "description": "S3 Bucket",
                "type": "string"
              },
              "s3Path": {
                "description": "S3 Bucket Path (directory)",
                "type": "string"
              },
              "archiveBucket": {
                "description": "S3 Archive Bucket",
                "type": "string"
              },
              "s3ArchivePath": {
                "description": "S3 Archive Bucket Path (directory)",
                "type": "string"
              },
              "lockName": {
                "description": "Lock name",
                "type": "string"
              },
              "postProcessAction": {
                "description": "Enum denoting action post processing",
                "type": "integer"
              },
              "useControlFile": {
                "description": "Flag for using control file",
                "type": "boolean"
              },
              "multipleFiles": {
                "description": "Flag for using multiple files",
                "type": "boolean"
              },
              "zeroOutNegatives": {
                "description": "Flag for converting negatives to zero",
                "type": "boolean"
              },
              "testFTPConfigs": {
                "description": "Flag for if its a test ftp config",
                "type": "boolean"
              },
              "fieldNameMap": {
                "description": "List of field names",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "ignoreExtraFields": {
                "description": "Flag for ignoring extra fields",
                "type": "boolean"
              },
              "blankQuantityIsZero": {
                "description": "Flag to convert null quantities to zero",
                "type": "boolean"
              },
              "csvDelimiter": {
                "description": "Delimiter",
                "type": "string"
              },
              "productMapping": {
                "title": "productMapping",
                "description": "Enum for fetch file productMapping",
                "type": "string",
                "enum": [
                  "SWAP_PART_NUMBER_WITH_UPC",
                  "SWAP_SKU_WITH_UPC"
                ]
              }
            },
            "type": "object"
          }
        ]
      },
      "ItemQuantity": {
        "title": "Item Quantity",
        "description": "Item Quantity Model",
        "properties": {
          "partNumber": {
            "description": "Part/Product Number",
            "type": "string"
          },
          "upc": {
            "description": "Universal Product Code",
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          },
          "quantity": {
            "description": "Quantity",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RequestLocation": {
        "title": "Request Location",
        "description": "Request Location",
        "properties": {
          "unit": {
            "description": "Unit of distance used for radius",
            "type": "string",
            "default": "MILES",
            "enum": [
              "MILES",
              "KM"
            ]
          },
          "radius": {
            "description": "Distance from location",
            "type": "number"
          },
          "postalCode": {
            "description": "Postal Code of this location",
            "type": "string"
          },
          "latitude": {
            "description": "Latitude coordinate of this location",
            "type": "number"
          },
          "longitude": {
            "description": "Longitude coordinate of this location",
            "type": "number"
          },
          "countryCode": {
            "description": "Country Code for this location",
            "type": "string"
          },
          "locationCode": {
            "description": "Location Code for this location. This being set will trigger GetInventoryByLocation",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TagQuantity": {
        "title": "Tag quantity response",
        "description": "Response object for a tag quantity",
        "properties": {
          "onHand": {
            "description": "The quantity the the location has in its possession for this tag",
            "type": "integer"
          },
          "available": {
            "description": "The quantity the location has that are available for purchase for this tag",
            "type": "integer"
          },
          "allocated": {
            "description": "The quantity the location has that are already allocated for this tag",
            "type": "integer"
          },
          "pending": {
            "description": "The quantity the location has that are pending for this tag",
            "type": "integer"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "type": "object"
      },
      "taggedInventoryMap": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TagQuantity"
        }
      },
      "InventoryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Inventory Response",
            "description": "Inventory Response",
            "properties": {
              "locationName": {
                "description": "Location Name",
                "type": "string"
              },
              "locationCode": {
                "description": "Location Code",
                "type": "string"
              },
              "tenantID": {
                "description": "Tenant Identifier",
                "type": "integer"
              },
              "onHand": {
                "description": "The quantity the location has in its possession",
                "type": "integer"
              },
              "available": {
                "description": "The quantity the location has that are available for purchase",
                "type": "integer"
              },
              "allocated": {
                "description": "The quantity the location has that are already allocated.",
                "type": "integer"
              },
              "pending": {
                "description": "The quantity the location has that are pending.",
                "type": "integer"
              },
              "partNumber": {
                "description": "Part/Product Number",
                "type": "string"
              },
              "upc": {
                "description": "Universal Product Code",
                "type": "string"
              },
              "sku": {
                "description": "Stock Keeping Unit",
                "type": "string"
              },
              "blockAssignment": {
                "description": "Whether or not the product is blocked for assignment",
                "type": "boolean"
              },
              "ltd": {
                "description": "Custom field used for store prioritization",
                "type": "number"
              },
              "floor": {
                "description": "Absolute minimum quantity of this item that should be in stock at any time",
                "type": "integer"
              },
              "safetyStock": {
                "description": "Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted",
                "type": "integer"
              },
              "distance": {
                "description": "The distance in miles from this location to the item's destination",
                "type": "number"
              },
              "directShip": {
                "description": "Whether this location can ship to a consumer",
                "type": "boolean"
              },
              "transferEnabled": {
                "description": "Whether the location can ship to another location (store), thus restocking that location.",
                "type": "boolean"
              },
              "pickup": {
                "description": "Whether a consumer can pick up product at this location (store)",
                "type": "boolean"
              },
              "countryCode": {
                "description": "The country code of this location",
                "type": "string"
              },
              "currencyID": {
                "description": "The currency identifier for the retailPrice",
                "type": "integer"
              },
              "retailPrice": {
                "description": "The price of the product at this location",
                "type": "number"
              },
              "inventoryLocatorName": {
                "description": "The inventory locator name of the individual item",
                "type": "string"
              },
              "attributes": {
                "description": "List of Inventory Attributes",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "taggedInventory": {
                "$ref": "#/components/schemas/taggedInventoryMap"
              }
            },
            "type": "object"
          }
        ]
      },
      "InventoryRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Inventory Request",
            "description": "Request for getting Inventory",
            "required": [
              "type",
              "items"
            ],
            "properties": {
              "type": {
                "description": "Inventory Request Type Enum",
                "type": "string",
                "enum": [
                  "ALL",
                  "PARTIAL",
                  "ANY",
                  "ALL_STORES"
                ]
              },
              "items": {
                "description": "List of Items to search on",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ItemQuantity"
                }
              },
              "requestLocation": {
                "description": "Location for Request",
                "type": "object",
                "$ref": "#/components/schemas/RequestLocation"
              },
              "limit": {
                "description": "The maximum number of results to return, defaults to 100 for most",
                "type": "integer"
              },
              "locationWhitelist": {
                "description": "List of location codes that are allowed to be included in results",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "locationPriorityList": {
                "description": "List of location codes that should be returned before all others, preventing them from being excluded by limit",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "locationBlacklist": {
                "description": "List of location codes that are NOT allowed to be included in results",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "ignoreSafetyStock": {
                "description": "Whether to ignore the safety stock buffer put in place",
                "type": "boolean"
              },
              "includeNegativeInventory": {
                "description": "Whether to allow items with negative inventory in the results",
                "type": "boolean"
              },
              "directShip": {
                "description": "Whether to limit results to locations that are shipping enabled",
                "type": "boolean"
              },
              "transferEnabled": {
                "description": "Filter results by locations that have transfer enabled (true) or don't (false)",
                "type": "boolean"
              },
              "pickup": {
                "description": "Filter results by locations that have finderbot enabled (true) or don't (false)",
                "type": "boolean"
              },
              "includeInAggregateExport": {
                "description": "Filter results by locations that have aggregate export enabled (true) or don't (false)",
                "type": "boolean"
              },
              "includeInLocationExport": {
                "description": "Filter results by locations that have physical storefronts (true) or don't (false)",
                "type": "boolean"
              },
              "excludeBlockedAssignment": {
                "description": "Filter out results that are blocked from assignment (at the product/location level) ",
                "type": "boolean"
              },
              "includeAttributes": {
                "description": "Flag to include attributes or not",
                "type": "boolean"
              },
              "sortByEnum": {
                "description": "What to sort the inventory results by. Only used for GetInventoryByLocation calls (locationCode must be set)",
                "type": "string",
                "enum": [
                  "ON_HAND",
                  "AVAILABLE",
                  "ALLOCATED",
                  "PART_NUMBER",
                  "PRODUCT_ID"
                ]
              },
              "tags": {
                "$ref": "#/components/schemas/tags"
              }
            },
            "type": "object"
          }
        ]
      },
      "InventoryItem": {
        "title": "Item",
        "description": "Item",
        "properties": {
          "partNumber": {
            "description": "Part/Product Number",
            "type": "string"
          },
          "upc": {
            "description": "Universal Product Code",
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AggregateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Aggregate Request",
            "description": "Request for aggregating inventory",
            "required": [
              "items"
            ],
            "properties": {
              "items": {
                "description": "List of Items to search on",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InventoryItem"
                }
              },
              "ignoreSafetyStock": {
                "description": "Whether to ignore the safety stock buffer put in place",
                "type": "boolean"
              },
              "includeNegativeInventory": {
                "description": "Whether to allow items with negative inventory in the results",
                "type": "boolean"
              },
              "directShip": {
                "description": "Whether to limit results to locations that are shipping enabled",
                "type": "boolean"
              },
              "transferEnabled": {
                "description": "Filter results by locations that apply tax (true) or don't (false)",
                "type": "boolean"
              },
              "pickup": {
                "description": "Filter results by pickup enabled (true) or not (false)",
                "type": "boolean"
              },
              "tags": {
                "$ref": "#/components/schemas/tags"
              }
            },
            "type": "object"
          }
        ]
      },
      "AggregateResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Aggregate Response",
            "description": "Response for aggregating Inventory",
            "properties": {
              "tenantID": {
                "description": "Manufacturer Identifier",
                "type": "integer"
              },
              "onHand": {
                "description": "The quantity the location has in its possession",
                "type": "integer"
              },
              "available": {
                "description": "The quantity the location has that are available for purchase",
                "type": "integer"
              },
              "partNumber": {
                "description": "Part/Product Number",
                "type": "string"
              },
              "upc": {
                "description": "Universal Product Code",
                "type": "string"
              },
              "sku": {
                "description": "Stock Keeping Unit",
                "type": "string"
              },
              "floor": {
                "description": "Absolute minimum quantity of this item that should be in stock at any time",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "RefreshItem": {
        "title": "Refresh Item",
        "description": "Refresh Item",
        "properties": {
          "partNumber": {
            "description": "Part/Product Number",
            "type": "string"
          },
          "upc": {
            "description": "Universal Product Code",
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          },
          "binID": {
            "description": "Bin Location Identifier",
            "type": "integer"
          },
          "LTD": {
            "description": "Custom field used for store prioritization",
            "type": "number"
          },
          "floor": {
            "description": "Absolute minimum quantity of this item that should be in stock at any time",
            "type": "integer"
          },
          "safetyStock": {
            "description": "Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted",
            "type": "integer"
          },
          "quantity": {
            "description": "Current Quantity of Item",
            "type": "integer"
          },
          "retailPrice": {
            "description": "Stock Keeping Unit",
            "type": "number"
          },
          "currencyID": {
            "description": "The price of the item",
            "type": "integer"
          },
          "inventoryLocatorName": {
            "description": "The inventory locator name of the item",
            "type": "string"
          },
          "attributes": {
            "description": "List of Item Attributes",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "deliveryDate": {
            "description": "Date at which this inventory will become available. Expected format '2020-09-28T12:00:00-0500'",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "RefreshRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Refresh Request",
            "description": "Request needed for refreshing inventory",
            "required": [
              "locationCode"
            ],
            "properties": {
              "items": {
                "description": "List of items to refresh",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RefreshItem"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "JobIDResponse": {
        "title": "Job ID Response",
        "description": "Job ID Response",
        "properties": {
          "jobID": {
            "description": "Job ID",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AdjustItem": {
        "title": "Adjust Item",
        "description": "Adjust Item",
        "properties": {
          "partNumber": {
            "description": "Part/Product Number",
            "type": "string"
          },
          "upc": {
            "description": "Universal Product Code",
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          },
          "binID": {
            "description": "Bin Location Identifier",
            "type": "integer"
          },
          "quantity": {
            "description": "Current Quantity of Item",
            "type": "integer"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "deliveryDate": {
            "description": "Date at which this inventory will become available. Expected format '2020-09-28T12:00:00-0500'",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "AdjustRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Adjust Request",
            "description": "Request needed for adjusting inventory",
            "properties": {
              "items": {
                "description": "List of items to adjust",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustItem"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "DeleteItemRequest": {
        "title": "Delete Item Request",
        "description": "Request needed for deleting inventory",
        "properties": {
          "dryRun": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "explicit": {
            "description": "Flag used to request explicit inventory, location, pick wave, and audit information for each request item.",
            "type": "boolean"
          },
          "locationCodes": {
            "description": "An array of locationCodes to be considered for item-deletion purposes. Optional.\n    All locationCodes associated with the requesting tenant will be considered if no locationCodes are provided.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allLocations": {
            "description": "Flag used to request deletion of inventory across all locations (overrides locationCodes).",
            "type": "boolean"
          },
          "partNumber": {
            "description": "The part number of the item to be deleted. Supports basic regex operators: .*+?^$[]",
            "type": "string"
          },
          "upc": {
            "description": "The upc of the item to be deleted. Supports basic regex operators: .*+?^$[]",
            "type": "string"
          },
          "sku": {
            "description": "The sku of the item to be deleted. Supports basic regex operators: .*+?^$[]",
            "type": "string"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "type": "object"
      },
      "ProductIdentifier": {
        "title": "ProductIdentifier",
        "description": "Product Identifier Model",
        "properties": {
          "partNumber": {
            "description": "Part/Product Number",
            "type": "string"
          },
          "upc": {
            "description": "Universal Product Code",
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          }
        },
        "type": "object"
      },
      "M_DeleteItem": {
        "title": "M_DeleteItem",
        "description": "Delete Item Model",
        "properties": {
          "productID": {
            "description": "Product Identifier",
            "type": "integer"
          },
          "inventoryIDs": {
            "description": "List of inventory identifiers associated with the deleted item",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "locationIDs": {
            "description": "List of location identifiers associated with the deleted item",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "auditIDs": {
            "description": "List of audit identifiers associated with the deleted item",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "itemIdentifier": {
            "description": "Details about the item that was deleted",
            "$ref": "#/components/schemas/ProductIdentifier"
          }
        },
        "type": "object"
      },
      "DeleteItemResponse": {
        "title": "Delete Item Response",
        "description": "Delete Item Response",
        "properties": {
          "dryRun": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "itemsDeleted": {
            "description": "Items deleted due to the request",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/M_DeleteItem"
            }
          },
          "totalAuditsDeleted": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "totalInventoryEntriesDeleted": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "totalLocationsAffected": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "totalPickWavesDeleted": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "totalProductsDeleted": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "jobIDs": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "LocationType": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "Coordinates": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "double"
          },
          "lng": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "FulfillmentType": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Hours": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "openTime": {
            "type": "string",
            "nullable": true
          },
          "closeTime": {
            "type": "string",
            "nullable": true
          },
          "isClosed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RegularHours": {
        "type": "object",
        "properties": {
          "sunday": {
            "$ref": "#/components/schemas/Hours"
          },
          "monday": {
            "$ref": "#/components/schemas/Hours"
          },
          "tuesday": {
            "$ref": "#/components/schemas/Hours"
          },
          "wednesday": {
            "$ref": "#/components/schemas/Hours"
          },
          "thursday": {
            "$ref": "#/components/schemas/Hours"
          },
          "friday": {
            "$ref": "#/components/schemas/Hours"
          },
          "saturday": {
            "$ref": "#/components/schemas/Hours"
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShippingOriginContact": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "middleNameOrInitial": {
            "type": "string",
            "nullable": true
          },
          "lastNameOrSurname": {
            "type": "string",
            "nullable": true
          },
          "companyOrOrganization": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocationAttribute": {
        "type": "object",
        "properties": {
          "attributeDefinition": {
            "$ref": "#/components/schemas/CommerceRuntimeAttribute"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "fullyQualifiedName": {
            "type": "string",
            "nullable": true
          },
          "attributeDefinitionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {},
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Location": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "locationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationType"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/CommerceRuntimeAddress"
          },
          "geo": {
            "$ref": "#/components/schemas/Coordinates"
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "supportsInventory": {
            "type": "boolean"
          },
          "fulfillmentTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FulfillmentType"
            },
            "nullable": true
          },
          "regularHours": {
            "$ref": "#/components/schemas/RegularHours"
          },
          "shippingOriginContact": {
            "$ref": "#/components/schemas/ShippingOriginContact"
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationAttribute"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "allowFulfillmentWithNoStock": {
            "type": "boolean"
          },
          "isDisabled": {
            "type": "boolean"
          },
          "express": {
            "type": "boolean"
          },
          "transferEnabled": {
            "type": "boolean"
          },
          "shipToHomeConsolidation": {
            "type": "boolean"
          },
          "includeInInventoryAggregrate": {
            "type": "boolean"
          },
          "includeInLocationExport": {
            "type": "boolean"
          },
          "warehouseEnabled": {
            "type": "boolean"
          },
          "requiresManifest": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LocationCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Location"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocationLocationGroup": {
        "type": "object",
        "properties": {
          "locationGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "locationGroupCode": {
            "type": "string",
            "nullable": true
          },
          "siteIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "locationCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "LocationGroupCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationLocationGroup"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShippingMethodMappings": {
        "type": "object",
        "properties": {
          "shippingMethods": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "returnLabelShippingMethod": {
            "type": "string",
            "nullable": true
          },
          "standardDefault": {
            "type": "string",
            "nullable": true
          },
          "express1DayDefault": {
            "type": "string",
            "nullable": true
          },
          "express2DayDefault": {
            "type": "string",
            "nullable": true
          },
          "express3DayDefault": {
            "type": "string",
            "nullable": true
          },
          "enableSmartPost": {
            "type": "boolean",
            "nullable": true
          },
          "internationalUsReturnLabelShippingMethod": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Carrier": {
        "type": "object",
        "properties": {
          "carrierType": {
            "type": "string",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean"
          },
          "shippingMethodMappings": {
            "$ref": "#/components/schemas/ShippingMethodMappings"
          }
        },
        "additionalProperties": false
      },
      "BoxType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "height": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "width": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "length": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BpmConfiguration": {
        "type": "object",
        "properties": {
          "shipmentType": {
            "type": "string",
            "nullable": true
          },
          "workflowContainerId": {
            "type": "string",
            "nullable": true
          },
          "workflowProcessId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PackageSettings": {
        "type": "object",
        "properties": {
          "unitType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocationGroupConfiguration": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "type": "integer",
            "format": "int32"
          },
          "locationGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "locationGroupCode": {
            "type": "string",
            "nullable": true
          },
          "customerFailedToPickupAfterAction": {
            "type": "string",
            "nullable": true
          },
          "customerFailedToPickupDeadline": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sendCustomerPickupReminder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "enableForSTH": {
            "type": "boolean",
            "nullable": true
          },
          "enableForISPU": {
            "type": "boolean",
            "nullable": true
          },
          "enableAdvancedOptionForPickWaveCreation": {
            "type": "boolean",
            "nullable": true
          },
          "maximumNumberOfOrdersInPickWave": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "defaultNumberOfOrdersInPickWave": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pickWavePrintFormat": {
            "type": "string",
            "nullable": true
          },
          "closePickWavePermissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "wmsEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "enableScanningOfUpcForShipToHome": {
            "type": "boolean",
            "nullable": true
          },
          "allowReturns": {
            "type": "boolean",
            "nullable": true
          },
          "returnRefundReduction": {
            "type": "boolean",
            "nullable": true
          },
          "defaultReturnRefundReductionAmount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maximumReturnRefundReductionAmount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "defaultCarrier": {
            "type": "string",
            "nullable": true
          },
          "carriers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Carrier"
            },
            "nullable": true
          },
          "printReturnLabel": {
            "type": "boolean",
            "nullable": true
          },
          "defaultPrinterType": {
            "type": "string",
            "nullable": true
          },
          "boxTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BoxType"
            },
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationAttribute"
            },
            "nullable": true
          },
          "bpmConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BpmConfiguration"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "autoPackingListPopup": {
            "type": "boolean",
            "nullable": true
          },
          "blockPartialStock": {
            "type": "boolean",
            "nullable": true
          },
          "defaultMaxNumberOfShipmentsInPickWave": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "displayProductImagesInPickWaveDetails": {
            "type": "boolean",
            "nullable": true
          },
          "enablePnpForSTH": {
            "type": "boolean",
            "nullable": true
          },
          "enablePnpForBOPIS": {
            "type": "boolean",
            "nullable": true
          },
          "blockPartialCancel": {
            "type": "boolean",
            "nullable": true
          },
          "packageSettings": {
            "$ref": "#/components/schemas/PackageSettings"
          },
          "maxNumberOfPackingSlipsByGroup": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocationUsage": {
        "type": "object",
        "properties": {
          "locationUsageTypeCode": {
            "type": "string",
            "nullable": true
          },
          "locationTypeCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "locationCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "LocationUsageCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationUsage"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EntityCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {},
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EntityContainer": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "masterCatalogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "catalogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "localeCode": {
            "type": "string",
            "description": "The localeCode for the Entity. This will only be populated for EntityLists that are created with IsLocaleSpecific set to true.",
            "nullable": true
          },
          "listFullName": {
            "type": "string",
            "description": "The nameSpace and name for the EntityList in the format name@nameSpace.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "The userId of the shopper account associated with this Entity. This will only be populated for EntityLists that are creaetd with IsShopperSpecific set to true.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the Entity.",
            "nullable": true
          },
          "item": {
            "description": "The entity in json format.",
            "nullable": true
          },
          "createBy": {
            "type": "string",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "updateBy": {
            "type": "string",
            "nullable": true
          },
          "updateDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The metadata and Entity contents for an entity persisted in an EntityList in MZDB. The Item property contains the json representation of the Entity"
      },
      "EntityContainerCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityContainer"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IndexedProperty": {
        "type": "object",
        "properties": {
          "propertyName": {
            "type": "string",
            "description": "A JPath query indicating the property that should be indexed to enable querying and sorting.  Non-indexed properties may be used in queries as long as at least one indexed property is also provided in the query.",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "description": "The datatype of the property. Valid values are \"string\", \"integer\", \"decimal\", \"date\", \"bool\". See SharedConstants.DataTypeConst",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListViewField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the field in the view.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The datatype of the field. Valid values are \"string\", \"integer\", \"decimal\", \"date\", \"bool\". See SharedConstants.DataTypeConst",
            "nullable": true
          },
          "target": {
            "type": "string",
            "description": "A JPath query to the source property for this ViewField.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "shared by cms/mzdb."
      },
      "ListView": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the ListView. This must be unique for the EntityList.",
            "nullable": true
          },
          "usages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Usages are arbitratry sting values used to provide instructions for other applications as to the intended areas where the view should be used. Mozu uses the \"admin\" usage valued to indicate that a ListView should appear in the EntityManager in the Admin UI.  The values are open ended and applications may provide any value for a usage. This field can be used in queries to the EntityList.",
            "nullable": true
          },
          "metaData": {
            "description": "An arbitrary json property to be used by external applications for any purpose. MZDB will persist and retrieve the metadata without any restrictions.",
            "nullable": true
          },
          "security": {
            "type": "string",
            "description": "less restrictive than collection/list security. public | admin | owner",
            "nullable": true
          },
          "filter": {
            "type": "string",
            "description": "Indicates a implicitly applied filter to the EntityList for to which the ListView is associated. All queries to the ListView will have this filter applied implicitly.",
            "nullable": true
          },
          "defaultSort": {
            "type": "string",
            "description": "Indicates a default sort to be applied to the ListView.",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListViewField"
            },
            "description": "The list of ViewFields for this view. ViewFields can be used to filter or transform the underlying Entity to provide an optimized format for applications which query the ListView.  If no ViewFields are specified, entities will be returned for the View with no transform applied.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EntityList": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "nameSpace": {
            "type": "string",
            "description": "The nameSpace for the EntityList which must be within the nameSpace scope of the developer Account for the creating application.  The name and namespace are formatted as name@nameSpace when specified as fullName. An EntityLists fullName must be unique within the tenant in which it is created.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name for the EntityList which must be unique within the namespace provided.  The name and namespace are formatted as name@nameSpace when specified as fullName. An EntityLists fullName must be unique within the tenant in which it is created.",
            "nullable": true
          },
          "contextLevel": {
            "type": "string",
            "description": "At which context level are entities stored in the list. Possible values are \"tenant\", \"site\", \"masterCatalog\" or \"catalog\".  Each list instance will exist at this context level for the tenant.",
            "nullable": true
          },
          "useSystemAssignedId": {
            "type": "boolean",
            "description": "Indicates whether or not Mozu should assign a generated identifier for each entity in the list or whether a unique identifier will be provided for each identity. If set to false, then a value must be provided for the IdProperty for the list."
          },
          "idProperty": {
            "$ref": "#/components/schemas/IndexedProperty"
          },
          "indexA": {
            "$ref": "#/components/schemas/IndexedProperty"
          },
          "indexB": {
            "$ref": "#/components/schemas/IndexedProperty"
          },
          "indexC": {
            "$ref": "#/components/schemas/IndexedProperty"
          },
          "indexD": {
            "$ref": "#/components/schemas/IndexedProperty"
          },
          "isVisibleInStorefront": {
            "type": "boolean",
            "description": "Indicates whether Enitities in the EntityList are allowed to be accessed from a Mozu storefront."
          },
          "isLocaleSpecific": {
            "type": "boolean",
            "description": "Indicates whether MZDB should store entities in the EntityList instance specific to the localeCode provided.  If true, all operations on the EntityList will be filtered by the provided localeCode on the request or using the defautLocaleCode for the context.  All entities created in the EntityList will be stored with the localeCode provided on the request or the defautLocaleCode for the context as an additional implicit key. The default value is false."
          },
          "isShopperSpecific": {
            "type": "boolean",
            "description": "Indicates whether MZDB should store entities in the EntityList instance specific to the current shopper on the request.  If true, all operations on the EntityList will be filtered by the id of the shopper from the shopper claims provided on the request.  All entities created in the EntityList will be stored with the id of the shopper from the shopper claims provided on the request as an additional implicit key. The default value is false."
          },
          "isSandboxDataCloningSupported": {
            "type": "boolean",
            "description": "Indicates whether MZDB should clone all of the Entities in the EntityList when cloning an existing sandbox for which this list is already defined.  The default value is false."
          },
          "views": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListView"
            },
            "description": "The ListViews defined for this EntityList.  ListViews may be used to automatically filter an EntityList or transform the Entities in the list to a new Schema.",
            "nullable": true
          },
          "usages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Usages are arbitratry sting values used to provide instructions for other applications as to the intended areas where the list should be used. Mozu uses the \"admin\" usage valued to indicate that an EntityList should appear in the EntityManager in the Admin UI.  The values are open ended and applications may provide any value for a usage. This field can be used in queries to the EntityList.",
            "nullable": true
          },
          "metadata": {
            "description": "An arbitrary json property to be used by external applications for any purpose. MZDB will persist and retrieve the metadata without any restrictions.",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "updateDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The definition of an MZDB EntityList which describes the characteristics of the EntityList on a per tenant basis. EntityLists are created at the tenant level, but instances of the EntityLists are implicitly created at the appropriate context level as entities are added or removed from the EntityList."
      },
      "EntityListCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityList"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListViewCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListView"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomDataList": {
        "title": "CustomDataList",
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "creatorUsername": {
            "type": "string"
          },
          "customDataListID": {
            "type": "integer",
            "format": "int32"
          },
          "dataType": {
            "type": "string",
            "enum": [
              "STRING",
              "NUMBER",
              "LOCATION"
            ]
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomDataListEntry"
            }
          },
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "fileName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "pathString": {
            "type": "string"
          },
          "persisted": {
            "type": "boolean"
          },
          "siteID": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "type": "string",
            "enum": [
              "dataset.ready",
              "dataset.processing",
              "dataset.error.processing"
            ]
          },
          "stringValues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updaterUsername": {
            "type": "string"
          },
          "userContext": {
            "$ref": "#/components/schemas/UserContextInformation"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "CustomDataListEntry": {
        "title": "CustomDataListEntry",
        "type": "object",
        "properties": {
          "customDataListEntryID": {
            "type": "integer",
            "format": "int32"
          },
          "dataValid": {
            "type": "boolean"
          },
          "list": {
            "type": "object"
          },
          "notes": {
            "type": "string"
          },
          "stringValue": {
            "type": "string"
          }
        }
      },
      "SiteService": {
        "title": "SiteService",
        "type": "object"
      },
      "TenantService": {
        "title": "TenantService",
        "type": "object"
      },
      "UserContextInformation": {
        "title": "UserContextInformation",
        "type": "object",
        "properties": {
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "loaded": {
            "type": "boolean"
          },
          "pathString": {
            "type": "string"
          },
          "siteID": {
            "type": "integer",
            "format": "int32"
          },
          "siteService": {
            "$ref": "#/components/schemas/SiteService"
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "tenantService": {
            "$ref": "#/components/schemas/TenantService"
          }
        }
      },
      "CustomDataListEntryResponse": {
        "title": "CustomDataListEntryResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "locationAddress": {
            "type": "string"
          },
          "locationID": {
            "type": "integer",
            "format": "int32"
          },
          "locationName": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "stringValue": {
            "type": "string"
          }
        }
      },
      "CustomDataListResponse": {
        "title": "CustomDataListResponse",
        "type": "object",
        "properties": {
          "created": {
            "type": "string"
          },
          "creator": {
            "type": "string"
          },
          "dataType": {
            "type": "string",
            "enum": [
              "STRING",
              "NUMBER",
              "LOCATION"
            ]
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomDataListEntryResponse"
            }
          },
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "siteID": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "type": "string",
            "enum": [
              "dataset.ready",
              "dataset.processing",
              "dataset.error.processing"
            ]
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "updated": {
            "type": "string"
          },
          "updater": {
            "type": "string"
          }
        }
      },
      "Dimension": {
        "title": "Dimension",
        "type": "object"
      },
      "UnitOfobject": {
        "title": "UnitOfobject",
        "type": "object",
        "properties": {
          "dimension": {
            "$ref": "#/components/schemas/Dimension"
          },
          "standardUnit": {
            "type": "object"
          }
        }
      },
      "LocationCriteriaSetDataDefinition": {
        "title": "LocationCriteriaSetDataDefinition",
        "type": "object",
        "properties": {
          "columnName": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "creatorUsername": {
            "type": "string"
          },
          "dataDefinitionID": {
            "type": "integer",
            "format": "int32"
          },
          "dataUnitString": {
            "type": "string"
          },
          "defaultValue": {
            "type": "string"
          },
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "filterable": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "pathString": {
            "type": "string"
          },
          "persisted": {
            "type": "boolean"
          },
          "siteID": {
            "type": "integer",
            "format": "int32"
          },
          "sortable": {
            "type": "boolean"
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "unit": {
            "$ref": "#/components/schemas/UnitOfobject"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updaterUsername": {
            "type": "string"
          },
          "userContext": {
            "$ref": "#/components/schemas/UserContextInformation"
          }
        }
      },
      "LocationCriteriaSet": {
        "title": "LocationCriteriaSet",
        "type": "object",
        "properties": {
          "columnDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationCriteriaSetDataDefinition"
            }
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "creatorUsername": {
            "type": "string"
          },
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "fileName": {
            "type": "string"
          },
          "locationCriteriaSetID": {
            "type": "integer",
            "format": "int32"
          },
          "pathString": {
            "type": "string"
          },
          "persisted": {
            "type": "boolean"
          },
          "readyState": {
            "type": "string",
            "enum": [
              "dataset.ready",
              "dataset.processing",
              "dataset.error.processing"
            ]
          },
          "siteID": {
            "type": "integer",
            "format": "int32"
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updaterUsername": {
            "type": "string"
          },
          "userContext": {
            "$ref": "#/components/schemas/UserContextInformation"
          }
        }
      },
      "LocationCriteriaSetFilter": {
        "title": "LocationCriteriaSetFilter",
        "type": "object",
        "properties": {
          "acceptNulls": {
            "type": "boolean"
          },
          "booleanOperator": {
            "type": "string",
            "enum": [
              "filter.logic.equal",
              "filter.logic.not.equal",
              "filter.logic.greater.than",
              "filter.logic.less.than",
              "filter.logic.greater.or.equal",
              "filter.logic.less.or.equal",
              "filter.logic.in",
              "filter.logic.not.in",
              "filter.logic.between",
              "filter.logic.starts.with",
              "filter.logic.ends.with",
              "filter.logic.contains",
              "filter.logic.subset"
            ]
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "creatorUsername": {
            "type": "string"
          },
          "customAttributeName": {
            "type": "string"
          },
          "definitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationCriteriaSetDataDefinition"
            }
          },
          "dotDelimitedPropertyName": {
            "type": "string"
          },
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "filterID": {
            "type": "integer",
            "format": "int32"
          },
          "filterUnit": {
            "$ref": "#/components/schemas/UnitOfobject"
          },
          "locationCriteriaSet": {
            "$ref": "#/components/schemas/LocationCriteriaSet"
          },
          "name": {
            "type": "string"
          },
          "pathString": {
            "type": "string"
          },
          "persisted": {
            "type": "boolean"
          },
          "siteID": {
            "type": "integer",
            "format": "int32"
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updaterUsername": {
            "type": "string"
          },
          "userContext": {
            "$ref": "#/components/schemas/UserContextInformation"
          }
        }
      },
      "AbstractFilter": {
        "title": "AbstractFilter",
        "type": "object",
        "properties": {
          "booleanOperator": {
            "type": "string",
            "enum": [
              "filter.logic.equal",
              "filter.logic.not.equal",
              "filter.logic.greater.than",
              "filter.logic.less.than",
              "filter.logic.greater.or.equal",
              "filter.logic.less.or.equal",
              "filter.logic.in",
              "filter.logic.not.in",
              "filter.logic.between",
              "filter.logic.starts.with",
              "filter.logic.ends.with",
              "filter.logic.contains",
              "filter.logic.subset"
            ]
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "creatorUsername": {
            "type": "string"
          },
          "customAttributeName": {
            "type": "string"
          },
          "dotDelimitedPropertyName": {
            "type": "string"
          },
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "filterID": {
            "type": "integer",
            "format": "int32"
          },
          "filterUnit": {
            "$ref": "#/components/schemas/UnitOfobject"
          },
          "name": {
            "type": "string"
          },
          "pathString": {
            "type": "string"
          },
          "persisted": {
            "type": "boolean"
          },
          "siteID": {
            "type": "integer",
            "format": "int32"
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updaterUsername": {
            "type": "string"
          },
          "userContext": {
            "$ref": "#/components/schemas/UserContextInformation"
          }
        }
      },
      "CustomDataListFilter": {
        "title": "CustomDataListFilter",
        "type": "object",
        "properties": {
          "booleanOperator": {
            "type": "string",
            "enum": [
              "filter.logic.equal",
              "filter.logic.not.equal",
              "filter.logic.greater.than",
              "filter.logic.less.than",
              "filter.logic.greater.or.equal",
              "filter.logic.less.or.equal",
              "filter.logic.in",
              "filter.logic.not.in",
              "filter.logic.between",
              "filter.logic.starts.with",
              "filter.logic.ends.with",
              "filter.logic.contains",
              "filter.logic.subset"
            ]
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "creatorUsername": {
            "type": "string"
          },
          "customAttributeName": {
            "type": "string"
          },
          "customDataListID": {
            "type": "integer",
            "format": "int32"
          },
          "dotDelimitedPropertyName": {
            "type": "string"
          },
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "filterID": {
            "type": "integer",
            "format": "int32"
          },
          "filterUnit": {
            "$ref": "#/components/schemas/UnitOfobject"
          },
          "name": {
            "type": "string"
          },
          "pathString": {
            "type": "string"
          },
          "persisted": {
            "type": "boolean"
          },
          "siteID": {
            "type": "integer",
            "format": "int32"
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updaterUsername": {
            "type": "string"
          },
          "userContext": {
            "$ref": "#/components/schemas/UserContextInformation"
          }
        }
      },
      "CustomDataValueOfobject": {
        "title": "CustomDataValueOfobject",
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "creatorUsername": {
            "type": "string"
          },
          "customDataValueID": {
            "type": "integer",
            "format": "int32"
          },
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "pathString": {
            "type": "string"
          },
          "persisted": {
            "type": "boolean"
          },
          "siteID": {
            "type": "integer",
            "format": "int32"
          },
          "stringValue": {
            "type": "string"
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updaterUsername": {
            "type": "string"
          },
          "userContext": {
            "$ref": "#/components/schemas/UserContextInformation"
          }
        }
      },
      "CustomDataValueFilter": {
        "title": "CustomDataValueFilter",
        "type": "object",
        "properties": {
          "booleanOperator": {
            "type": "string",
            "enum": [
              "filter.logic.equal",
              "filter.logic.not.equal",
              "filter.logic.greater.than",
              "filter.logic.less.than",
              "filter.logic.greater.or.equal",
              "filter.logic.less.or.equal",
              "filter.logic.in",
              "filter.logic.not.in",
              "filter.logic.between",
              "filter.logic.starts.with",
              "filter.logic.ends.with",
              "filter.logic.contains",
              "filter.logic.subset"
            ]
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "creatorUsername": {
            "type": "string"
          },
          "customAttributeName": {
            "type": "string"
          },
          "customDataValue": {
            "$ref": "#/components/schemas/CustomDataValueOfobject"
          },
          "dotDelimitedPropertyName": {
            "type": "string"
          },
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "filterID": {
            "type": "integer",
            "format": "int32"
          },
          "filterUnit": {
            "$ref": "#/components/schemas/UnitOfobject"
          },
          "name": {
            "type": "string"
          },
          "pathString": {
            "type": "string"
          },
          "persisted": {
            "type": "boolean"
          },
          "siteID": {
            "type": "integer",
            "format": "int32"
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updaterUsername": {
            "type": "string"
          },
          "userContext": {
            "$ref": "#/components/schemas/UserContextInformation"
          }
        }
      },
      "GroupAfterAction": {
        "title": "GroupAfterAction",
        "type": "object",
        "properties": {
          "actionID": {
            "type": "integer",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "creatorUsername": {
            "type": "string"
          },
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "failoverAction": {
            "type": "string",
            "enum": [
              "LINE_ITEM_SPLIT_ASSIGN_IF_FULFILLED",
              "LINE_ITEM_SPLIT_CANCEL_WITHOUT_INVENTORY",
              "QUANTITY_SPLIT_ASSIGN_IF_FULFILLED",
              "QUANTITY_SPLIT_CANCEL_WITHOUT_INVENTORY",
              "CANCEL_ORDER",
              "ASSIGN_TO_CUSTOMER_CARE",
              "ASSIGN_TO_GROUP",
              "LINE_ITEM_SPLIT_ASSIGN_CUSTOMER_CARE_WITHOUT_INVENTORY",
              "QUANTITY_SPLIT_ASSIGN_CUSTOMER_CARE_WITHOUT_INVENTORY",
              "SEND_ORDER_TO_BIDDING",
              "LINE_ITEM_SPLIT_BACKORDER_WITHOUT_INVENTORY",
              "QUANTITY_SPLIT_BACKORDER_WITHOUT_INVENTORY",
              "ASSIGN_TO_BACKORDER"
            ]
          },
          "name": {
            "type": "string"
          },
          "pathString": {
            "type": "string"
          },
          "persisted": {
            "type": "boolean"
          },
          "restartAttempt": {
            "type": "string",
            "enum": [
              "START_AT_BEGINNING",
              "CURRENT_GROUP",
              "GROUP_RANK"
            ]
          },
          "siteID": {
            "type": "integer",
            "format": "int32"
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updaterUsername": {
            "type": "string"
          },
          "userContext": {
            "$ref": "#/components/schemas/UserContextInformation"
          }
        }
      },
      "FulfillmentLimit": {
        "title": "FulfillmentLimit",
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "creatorUsername": {
            "type": "string"
          },
          "durationType": {
            "type": "string",
            "enum": [
              "HOURS",
              "DAYS",
              "WEEKS",
              "MONTHS"
            ]
          },
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "fulfillmentLimit": {
            "type": "number"
          },
          "fulfillmentLimitID": {
            "type": "integer",
            "format": "int32"
          },
          "fulfillmentType": {
            "type": "string",
            "enum": [
              "ORDERS",
              "ITEMS",
              "DOLLARS"
            ]
          },
          "name": {
            "type": "string"
          },
          "pathString": {
            "type": "string"
          },
          "persisted": {
            "type": "boolean"
          },
          "siteID": {
            "type": "integer",
            "format": "int32"
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updaterUsername": {
            "type": "string"
          },
          "userContext": {
            "$ref": "#/components/schemas/UserContextInformation"
          }
        }
      },
      "RankedLocation": {
        "title": "RankedLocation",
        "type": "object",
        "properties": {
          "locationCode": {
            "type": "string"
          },
          "locationID": {
            "type": "integer",
            "format": "int32"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LocationSort": {
        "title": "LocationSort",
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "creatorUsername": {
            "type": "string"
          },
          "descending": {
            "type": "boolean"
          },
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "locationSortID": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "pathString": {
            "type": "string"
          },
          "persisted": {
            "type": "boolean"
          },
          "siteID": {
            "type": "integer",
            "format": "int32"
          },
          "sortingType": {
            "type": "string",
            "enum": [
              "RANK",
              "DISTANCE",
              "LTD",
              "COST",
              "RANDOM",
              "DATA_SET"
            ]
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updaterUsername": {
            "type": "string"
          },
          "userContext": {
            "$ref": "#/components/schemas/UserContextInformation"
          }
        }
      },
      "ApiDocumentationLocationGroup": {
        "title": "LocationGroup",
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "afterActionNone": {
            "$ref": "#/components/schemas/GroupAfterAction"
          },
          "afterActionPartial": {
            "$ref": "#/components/schemas/GroupAfterAction"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "creatorUsername": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "excludedLocationsFromDefaultGroup": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbstractFilter"
            }
          },
          "fulfillmentLimit": {
            "$ref": "#/components/schemas/FulfillmentLimit"
          },
          "groupID": {
            "type": "integer",
            "format": "int32"
          },
          "isDefaultGroup": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "pathString": {
            "type": "string"
          },
          "persisted": {
            "type": "boolean"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "rankedLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RankedLocation"
            }
          },
          "siteID": {
            "type": "integer",
            "format": "int32"
          },
          "sorts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationSort"
            }
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updaterUsername": {
            "type": "string"
          },
          "useRetailerExclusionList": {
            "type": "boolean"
          }
        }
      },
      "LocationResponseModel": {
        "title": "LocationResponseModel",
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "countryCode": {
            "type": "string"
          },
          "created": {
            "type": "string"
          },
          "directShip": {
            "type": "boolean"
          },
          "express": {
            "type": "boolean"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "locationCode": {
            "type": "string"
          },
          "locationID": {
            "type": "integer",
            "format": "int32"
          },
          "locationName": {
            "type": "string"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "pickup": {
            "type": "boolean"
          },
          "postalCode": {
            "type": "string"
          },
          "stateOrProvince": {
            "type": "string"
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "transferEnabled": {
            "type": "boolean"
          },
          "updated": {
            "type": "string"
          }
        }
      },
      "LocationListResponseModel": {
        "title": "LocationListResponseModel",
        "type": "object",
        "properties": {
          "pageNum": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "paginatedResults": {
            "type": "integer",
            "format": "int32"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationResponseModel"
            }
          },
          "totalResults": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ExclusionListEntryLocationCode": {
        "title": "ExclusionListEntryLocationCode",
        "type": "object",
        "properties": {
          "locationCode": {
            "type": "string"
          },
          "orderItemID": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiDocumentationOrderItem": {
        "title": "OrderItem",
        "type": "object",
        "properties": {
          "backorderable": {
            "type": "boolean"
          },
          "customItemData": {
            "type": "object",
            "properties": {}
          },
          "itemDependency": {
            "type": "integer",
            "format": "int32"
          },
          "orderItemID": {
            "type": "integer",
            "format": "int32"
          },
          "partNumber": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "sku": {
            "type": "string"
          },
          "upc": {
            "type": "string"
          }
        }
      },
      "ShippingAddress": {
        "title": "ShippingAddress",
        "type": "object",
        "properties": {
          "addressID": {
            "type": "integer",
            "format": "int32"
          },
          "addressLine1": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "customerID": {
            "type": "integer",
            "format": "int32"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "phone": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "CandidateSuggestionsRequest": {
        "title": "CandidateSuggestionsRequest",
        "type": "object",
        "properties": {
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "exclusionListLocationCode": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExclusionListEntryLocationCode"
            }
          },
          "inventoryRequestType": {
            "type": "string",
            "enum": [
              "ALL",
              "PARTIAL",
              "ANY",
              "ALL_STORES"
            ]
          },
          "isExpress": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiDocumentationOrderItem"
            }
          },
          "locationCodeWhiteList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "orderType": {
            "type": "string",
            "enum": [
              "DIRECTSHIP",
              "TRANSFER",
              "STH_CONSOLIDATED"
            ]
          },
          "pickupLocationCode": {
            "type": "string"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/ShippingAddress"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CandidateSuggestionInventory": {
        "title": "CandidateSuggestionInventory",
        "type": "object",
        "properties": {
          "available": {
            "type": "integer",
            "format": "int32"
          },
          "partNumber": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "upc": {
            "type": "string"
          }
        }
      },
      "CandidateSuggestion": {
        "title": "CandidateSuggestion",
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "addressLine3": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "directShip": {
            "type": "boolean"
          },
          "distance": {
            "type": "string"
          },
          "express": {
            "type": "boolean"
          },
          "inventory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateSuggestionInventory"
            }
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "locationCode": {
            "type": "string"
          },
          "locationName": {
            "type": "string"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "pickup": {
            "type": "boolean"
          },
          "postalCode": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "transferEnabled": {
            "type": "boolean"
          }
        }
      },
      "CandidateSuggestionsResponse": {
        "title": "CandidateSuggestionsResponse",
        "type": "object",
        "properties": {
          "candidateSuggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateSuggestion"
            }
          }
        }
      },
      "SuggestionRequest": {
        "title": "SuggestionRequest",
        "type": "object",
        "properties": {
          "bundlingStrategy": {
            "type": "string",
            "enum": [
              "ITEM_DEPENDENCY"
            ]
          },
          "customData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "exclusionListLocationCode": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExclusionListEntryLocationCode"
            }
          },
          "externalResponseID": {
            "type": "string"
          },
          "fraud": {
            "type": "integer",
            "format": "int32"
          },
          "inventoryRequestType": {
            "type": "string",
            "enum": [
              "ALL",
              "PARTIAL",
              "ANY",
              "ALL_STORES"
            ]
          },
          "isExpress": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiDocumentationOrderItem"
            }
          },
          "locationCodeWhiteList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "numShipmentsNotInRequest": {
            "type": "integer",
            "format": "int32"
          },
          "orderID": {
            "type": "integer",
            "format": "int32"
          },
          "orderType": {
            "type": "string",
            "enum": [
              "DIRECTSHIP",
              "TRANSFER",
              "STH_CONSOLIDATED"
            ]
          },
          "pickupLocationCode": {
            "type": "string"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/ShippingAddress"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "total": {
            "type": "number"
          }
        }
      },
      "AssignmentSuggestion": {
        "title": "AssignmentSuggestion",
        "type": "object",
        "properties": {
          "locationCode": {
            "type": "string"
          },
          "locationID": {
            "type": "integer",
            "format": "int32"
          },
          "orderItemID": {
            "type": "integer",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "route": {
            "type": "string",
            "enum": [
              "DIRECTSHIP",
              "TRANSFER",
              "STH_CONSOLIDATED"
            ]
          }
        }
      },
      "StateChangeSuggestion": {
        "title": "StateChangeSuggestion",
        "type": "object",
        "properties": {
          "orderItemID": {
            "type": "integer",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "stateChange": {
            "type": "string",
            "enum": [
              "CANCEL",
              "CUSTOMER_CARE",
              "AVAILABLE",
              "BACKORDER"
            ]
          }
        }
      },
      "SuggestionEvent": {
        "title": "SuggestionEvent",
        "type": "object",
        "properties": {
          "causeID": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "NEW_REQUEST",
              "ROUTE_SELECTED",
              "MAKE_LOCATIONS_AVAILABLE",
              "NO_ROUTE_FOUND",
              "REMOVED_INACTIVE_LOCATIONS",
              "REMOVED_ON_HOLD_LOCATIONS",
              "REMOVED_OVERFULFILLED_LOCATIONS",
              "GROUP",
              "GROUP_FILTER",
              "GROUP_SORT",
              "FILTER",
              "SORT",
              "AFTER_ACTION",
              "FOUND_FULL_ORDER_LOCATION",
              "RESPONSE",
              "AFTER_ACTION_SORT",
              "DEFAULT_RESPONSE",
              "MAX_SPLITS_EXCEEDED",
              "AUTO_ASSIGN_LIMIT_EXCEEDED",
              "INVENTORY_REQUEST",
              "REMOVED_INTERNATIONAL_LOCATIONS",
              "SUGGESTION_UPDATED",
              "NON_EXPRESS_LOCATIONS_FILTERED",
              "STH_CONSOLIDATED_INITIATED",
              "STH_CONSOLIDATED_NOT_USED",
              "STH_CONSOLIDATED_USED"
            ]
          }
        }
      },
      "SuggestionLog": {
        "title": "SuggestionLog",
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "creatorUsername": {
            "type": "string"
          },
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuggestionEvent"
            }
          },
          "externalResponseID": {
            "type": "string"
          },
          "orderID": {
            "type": "integer",
            "format": "int32"
          },
          "pathString": {
            "type": "string"
          },
          "persisted": {
            "type": "boolean"
          },
          "siteID": {
            "type": "integer",
            "format": "int32"
          },
          "suggestionID": {
            "type": "integer",
            "format": "int32"
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updaterUsername": {
            "type": "string"
          }
        }
      },
      "SuggestionResponse": {
        "title": "SuggestionResponse",
        "type": "object",
        "properties": {
          "assignmentSuggestions": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AssignmentSuggestion"
              }
            }
          },
          "availableLocations": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "externalResponseID": {
            "type": "string"
          },
          "responseID": {
            "type": "integer",
            "format": "int32"
          },
          "route": {
            "type": "string",
            "enum": [
              "DIRECTSHIP",
              "TRANSFER",
              "STH_CONSOLIDATED"
            ]
          },
          "stateChangeSuggestions": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/StateChangeSuggestion"
            }
          },
          "suggestionLog": {
            "$ref": "#/components/schemas/SuggestionLog"
          }
        }
      },
      "FutureInventory": {
        "title": "FutureInventory",
        "type": "object",
        "properties": {
          "createDate": {
            "type": "string",
            "description": "Date the inventory was created.",
            "format": "date-time"
          },
          "deliveryDate": {
            "type": "string",
            "description": "Date at which this inventory will become available. Expected format '2020-09-28T12:00:00-0500'",
            "format": "date-time"
          },
          "futureInventoryID": {
            "type": "integer",
            "description": "Future Inventory unique identifier.",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "description": "New onhand quantity.",
            "format": "int32"
          },
          "type": {
            "type": "integer",
            "description": "Type of future inventory update: 0 is refresh, 1 is update.",
            "format": "int32"
          }
        },
        "description": "Future Inventory Model"
      },
      "ApiDocumentationTagQuantity": {
        "title": "TagQuantity",
        "type": "object",
        "properties": {
          "allocated": {
            "type": "integer",
            "description": "The quantity the location has that are already allocated for this tag",
            "format": "int32"
          },
          "available": {
            "type": "integer",
            "description": "The quantity the location has that are available for purchase for this tag",
            "format": "int32"
          },
          "futureInventory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FutureInventory"
            }
          },
          "onHand": {
            "type": "integer",
            "description": "The quantity the the location has in its possession for this tag",
            "format": "int32"
          },
          "pending": {
            "type": "integer",
            "description": "The quantity the location has that are pending for this tag",
            "format": "int32"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Associative Map of <String, String> for tagCategoryName => tagName"
          }
        },
        "description": "Response object for a tag quantity"
      },
      "ApiDocumentationInventoryResponse": {
        "title": "InventoryResponse",
        "type": "object",
        "properties": {
          "allocated": {
            "type": "integer",
            "description": "The quantity the location has that are already allocated.",
            "format": "int32"
          },
          "attributes": {
            "type": "array",
            "description": "List of Inventory Attributes",
            "items": {
              "type": "string"
            }
          },
          "available": {
            "type": "integer",
            "description": "The quantity the location has that are available for purchase",
            "format": "int32"
          },
          "blockAssignment": {
            "type": "boolean",
            "description": "Whether or not the product is blocked for assignment"
          },
          "countryCode": {
            "type": "string",
            "description": "The country code of this location"
          },
          "currencyID": {
            "type": "integer",
            "description": "The currency identifier for the retailPrice",
            "format": "int32"
          },
          "directShip": {
            "type": "boolean",
            "description": "Whether this location can ship to a consumer"
          },
          "distance": {
            "type": "number",
            "description": "The distance in miles from this location to the item's destination"
          },
          "floor": {
            "type": "integer",
            "description": "Absolute minimum quantity of this item that should be in stock at any time",
            "format": "int32"
          },
          "futureInventory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FutureInventory"
            }
          },
          "inventoryLocatorName": {
            "type": "string",
            "description": "The inventory locator name of the individual item"
          },
          "locationCode": {
            "type": "string",
            "description": "Location Code"
          },
          "locationName": {
            "type": "string",
            "description": "Location Name"
          },
          "ltd": {
            "type": "number",
            "description": "Custom field used for store prioritization"
          },
          "messages": {
            "type": "array",
            "description": "List of messages",
            "items": {
              "type": "string"
            }
          },
          "numResults": {
            "type": "integer",
            "description": "Number of results",
            "format": "int32"
          },
          "onHand": {
            "type": "integer",
            "description": "The quantity the location has in its possession",
            "format": "int32"
          },
          "partNumber": {
            "type": "string",
            "description": "Part/Product Number"
          },
          "pending": {
            "type": "integer",
            "description": "The quantity the location has that are pending.",
            "format": "int32"
          },
          "pickup": {
            "type": "boolean",
            "description": "Whether a consumer can pick up product at this location (store)"
          },
          "retailPrice": {
            "type": "number",
            "description": "The price of the product at this location"
          },
          "safetyStock": {
            "type": "integer",
            "description": "Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted",
            "format": "int32"
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit"
          },
          "success": {
            "type": "boolean",
            "description": "Flag for success"
          },
          "taggedInventory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiDocumentationTagQuantity"
            }
          },
          "tenantID": {
            "type": "integer",
            "description": "Tenant Identifier",
            "format": "int32"
          },
          "transferEnabled": {
            "type": "boolean",
            "description": "Whether the location can ship to another location (store), thus restocking that location."
          },
          "upc": {
            "type": "string",
            "description": "Universal Product Code"
          }
        },
        "description": "Base Response Model"
      },
      "SuggestionTestRequest": {
        "title": "SuggestionTestRequest",
        "type": "object",
        "properties": {
          "suggestionRequest": {
            "$ref": "#/components/schemas/SuggestionRequest"
          },
          "testInventoryResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiDocumentationInventoryResponse"
            }
          }
        }
      },
      "LocationGroupModel": {
        "title": "LocationGroupModel",
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "afterActionNone": {
            "$ref": "#/components/schemas/GroupAfterAction"
          },
          "afterActionPartial": {
            "$ref": "#/components/schemas/GroupAfterAction"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "creatorUsername": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "environmentID": {
            "type": "integer",
            "format": "int32"
          },
          "excludedLocationsFromDefaultGroup": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbstractFilter"
            }
          },
          "fulfillmentLimit": {
            "$ref": "#/components/schemas/FulfillmentLimit"
          },
          "groupID": {
            "type": "integer",
            "format": "int32"
          },
          "isDefaultGroup": {
            "type": "boolean"
          },
          "locationIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "name": {
            "type": "string"
          },
          "pathString": {
            "type": "string"
          },
          "persisted": {
            "type": "boolean"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "rankedLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RankedLocation"
            }
          },
          "routeID": {
            "type": "integer",
            "format": "int32"
          },
          "siteID": {
            "type": "integer",
            "format": "int32"
          },
          "sorts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationSort"
            }
          },
          "tenantID": {
            "type": "integer",
            "format": "int32"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "updaterUsername": {
            "type": "string"
          },
          "useRetailerExclusionList": {
            "type": "boolean"
          },
          "userContext": {
            "$ref": "#/components/schemas/UserContextInformation"
          }
        }
      },
      "CatalogAdminsAttributeMetadataItem": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The value",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Attribute Metadata Item.  It can be utilized for storing abitrary key/value pairs of data related to an attribute."
      },
      "CatalogAdminsAttributeLocalizedContent": {
        "type": "object",
        "properties": {
          "localeCode": {
            "type": "string",
            "description": "Language used for the attribute name and description. Currently, only en_US is supported.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the attribute in the language specified by LocaleCode.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the attribute in the language specified by LocaleCode.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Container for language-specific content to display on the storefront. You'll have a container for each supported language (LocaleCode). This enables you to display an attribute in multiple languages yet manage it as a single attribute internally."
      },
      "CatalogAdminsAttributeValidation": {
        "type": "object",
        "properties": {
          "regularExpression": {
            "type": "string",
            "description": "Regular expression to run against the attribute value. This should follow JavaScript/EMCA's Regular Expression syntax.",
            "nullable": true
          },
          "minStringLength": {
            "type": "integer",
            "description": "For validating strings, minimum length allowed for a string.",
            "format": "int32",
            "nullable": true
          },
          "maxStringLength": {
            "type": "integer",
            "description": "For validating strings, maximum length allowed for a string.",
            "format": "int32",
            "nullable": true
          },
          "minNumericValue": {
            "type": "number",
            "description": "For validating Number attribute value, minimum number allowed.",
            "format": "double",
            "nullable": true
          },
          "maxNumericValue": {
            "type": "number",
            "description": "For validating Number attribute value, maximum number allowed.",
            "format": "double",
            "nullable": true
          },
          "minDateValue": {
            "type": "string",
            "description": "For validating a DateTime attribute value, minimum datetime allowed.",
            "format": "date-time",
            "nullable": true
          },
          "maxDateValue": {
            "type": "string",
            "description": "For validating a DateTime attribute value, maximum datetime allowed.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to validate attributes."
      },
      "AttributeVocabularyValueLocalizedContent": {
        "type": "object",
        "properties": {
          "localeCode": {
            "type": "string",
            "description": "Language used for the string attribute value. Currently, only en_US is supported.",
            "nullable": true
          },
          "stringValue": {
            "type": "string",
            "description": "Localized Value in the language of the locale code",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Attribute Value Localized Resource"
      },
      "CatalogAdminsAttributeVocabularyValue": {
        "type": "object",
        "properties": {
          "valueSequence": {
            "type": "integer",
            "description": "Read only System generated monotonically increasing unique sequence.",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "description": "The actual value of the attribute vocabulary. This value must be unique within the vocabulary for a single attribute and match the datatype of the attribute. \r\nString data type requires a canonical value here or one will be system generated if null. The actual string content displayed to users should be stored as Content. \r\nString values require content to be present.\r\nOnce this value is set it cannot be changed.",
            "nullable": true
          },
          "mappedGenericValues": {
            "type": "array",
            "items": {},
            "description": "The actual values of the related generic attribute. This value must match the datatype of the attribute and already exist \r\nwithin the Vocabulary values of the related ValueMappingAttribute. Only supporting string at this time.",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "description": "The ProductName when the Attribute DataType is ProductCode.",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
          },
          "localizedContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
            },
            "description": "The Content of an attribute value. This content is in multiple locals supported by the master catalog and is only valid for String DataType.",
            "nullable": true
          },
          "displayOrder": {
            "type": "integer",
            "description": "The order in which the attribute value displays. If you omit a value for this property, Mozu infers the display order from the attribute value's position the list.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Value of an attribute"
      },
      "AttributeSearchSettings": {
        "type": "object",
        "properties": {
          "searchableInStorefront": {
            "type": "boolean",
            "description": "Indicates whether the attribute value should be searchable on the public storefront."
          },
          "searchableInAdmin": {
            "type": "boolean",
            "description": "Indicates whether the attribute value should be searchable in the merchant catalog admin."
          },
          "searchDisplayValue": {
            "type": "boolean",
            "description": "If true, the system will index the display value of string attributes instead of the canonical value for searching. \r\nThe canonical value will always be used for filtering. Does not apply for for non-string attributes."
          },
          "allowFilteringAndSortingInStorefront": {
            "type": "boolean",
            "description": "Indicates whether the attribute should be able to be used in filters, facets, and sorting on the public storefront.",
            "nullable": true
          },
          "indexValueWithCase": {
            "type": "boolean",
            "description": "Indicates whether the attribute value is case sensative for filtering and faceting. This applies to Text Admin entered attributes. \r\nA null value means it is not case sensative",
            "nullable": true
          },
          "customWeightInStorefrontSearch": {
            "type": "boolean",
            "description": "Indicates whether the attribute is indevidually stored as a tokenized field in search for custom term search weight",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Attribute Search Settings. A container for all of the search and indexing settings of an Attribute"
      },
      "CatalogAdminsAttribute": {
        "type": "object",
        "properties": {
          "adminName": {
            "type": "string",
            "description": "Name of the product displayed in the admin, This field does not need to be unqiue, but is required. It can include spaces...and is limited to a length of 50.",
            "nullable": true
          },
          "namespace": {
            "type": "string",
            "description": "NameSpace, each application creating attributes will have a uniqe namespace to avoid name (Code) collisions. The namespace provided must be a valid registered\r\nnamespace. If no namespace is specified it is assumed to be the namespace of the Tenant.",
            "nullable": true
          },
          "attributeCode": {
            "type": "string",
            "description": "Unique identifier of the Attribute. Must be unique within a namespace and cannot be changed once the attribute is created. This value will be generated and match the attribute\r\nsequence if not provided on create.",
            "nullable": true
          },
          "attributeFQN": {
            "type": "string",
            "description": "Attribute fully qualified name, Read only value that combines namespace and attribute code as NameSpace~AttributeCode",
            "nullable": true
          },
          "isValueMappingAttribute": {
            "type": "boolean",
            "description": "Specifies if this attribute can can be used to generalize values of another attribute",
            "nullable": true
          },
          "valueMappingAttributeFQN": {
            "type": "string",
            "description": "Attribute fully qualified name of a corresponding value mapping atribuite",
            "nullable": true
          },
          "attributeSequence": {
            "type": "integer",
            "description": "Read only System generated monotonically increasing unique sequence for each attribute created.",
            "format": "int32",
            "nullable": true
          },
          "attributeDataTypeSequence": {
            "type": "integer",
            "description": "Read only System generated monotonically increasing unique sequence for each attribute,DataType created (this is used to optimize indexed field names in search).",
            "format": "int32",
            "nullable": true
          },
          "masterCatalogId": {
            "type": "integer",
            "description": "Indentifier of the master that this attribute is a member of. System-supplied and read-only. Attributes will be created in the MasterCatalog of the supplied context.",
            "format": "int32",
            "nullable": true
          },
          "inputType": {
            "maxLength": 20,
            "type": "string",
            "description": "The InputType type of the attribute. Must be a valid value for InputType defined in InputTypeConst and the combination of types set must match an entry in the AttributeTypeRules resource. \r\nThis value cannot be changed after create",
            "nullable": true
          },
          "valueType": {
            "maxLength": 20,
            "type": "string",
            "description": "The ValueType of the attribute.  Must be a valid value for ValueType defined in ValueTypeTypeConst and the combination of types set must match an entry in the AttributeTypeRules resource. \r\nThis value cannot be changed after create",
            "nullable": true
          },
          "dataType": {
            "maxLength": 20,
            "type": "string",
            "description": "The DataType of the attribute.  Must be a valid value for DataType defined in DataTypeTypeConst and the combination of types set must match an entry in the AttributeTypeRules resource. \r\nThis value cannot be changed after create",
            "nullable": true
          },
          "isOption": {
            "type": "boolean",
            "description": "Specifies if this attribute can have a usage type of Option in a ProductType. This value can only be true when when it matches an AttributeTypeRule in the AttributeTypeRules resource.",
            "nullable": true
          },
          "isExtra": {
            "type": "boolean",
            "description": "Specifies if this attribute can have a usage type of Extra in a ProductType. This value can only be true when when it matches an AttributeTypeRule in the AttributeTypeRules resource.",
            "nullable": true
          },
          "isProperty": {
            "type": "boolean",
            "description": "Specifies if this attribute can have a usage type of Property in a ProductType. This value can only be true when when it matches an AttributeTypeRule in the AttributeTypeRules resource.",
            "nullable": true
          },
          "attributeMetadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsAttributeMetadataItem"
            },
            "description": "Attribute Metadata. This list can contain opaque data (key value pairs) that can be used as a property bag for UI concerns.",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
          },
          "localizedContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsAttributeLocalizedContent"
            },
            "description": "The Content of an attribute. This content is always in the default language of the MasterCatalog.",
            "nullable": true
          },
          "validation": {
            "$ref": "#/components/schemas/CatalogAdminsAttributeValidation"
          },
          "vocabularyValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
            },
            "description": "The list of Values for this attribute. Only available for ValueType:PredefinedVocabulary",
            "nullable": true
          },
          "searchSettings": {
            "$ref": "#/components/schemas/AttributeSearchSettings"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Attribute"
      },
      "CatalogAdminsAttributeCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsAttribute"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of attributes."
      },
      "AttributeTypeRule": {
        "type": "object",
        "properties": {
          "attributeInputType": {
            "type": "string",
            "description": "AttributeInputType identifier",
            "nullable": true
          },
          "attributeDataType": {
            "type": "string",
            "description": "AttributeDataType identifier",
            "nullable": true
          },
          "attributeValueType": {
            "type": "string",
            "description": "AttributeValueType identifier",
            "nullable": true
          },
          "attributeUsageType": {
            "type": "string",
            "description": "AttributeUsageType identifier",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Attribute Value Localized Resource"
      },
      "AttributeTypeRuleCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeTypeRule"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of AttributeType rules"
      },
      "CategoryLocalizedImage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the image. System-supplied and read-only.",
            "format": "int32",
            "nullable": true
          },
          "localeCode": {
            "type": "string",
            "description": "Language used for the image content.",
            "nullable": true
          },
          "imageLabel": {
            "type": "string",
            "description": "Image title that appears on the storefront.",
            "nullable": true
          },
          "altText": {
            "type": "string",
            "description": "Descriptive text associated with the image or video that appears on the storefront.",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "URL of the image.",
            "nullable": true
          },
          "cmsId": {
            "type": "string",
            "description": "Id of the image in the CMS.",
            "nullable": true
          },
          "videoUrl": {
            "type": "string",
            "description": "URL of a video associated with the category.",
            "nullable": true
          },
          "mediaType": {
            "type": "string",
            "description": "Type of media. Used by the client to determine how to render the image or video or what have you.",
            "nullable": true
          },
          "sequence": {
            "type": "integer",
            "description": "For categories with multiple images, the order in which this image appears on the storefront.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains the image label and alternate text for a category image or video in the language specified by LocalCode."
      },
      "CategoryLocalizedContent": {
        "type": "object",
        "properties": {
          "categoryImages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryLocalizedImage"
            },
            "description": "List of images associated with the category.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the category.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the category to display on the storefront.",
            "nullable": true
          },
          "pageTitle": {
            "type": "string",
            "description": "Title that appears at the top of new pages.",
            "nullable": true
          },
          "localeCode": {
            "type": "string",
            "description": "Lanugage used for category content. Currently, only en_US is supported.",
            "nullable": true
          },
          "metaTagTitle": {
            "type": "string",
            "description": "Metadata title. Metadata can be used to manage information internally. Sometimes used for SEO.",
            "nullable": true
          },
          "metaTagDescription": {
            "type": "string",
            "description": "Metadata description. Metadata can be used to manage information internally. Sometimes used for SEO.",
            "nullable": true
          },
          "metaTagKeywords": {
            "type": "string",
            "description": "Metadata keywords. Metadata can be used to manage information internally. Sometimes used for SEO.",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "description": "Human-readable identifier that you can give to the category to create friendly URLs. For example, \r\ninstead of \"http: //example.com/products?category=2&id=25,\" the friendly URL can be \"http: //example.com/products/category/2/25.\"",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Container for language-specific content to display on the storefront. You'll have a container for each supported language (LocaleCode). This enables you to display a category in multiple languages yet manage it as a single category internally."
      },
      "Expression": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Container or Predicate",
            "nullable": true
          },
          "logicalOperator": {
            "type": "string",
            "description": "And or Or (if Container with More than one Node)",
            "nullable": true
          },
          "nodes": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "nullable": true
          },
          "left": {
            "type": "string",
            "description": "The field target of a predicate",
            "nullable": true
          },
          "operator": {
            "type": "string",
            "description": "The operator of a predicate",
            "nullable": true
          },
          "right": {
            "description": "The literal values of a predicate",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DynamicExpression": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "nullable": true
          },
          "tree": {
            "$ref": "#/components/schemas/Expression"
          }
        },
        "additionalProperties": false,
        "description": "Category"
      },
      "CatalogAdminsCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Internal unique identifier of the category. System-supplied and read-only.",
            "format": "int32",
            "nullable": true
          },
          "categoryType": {
            "type": "string",
            "description": "The Type of Category Static, Dyanmic, DynamicPreComputed",
            "nullable": true
          },
          "catalogId": {
            "type": "integer",
            "description": "The CatalogId that the category belongs to.",
            "format": "int32",
            "nullable": true
          },
          "parentCategoryId": {
            "type": "integer",
            "description": "Unique identifier of the category to which this category belongs. If nil, this is a top-level category. System-supplied and read-only.",
            "format": "int32",
            "nullable": true
          },
          "parentCategoryCode": {
            "type": "string",
            "nullable": true
          },
          "parentCategoryName": {
            "type": "string",
            "nullable": true
          },
          "parentIsActive": {
            "type": "boolean",
            "nullable": true
          },
          "categoryCode": {
            "type": "string",
            "description": "External unique identifier of the category.",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "If false, the category is considered unavailable in runtime (default is true if not specified on create)",
            "nullable": true
          },
          "isDisplayed": {
            "type": "boolean",
            "description": "If true, the category appears to shoppers on the storefront.",
            "nullable": true
          },
          "sequence": {
            "type": "integer",
            "description": "Order in which categories appear when they are at the same level (siblings). For example, you could change the sequence of categories so that a specific category always appears first.",
            "format": "int32",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/CategoryLocalizedContent"
          },
          "dynamicExpression": {
            "$ref": "#/components/schemas/DynamicExpression"
          },
          "productCount": {
            "type": "integer",
            "description": "Number of products contained in this category. This count includes all products contained in any subcategories of this category.",
            "format": "int32",
            "nullable": true
          },
          "childCount": {
            "type": "integer",
            "description": "Number of subcategories that belong to this category. These subcategories are at the same level (siblings).",
            "format": "int32",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "shouldSlice": {
            "type": "boolean",
            "description": "If True, search displays sliced view",
            "nullable": true
          },
          "activeDateStart": {
            "type": "string",
            "description": "Active Start Date",
            "format": "date-time",
            "nullable": true
          },
          "activeDateEnd": {
            "type": "string",
            "description": "Active end Date",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Category"
      },
      "CatalogAdminsCategoryPagedCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsCategory"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of categories where categories are returned in a series of pages."
      },
      "CatalogAdminsCategoryCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsCategory"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of categories returned as a whole. A collection is not paged."
      },
      "CouponSet": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Internal unique identifier of the couponset. System-supplied and read-only.",
            "format": "int32",
            "nullable": true
          },
          "couponSetCode": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique tenant supplied identifier.\r\nUsed as the prefix for generated sets.\r\nRequired\r\nSystem generated if left null.",
            "nullable": true
          },
          "name": {
            "maxLength": 200,
            "type": "string",
            "description": "CouponSet Name"
          },
          "couponCodeType": {
            "type": "string",
            "description": "Determines if the coupon is a persisted list of codes (static) or a list based on generated specification\r\n(dynamic).",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "CouponSet status which can be: Active, Expired,  Inactive\r\nSystem-supplied and read-only.",
            "nullable": true
          },
          "canBeDeleted": {
            "type": "boolean",
            "description": "Signifies that the coupon has not been exported and can be updated\r\nReadOnly"
          },
          "maxRedemptionsPerUser": {
            "type": "integer",
            "description": "Maximum number of times any single user can redeem any code.\r\nMust be null, >=1 or -1.\r\nDefaults to 1 on creation if null.\r\n-1 indicates unlimited.",
            "format": "int32",
            "nullable": true
          },
          "maxRedemptionsPerCouponCode": {
            "type": "integer",
            "description": "Maximum number of times any code can de used.\r\nMust be null, >=1 or -1.\r\nDefaults to 1 on creation if null.\r\n-1 indicates unlimited.",
            "format": "int32",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "Date and time that the coupon codes becomes expired",
            "format": "date-time",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Date and time that the coupon codes becomes active",
            "format": "date-time",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "setSize": {
            "type": "integer",
            "description": "Sets the number of codes to generate for dynamic coupons\r\nRequired when CouponCodeType is \"Dynamic\"",
            "format": "int32",
            "nullable": true
          },
          "couponCodeCount": {
            "type": "integer",
            "description": "Count of associated couponCodes.\r\nMust use \"counts\" response group to get this value\r\nReadOnly",
            "format": "int32",
            "nullable": true
          },
          "redemptionCount": {
            "type": "integer",
            "description": "ReadOnly count of all redemptions for this coupon set.",
            "format": "int32",
            "nullable": true
          },
          "assignedDiscountCount": {
            "type": "integer",
            "description": "ReadOnly sum of all redemptions for this coupon.\r\nUse \"counts\" response group.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a claimable item that allows a user to use one or more discounts."
      },
      "CouponSetCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CouponSet"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Paged collection of Mozu.ProductAdmin.Contracts.CouponSet"
      },
      "Coupon": {
        "required": [
          "couponCode"
        ],
        "type": "object",
        "properties": {
          "couponSetId": {
            "type": "integer",
            "description": "ReadOnly system id for releated couponset.",
            "format": "int32"
          },
          "couponSetCode": {
            "type": "string",
            "description": "Link to associated coupon",
            "nullable": true
          },
          "couponCode": {
            "type": "string",
            "description": "The code the customer uses to claim this coupon"
          },
          "canBeDeleted": {
            "type": "boolean"
          },
          "redemptionCount": {
            "type": "integer",
            "description": "Total number of times this code has been redeemed. ReadOnly, calculated.\r\nOnly returned with response group includeCounts",
            "format": "int32",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Coupon in a coupon set."
      },
      "CouponCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coupon"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssignedDiscount": {
        "required": [
          "discountId"
        ],
        "type": "object",
        "properties": {
          "couponSetCode": {
            "type": "string",
            "description": "ReadOnly, CouponSetCode copied from URI",
            "nullable": true
          },
          "couponSetId": {
            "type": "integer",
            "description": "ReadOnly, CouponSetId",
            "format": "int32"
          },
          "discountId": {
            "type": "integer",
            "description": "Discount Id for the associated discount",
            "format": "int32"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "CurrencyLocalization": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "Currency Code",
            "nullable": true
          },
          "decimalPlaces": {
            "type": "integer",
            "description": "Number of decimal places to round to",
            "format": "int32",
            "nullable": true
          },
          "roundingStrategy": {
            "type": "integer",
            "description": "The rounding strategy to use",
            "format": "int32",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "A currency and some localization options"
      },
      "CurrencyLocalizationCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyLocalization"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Non-pages collection of currency-localizations."
      },
      "CatalogAdminsCurrencyExchangeRate": {
        "required": [
          "rate"
        ],
        "type": "object",
        "properties": {
          "fromCurrencyCode": {
            "type": "string",
            "description": "The source currency code",
            "nullable": true
          },
          "toCurrencyCode": {
            "type": "string",
            "description": "The target currency code",
            "nullable": true
          },
          "rate": {
            "type": "number",
            "description": "The exchange rate",
            "format": "double"
          },
          "multiplier": {
            "type": "number",
            "description": "An additional multiplier to use in calculations",
            "format": "double",
            "nullable": true
          },
          "referenceData": {
            "type": "string",
            "description": "Reference data for miscellaneous metadata from updates",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "The exchange rate between two currencies"
      },
      "CurrencyExchangeRateCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsCurrencyExchangeRate"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Non-pages collection of currency-exchange-rates."
      },
      "DiscountLocalizedContent": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "localeCode": {
            "maxLength": 8,
            "minLength": 0,
            "type": "string",
            "description": "Lanugage used for the discount in the current catalog. Defaults setting for the active catalog.",
            "nullable": true
          },
          "name": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Name of the discount."
          },
          "friendlyDescription": {
            "type": "string",
            "description": "Promotional text or HTML that can be utilized as friendly content like \"Buy this product now and get X!\"",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Container for the language-specific name of the discount. You will have a container for each supported language\r\n(LocaleCode).\r\nThis enables you to display the discount name in multiple languages yet manage it as a single discount internally."
      },
      "CategoryDiscountCondition": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "integer",
            "description": "Unique identifier of the category to which the discount condition applies.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a product category and quantity constraint"
      },
      "ProductDiscountCondition": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Product code of the product to discount.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a product and quantity constraint"
      },
      "CatalogAdminsCustomerSegment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The Customer segment Id.\r\nThis is the  system Id not the code.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a customer segment"
      },
      "CatalogAdminsDiscountCondition": {
        "type": "object",
        "properties": {
          "maxRedemptionCount": {
            "type": "integer",
            "description": "Maximum number of times that the discount can be redeemed. Default is null (no limit to discount redemptions).",
            "format": "int32",
            "nullable": true
          },
          "requiresCoupon": {
            "type": "boolean",
            "description": "If true, the shopper needs to enter a coupon code to redeem the discount."
          },
          "couponCode": {
            "type": "string",
            "description": "Code of the coupon associated with the discount (if a coupon code is required). The merchant can supply the code or the system can generate it.",
            "nullable": true
          },
          "requiresAuthenticatedUser": {
            "type": "boolean",
            "description": "Determines is this discount can be used by an anonymous user \r\nDefaults to false to allow discounts for anonymous users."
          },
          "includedPaymentWorkflows": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of payment types that trigger this discount to be valid.",
            "nullable": true
          },
          "includedCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDiscountCondition"
            },
            "description": "List of categories that must be purchased in order for the discount to be valid.",
            "nullable": true
          },
          "excludedCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDiscountCondition"
            },
            "description": "List of categories to discount. When a discount applies to a category, all products in the category are discounted.",
            "nullable": true
          },
          "includedProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductDiscountCondition"
            },
            "description": "List of products that are eligible for the discount.",
            "nullable": true
          },
          "excludedProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductDiscountCondition"
            },
            "description": "List of products that are eligible for the discount.",
            "nullable": true
          },
          "customerSegments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsCustomerSegment"
            },
            "description": "List of customer groups for which the discount applies",
            "nullable": true
          },
          "minimumQuantityRequiredProducts": {
            "type": "integer",
            "description": "Minimum quantity of products in the specified IncludedProducts that must be purchased to\r\nqualify for the associated discount.\r\nDefaults to 1 if  null and IncludedProducts has values.",
            "format": "int32",
            "nullable": true
          },
          "minimumQuantityProductsRequiredInCategories": {
            "type": "integer",
            "description": "Minimum quantity of products in the categories specified in IncludedCategories that must be purchased to\r\nqualify for the associated discount.\r\nDefaults to 1 if  null and IncludedCategories has values",
            "format": "int32",
            "nullable": true
          },
          "minimumOrderAmount": {
            "type": "number",
            "description": "Only applies to order.\r\nMinimum order subtotal after discounts in order for the associated discount to be applied",
            "format": "double",
            "nullable": true
          },
          "maximumOrderAmount": {
            "type": "number",
            "description": "Only applies to order.\r\nMaximum order subtotal after discounts in order for the associated discount to be applied",
            "format": "double",
            "nullable": true
          },
          "categoriesToExcludeFromMinOrderTotal": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDiscountCondition"
            },
            "description": "List of categories to discount. When a discount applies to a category, all products in the category are discounted.",
            "nullable": true
          },
          "productsToExcludeFromMinOrderTotal": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductDiscountCondition"
            },
            "description": "List of products that are eligible for the discount.",
            "nullable": true
          },
          "minimumLifetimeValueAmount": {
            "type": "number",
            "description": "Minimum lifetime value amount required for this discount to apply",
            "format": "double",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Date when the discount can goes into effect, in the format yyyy-mm-dd.",
            "format": "date-time",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Date when the discount expires. Default is null (no expiration date).",
            "format": "date-time",
            "nullable": true
          },
          "minimumCategorySubtotalBeforeDiscounts": {
            "type": "number",
            "description": "Minimum amount that must be purchased in the combined categories defined in \r\nIncludedCategories.  Amount is calculated before discounting.\r\nNot used if IncludedCategories is empty.",
            "format": "double",
            "nullable": true
          },
          "minimumRequiredQuantityPerRedemption": {
            "type": "integer",
            "description": "Defines a minimum quantity that is required for a target only discount",
            "format": "int32",
            "nullable": true
          },
          "validSubscriptionFrequencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of subscription frequencies to which the discount will apply.",
            "nullable": true
          },
          "validSubscriptionContinuityOrdinals": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Ordinals at which a continuity order should receive the discount.",
            "nullable": true
          },
          "minDistinctProductsRequired": {
            "type": "integer",
            "description": "The minimum number of distinct products on the order\r\nNot a quantity calculation.",
            "format": "int32",
            "nullable": true
          },
          "minTotalOrderQuantity": {
            "type": "integer",
            "description": "The order must contain at least this total quantity of items for the discount to apply.\r\nYou must buy a combined quantity of at least x amount.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specifies constraints that must be satified for a discount to be applied to a target.\r\nConstraints are Anded together"
      },
      "TargetedCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the category to which the discount applies.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Category to discount. When a discount applies to a category, all products in the category are discounted."
      },
      "TargetedProduct": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Product code of the product to discount.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Product to discount."
      },
      "TargetedShippingMethod": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "Unique identifier of the shipping method as it appears in the SiteShippingMethod property of the Shipping Settings\r\nresource."
          },
          "name": {
            "type": "string",
            "description": "Name of the shipping method as it appears in SiteShippingMethodLocalizedContent of the Shipping Settings resource.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Shipping method that is eligible for free shipping. This is the shipping method that is defined with the Shipping\r\nSettings resource."
      },
      "TargetedShippingZone": {
        "required": [
          "zone"
        ],
        "type": "object",
        "properties": {
          "zone": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Indicates the shipping zone that this discount is valid for.  If zone is provided the\r\nmethod selected must be valid for the zone and both populated in the order for the discount\r\nto be valid."
          }
        },
        "additionalProperties": false,
        "description": "Shipping method that is eligible for free shipping. This is the shipping method that is defined with the Shipping\r\nSettings resource."
      },
      "CatalogAdminsDiscountTarget": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "    Type of target to which the discount applies. Possible values: <pre>Product</pre> or <pre>Shipping</pre>. \r\nIf this is a <pre>Product</pre> type, you can specify which products or categories that the discount applies to.\r\n    If this is a <pre>Shipping</pre> type then you must specify which shipping methods apply."
          },
          "includeAllProducts": {
            "type": "boolean",
            "description": "If yes, the discount applies to all products sold on the storefront.",
            "nullable": true
          },
          "includedCategoriesOperator": {
            "type": "string",
            "description": "Applies to Included categories\r\nWhen Any, the target product can belong to any specified category.\r\nWhen All, the target product must belong to all specified categories.\r\nDefaults to Any",
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetedCategory"
            },
            "description": "List of categories to discount. When a discount applies to a category, all products in the category are discounted.",
            "nullable": true
          },
          "excludedCategoriesOperator": {
            "type": "string",
            "description": "Applies to Included categories\r\nDefaults to Any",
            "nullable": true
          },
          "excludedCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetedCategory"
            },
            "description": "List of categories to exclude from the discount. Useful to exclude specific child categories.",
            "nullable": true
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetedProduct"
            },
            "description": "List of products that are eligible for the discount.",
            "nullable": true
          },
          "excludedProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetedProduct"
            },
            "description": "List of products that are excluded from the discount.",
            "nullable": true
          },
          "excludeItemsWithExistingShippingDiscounts": {
            "type": "boolean",
            "description": "Prevents order scoped discounts from layering over items that already have a shipping discount with the \r\nsame type.",
            "nullable": true
          },
          "excludeItemsWithExistingProductDiscounts": {
            "type": "boolean",
            "description": "Prevents order scoped discounts from layering over items that already have a product discount with the \r\nsame type.",
            "nullable": true
          },
          "shippingMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetedShippingMethod"
            },
            "description": "Shipping method that is eligible for shipping discounts. This is a shipping method defined in Shipping Settings.",
            "nullable": true
          },
          "shippingZones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetedShippingZone"
            },
            "description": "Shipping Zones that are applicable for this discount",
            "nullable": true
          },
          "maximumQuantityPerRedemption": {
            "type": "integer",
            "description": "When a condition is specified, this property limits the number of items that can be targeted per discount redemption with an order.\r\nif multiple redemptions are allowed per order then multiples of this value would be allowed in multiples of the associated \r\ncondition.\r\nIf no condition is specified then this value is not used.  \r\nIf null and condition exists, then defaults to 1.",
            "format": "int32",
            "nullable": true
          },
          "appliesToLeastExpensiveProductsFirst": {
            "type": "boolean",
            "description": "Determines which way the discount is optimized.  Consumers favor(default - false/null) or tenants favor (when this is set to true)\r\nApplies to discounts where target is not a specific product or list of products.  \r\nMay also impact behavior of Buy X Get Y so that X is the most expensive items and Y the least expensive.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "What to discount. Specifies the type of discount (percentage off, monetary amount, or free shipping) and which products, categories, or shipping methods are eligible for the discount.\r\nCan also specify the minimum amount that the order must total for the discount to apply."
      },
      "ThresholdMessageLocalizedContent": {
        "required": [
          "messageTemplate"
        ],
        "type": "object",
        "properties": {
          "localeCode": {
            "maxLength": 8,
            "minLength": 0,
            "type": "string",
            "description": "Language used for the discount in the current catalog. Defaults setting for the active catalog.",
            "nullable": true
          },
          "messageTemplate": {
            "type": "string",
            "description": "Locale-based contents of the Threshold Message."
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "CatalogAdminsThresholdMessage": {
        "required": [
          "content",
          "discountId",
          "thresholdValue"
        ],
        "type": "object",
        "properties": {
          "discountId": {
            "type": "integer",
            "description": "Unique identifier of the discount. System-supplied and read-only.",
            "format": "int32"
          },
          "thresholdValue": {
            "type": "number",
            "description": "The cart total amount that must be met before the threshold message is displayed",
            "format": "double"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates if threshold messages are active for this discount"
          },
          "showInCart": {
            "type": "boolean",
            "description": "Indicates if the threshold message will display in the cart"
          },
          "showOnCheckout": {
            "type": "boolean",
            "description": "Indicates if the threshold message will display on the checkout page"
          },
          "requiresCouponCode": {
            "type": "boolean",
            "description": "Indicates if the threshold message will display when a promo code is evaluated"
          },
          "content": {
            "$ref": "#/components/schemas/ThresholdMessageLocalizedContent"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "CatalogAdminsDiscount": {
        "required": [
          "amountType",
          "content",
          "scope",
          "target"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the discount. System-supplied and read-only.",
            "format": "int32",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/DiscountLocalizedContent"
          },
          "scope": {
            "type": "string",
            "description": "Scope to which the discount applies, valid values are: Order, LineItem"
          },
          "conditions": {
            "$ref": "#/components/schemas/CatalogAdminsDiscountCondition"
          },
          "target": {
            "$ref": "#/components/schemas/CatalogAdminsDiscountTarget"
          },
          "currentRedemptionCount": {
            "type": "integer",
            "description": "How many times this discount has been redeemed. System-supplied and read-only.",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "    Amount of the discount, as a percentage or monetary amount, for example 15% or $15.\r\nMust be either null or greater than zero.",
            "format": "double",
            "nullable": true
          },
          "amountType": {
            "type": "string",
            "description": "Type of discount, which can be either a percentage off the price, \r\na specific monetary amount, or free. \r\nPossible values: \r\n\tPercentage \r\n\tAmount \r\n\tFree\r\n\tFixedPrice"
          },
          "status": {
            "type": "string",
            "description": "Discount status which can be \"Active,\" \"Scheduled,\" or \"Expired.\" System-supplied and read-only.",
            "nullable": true
          },
          "canBeDeleted": {
            "type": "boolean",
            "description": "Signifies that the discount is not referenced and can be hard deleted"
          },
          "doesNotApplyToSalePrice": {
            "type": "boolean",
            "description": "Determines if the discount should apply to sale price or regular price only.\r\nDiscounts will apply to sale prices by default.\r\nOnly applies to LineItem product discounts.",
            "nullable": true
          },
          "doesNotApplyToProductsWithSalePrice": {
            "type": "boolean",
            "description": "Determines whether or not a discount applies to a items with a sale price.  Applicable \r\non order and line item discounts.  For line items, when this is true, the discount will \r\nbe disqualified.  For order level discounts, when true, the discount will not be applied \r\nto those items have a sale price.",
            "nullable": true
          },
          "maximumUsesPerUser": {
            "type": "integer",
            "description": "Maximum number of times a user can redeem this discount.\r\n Must be either null or greater than zero.",
            "format": "int32",
            "nullable": true
          },
          "maximumDiscountImpactPerOrder": {
            "type": "number",
            "description": "Maximum impact this discount can apply on a single order.\r\n Must be either null or greater than zero.",
            "format": "double",
            "nullable": true
          },
          "maximumDiscountImpactPerRedemption": {
            "type": "number",
            "description": "Maximum impact this discount can apply on a single line item.\r\n Must be either null or greater than zero.",
            "format": "double",
            "nullable": true
          },
          "maximumRedemptionsPerOrder": {
            "type": "integer",
            "description": "Maximum number of redemptions allowed per order.\r\nIf null, defaults to unlimited.",
            "format": "int32",
            "nullable": true
          },
          "includedPriceLists": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Products receiving a price from a price list specified here or a child of a specified \r\nprice list can be discounted.",
            "nullable": true
          },
          "doesNotApplyToMultiShipToOrders": {
            "type": "boolean",
            "description": "Flag to allow or prevent application to multi-ship-to orders,\r\nOnly applicable to shipping discounts.",
            "nullable": true
          },
          "isBxGx": {
            "type": "boolean",
            "description": "Readonly property indicating that the condition required purchase is the \r\nsame as the target items.  Used in BxGx and BoGo type discounts.",
            "nullable": true
          },
          "canBeStackedUpon": {
            "type": "boolean",
            "description": "Indicates whether or not stacking is enabled for this discount",
            "nullable": true
          },
          "stackingLayer": {
            "type": "integer",
            "description": "Indicates which stacking layer this discount is a part of",
            "format": "int32",
            "nullable": true
          },
          "thresholdMessage": {
            "$ref": "#/components/schemas/CatalogAdminsThresholdMessage"
          },
          "preventLineItemShippingDiscounts": {
            "type": "boolean",
            "description": "Prevents Line Item Shipping discounts from being applied when a Line Item Product  \r\ndiscount has been applied",
            "nullable": true
          },
          "preventOrderProductDiscounts": {
            "type": "boolean",
            "description": "Prevents Order Product discounts from being applied when a Line Item Product  \r\nor Shipping discount has been applied",
            "nullable": true
          },
          "preventOrderShippingDiscounts": {
            "type": "boolean",
            "description": "Prevents Order Shipping discounts from being applied when a Line Item Product/Shipping  \r\nor Order Product discount has been applied",
            "nullable": true
          },
          "hasPurchaseConditions": {
            "type": "boolean",
            "description": "Indicates if this discount has purchase conditions that must be met before \r\nthe discount is applied"
          },
          "purchaseRequirementType": {
            "type": "string",
            "description": "The type of purchase requirement for this discount, either purchase conditions and targets which   \r\nSupports BoGo, and BxGx scenarios. Or Target only that only have a target and no purchase conditions",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "tagCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "System-supplied and read-only.",
            "nullable": true
          },
          "isSubscriptionDiscount": {
            "type": "boolean",
            "description": "Determines how discounts will be evaluated for subscription items and during continuity orders.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Allows you to define and manage discounts to apply to your products, product categories, or orders. The discounts can be a specified monetary amount off the price, percentage off the price, or for free shipping.\r\nYou can create a coupon code that applies to the discount."
      },
      "DiscountCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsDiscount"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of discounts returned as a whole. A collection is not paged."
      },
      "DiscountTag": {
        "type": "object",
        "properties": {
          "discountId": {
            "type": "integer",
            "format": "int32"
          },
          "tagCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DiscountTagCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountTag"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of discounts returned as a whole. A collection is not paged."
      },
      "CatalogAdminsTag": {
        "required": [
          "tagCode"
        ],
        "type": "object",
        "properties": {
          "tagCode": {
            "type": "string",
            "description": "A unique code per catalog. Limit 500 characters."
          },
          "tagName": {
            "type": "string",
            "description": "Readonly and computed from TagCode. If using hierarchical tag-codes, only the last node",
            "nullable": true,
            "readOnly": true
          },
          "tagPath": {
            "type": "string",
            "description": "Readonly and computed from TagCode. If using hierarchical tag-codes, the node path without the TagName",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "A generic tag that can be used for any purpose."
      },
      "TagCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsTag"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of Tags returned as a whole. A collection is not paged."
      },
      "StackingConfiguration": {
        "type": "object",
        "properties": {
          "stackingEnabled": {
            "type": "boolean",
            "description": "Indicates if discount stacking is enabled for discounts in this catalog"
          },
          "productOrderLayers": {
            "type": "integer",
            "description": "Number of Product Order discount layers",
            "format": "int32"
          },
          "productLineItemLayers": {
            "type": "integer",
            "description": "Number of Product Line Item discount layers",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DiscountSettings": {
        "type": "object",
        "properties": {
          "stackingConfiguration": {
            "$ref": "#/components/schemas/StackingConfiguration"
          },
          "usePostDiscountedOrderValue": {
            "type": "boolean",
            "description": "Use the pre or post line item discounts order total to evaluate the order minimum constraint",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Tenant level discount settings"
      },
      "FacetSource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Name of field, or FQN of attribute",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of source field used by the facet. Allowable values are: Element, Attribute. \r\nMust be a valid value for DataType defined in FacetFieldTypeConst.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Read-only system-generated label for the source field.",
            "nullable": true
          },
          "dataType": {
            "maxLength": 20,
            "type": "string",
            "description": "Read-only system-generated DataType of the Attribute or Element source field. Will be valid value for DataType defined in DataTypeConst.",
            "nullable": true
          },
          "allowsRangeQuery": {
            "type": "boolean",
            "description": "Read-only system-generated indicator of whether the source field supports RangeQuery type facets."
          }
        },
        "additionalProperties": false
      },
      "FacetValidity": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean"
          },
          "reasonCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FacetRangeQuery": {
        "type": "object",
        "properties": {
          "rangeValueStart": {
            "nullable": true
          },
          "rangeValueEnd": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CatalogAdminsFacet": {
        "type": "object",
        "properties": {
          "facetId": {
            "type": "integer",
            "description": "The unique identifier for the facet definition",
            "format": "int32",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/FacetSource"
          },
          "facetType": {
            "type": "string",
            "description": "The type of facet. Allowable values are: Value, RangeQuery \r\nMust be a valid value for DataType defined in FacetTypeConst.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "Used to order the display of the facets within a section",
            "format": "int32"
          },
          "categoryId": {
            "type": "integer",
            "description": "The category that the facet is being configured at",
            "format": "int32",
            "nullable": true
          },
          "categoryCode": {
            "type": "string",
            "description": "The category that the facet is being configured at",
            "nullable": true
          },
          "valueSortType": {
            "type": "string",
            "description": "Determines how the facet values will be sorted in the store. \r\nMust be a valid value for DataType defined in FacetValueSortTypeConst. \r\nAllowable values are: CountAscending, CountDescending, ValuesAscending, ValuesDescending, AttributeDefinition, AttributeDefinitionDescending.\r\nThe default if no value is specified will be CountDescending.",
            "nullable": true
          },
          "overrideFacetId": {
            "type": "integer",
            "description": "The ID of a parent category's facet being overriden",
            "format": "int32",
            "nullable": true
          },
          "isHidden": {
            "type": "boolean",
            "description": "Indicates whether the facet is hidden for the given category"
          },
          "validity": {
            "$ref": "#/components/schemas/FacetValidity"
          },
          "rangeQueries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetRangeQuery"
            },
            "description": "List of ranges if the Facet is of type Range",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "The definition of a Facet"
      },
      "FacetSet": {
        "type": "object",
        "properties": {
          "configured": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsFacet"
            },
            "description": "Facets that are configured",
            "nullable": true
          },
          "available": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetSource"
            },
            "description": "Facets that are not configured, but COULD BE!",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CatalogAdminsMasterCatalog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "MasterCatalogId (readonly)",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the MasterCatalog (readonly)",
            "nullable": true
          },
          "productPublishingMode": {
            "type": "string",
            "description": "The product publishing mode of this MasterCatalog",
            "nullable": true
          },
          "enableLiveEdit": {
            "type": "boolean",
            "description": "If the publishingMode is Pending and LiveEditsEnabled = true, DataViewMode live can be passed in the header and live products can be directly edited.",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates whether the MasterCatalog has been deleted and should no longer be used"
          }
        },
        "additionalProperties": false
      },
      "MasterCatalogCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsMasterCatalog"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of MasterCatalogs"
      },
      "CatalogAdminsPriceList": {
        "required": [
          "name",
          "priceListCode"
        ],
        "type": "object",
        "properties": {
          "priceListCode": {
            "type": "string",
            "description": "External unique identifier of the PriceList. Must be unique an only contain url sanitized characters. Max length is 50"
          },
          "priceListSequence": {
            "type": "integer",
            "format": "int32"
          },
          "parentPriceListCode": {
            "type": "string",
            "description": "Parent PriceList code, Can be null for root level priceLists",
            "nullable": true
          },
          "parentPriceListName": {
            "type": "string",
            "description": "Parent PriceList name, Can be null for root level priceLists. Read only in contract.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the priceList. Max length is 100"
          },
          "description": {
            "type": "string",
            "description": "Description of the price list. Max length is 300",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Is the price list enabled and valid in the storefront. Default is true.",
            "nullable": true
          },
          "filteredInStorefront": {
            "type": "boolean",
            "description": "When true, only products with valid price list entries will be visible in the storefront. Default is false",
            "nullable": true
          },
          "validForAllSites": {
            "type": "boolean",
            "description": "When true, no valid sites need to be specifiied. Price list is considered valid for all sites. Default is true",
            "nullable": true
          },
          "validSites": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "When ValidForAllSites = false, a list of siteIDs that the price list is valid for should be supplied",
            "nullable": true
          },
          "defaultForSites": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "indexedSites": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "mappedCustomerSegments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of customer segment code associated with this price list.\r\nUsed to resolve default price list",
            "nullable": true
          },
          "rank": {
            "type": "integer",
            "description": "Used to prioritize price list resolution when more than 1 price list maps",
            "format": "int32",
            "nullable": true
          },
          "resolvable": {
            "type": "boolean",
            "description": "Determines if this price list can be resolved as the current price list \r\nwithin a session.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Category"
      },
      "PriceListCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsPriceList"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of categories returned as a whole. A collection is not paged."
      },
      "CatalogAdminsProductOptionValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "attributeVocabularyValueDetail": {
            "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
          }
        },
        "additionalProperties": false,
        "description": "A value of a product option for this product. For example, a computer product may have an option called \"Memory\" that can have the values \"6GB,\"8GB,\" and \"12GB.\""
      },
      "CatalogAdminsProductOption": {
        "type": "object",
        "properties": {
          "attributeFQN": {
            "type": "string",
            "description": "Unique identifier of the Attribute.",
            "nullable": true
          },
          "isProductImageGroupSelector": {
            "type": "boolean",
            "description": "Defines whether or not this option can be used to segment product images",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsProductOptionValue"
            },
            "description": "List of all the values for this product option.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Product options for configurable or stand-alone products. A configurable option is one that the shopper chooses when ordering, for example, \r\nthe color of a T-shirt. A stand-alone option is independent of the product and can be added to the product order. For example, a monogram."
      },
      "PriceListEntryPrice": {
        "type": "object",
        "properties": {
          "minQty": {
            "type": "integer",
            "format": "int32"
          },
          "listPriceMode": {
            "type": "string",
            "nullable": true
          },
          "listPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "salePriceMode": {
            "type": "string",
            "nullable": true
          },
          "salePrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "subscriptionPriceMode": {
            "type": "string",
            "nullable": true
          },
          "subscriptionPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "subscriptionSalePriceMode": {
            "type": "string",
            "nullable": true
          },
          "subscriptionSalePrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PriceListEntryExtra": {
        "required": [
          "attributeFQN"
        ],
        "type": "object",
        "properties": {
          "attributeFQN": {
            "type": "string",
            "description": "AttributeFQN of the extra\r\nReadOnly"
          },
          "value": {
            "description": "The value stored with the extra\r\nReadOnly",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "PriceList price for the extra",
            "format": "double"
          },
          "attributeCode": {
            "type": "string",
            "description": "AttributeCode.\r\nReadOnly",
            "nullable": true
          },
          "displayValue": {
            "type": "string",
            "description": "Value to display.  Currently only vaild when Value is a string type.\r\nReadOnly",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Extra for an entry on a price list"
      },
      "PriceListEntry": {
        "required": [
          "currencyCode",
          "productCode"
        ],
        "type": "object",
        "properties": {
          "priceListCode": {
            "type": "string",
            "description": "External unique identifier of the PriceList. Must be unique an only contain url sanitized characters. Max length is\r\n50",
            "nullable": true
          },
          "priceListEntrySequence": {
            "type": "integer",
            "format": "int32"
          },
          "productCode": {
            "type": "string"
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "isVariation": {
            "type": "boolean"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsProductOption"
            },
            "nullable": true
          },
          "currencyCode": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "priceListEntryMode": {
            "type": "string",
            "nullable": true
          },
          "priceListEntryTypeCode": {
            "type": "string",
            "nullable": true
          },
          "discountsRestrictedMode": {
            "type": "string",
            "nullable": true
          },
          "discountsRestricted": {
            "type": "boolean",
            "nullable": true
          },
          "discountsRestrictedStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "discountsRestrictedEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "msrpMode": {
            "type": "string",
            "nullable": true
          },
          "msrp": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "mapMode": {
            "type": "string",
            "nullable": true
          },
          "map": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "mapStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "mapEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "costMode": {
            "type": "string",
            "nullable": true
          },
          "cost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "priceEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceListEntryPrice"
            },
            "nullable": true
          },
          "extraEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceListEntryExtra"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Category"
      },
      "PriceListEntryCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceListEntry"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of categories returned as a whole. A collection is not paged."
      },
      "ProductLocalizedImage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the image. System-supplied and read-only.",
            "format": "int32",
            "nullable": true
          },
          "localeCode": {
            "type": "string",
            "description": "Language used for the image content.",
            "nullable": true
          },
          "imageLabel": {
            "type": "string",
            "description": "Image title that appears on the storefront.",
            "nullable": true
          },
          "altText": {
            "type": "string",
            "description": "Descriptive text associated with the image or video that appears on the storefront.",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "URL of the image.",
            "nullable": true
          },
          "cmsId": {
            "type": "string",
            "description": "Id of the image in the CMS.",
            "nullable": true
          },
          "videoUrl": {
            "type": "string",
            "description": "URL of a video associated with the product.",
            "nullable": true
          },
          "mediaType": {
            "type": "string",
            "description": "Type of media. Used by the client to determine how to render the image or video or what have you.",
            "nullable": true
          },
          "sequence": {
            "type": "integer",
            "description": "For products with multiple images, the order in which this image appears on the storefront.",
            "format": "int32",
            "nullable": true
          },
          "productImageGroupId": {
            "type": "string",
            "description": "Image group to which this image belongs.  Default is null.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains the image label and alternate text for a product image or video in the language specified by LocalCode."
      },
      "ProductLocalizedContent": {
        "type": "object",
        "properties": {
          "localeCode": {
            "type": "string",
            "description": "Lanugage used for product content. Currently, only en_US is supported.",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "description": "Name of the product.",
            "nullable": true
          },
          "productFullDescription": {
            "type": "string",
            "description": "Long description of the product typically used for a product details page.",
            "nullable": true
          },
          "productShortDescription": {
            "type": "string",
            "description": "Brief description of the product typically used when the product is displayed in a list or search results.",
            "nullable": true
          },
          "productImages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductLocalizedImage"
            },
            "description": "List of images associated with the product.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Container for language-specific content to display on the storefront. You'll have a container for each supported language (LocaleCode). This enables you to display a product in multiple languages yet manage it as a single product internally."
      },
      "CatalogAdminsProductPrice": {
        "type": "object",
        "properties": {
          "isoCurrencyCode": {
            "type": "string",
            "description": "Currency code.",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "Price of the product. This is the price the merchant intends to sell the product if no sale price is present.",
            "format": "double",
            "nullable": true
          },
          "salePrice": {
            "type": "number",
            "description": "Current sale price of the product. Sale price is a numeric (monetary) amount, not a percentage off.",
            "format": "double",
            "nullable": true
          },
          "msrp": {
            "type": "number",
            "description": "Manufacturer Suggested Retail Price. +",
            "format": "double",
            "nullable": true
          },
          "map": {
            "type": "number",
            "description": "Minimum Advertised Price",
            "format": "double",
            "nullable": true
          },
          "mapStartDate": {
            "type": "string",
            "description": "Minimum Advertised Price effective start date (null = begining of time)",
            "format": "date-time",
            "nullable": true
          },
          "mapEndDate": {
            "type": "string",
            "description": "Minimum Advertised Price effectivity end date (null = forever)",
            "format": "date-time",
            "nullable": true
          },
          "creditValue": {
            "type": "number",
            "description": "Credit amt of the product",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Price of the product and currency used."
      },
      "ProductLocalizedSEOContent": {
        "type": "object",
        "properties": {
          "localeCode": {
            "type": "string",
            "description": "Lanugage used for product content. Currently, only en_US is supported.",
            "nullable": true
          },
          "metaTagTitle": {
            "type": "string",
            "description": "Metadata title. Metadata can be used to manage information internally. Sometimes used for SEO.",
            "nullable": true
          },
          "metaTagDescription": {
            "type": "string",
            "description": "Metadata description. Metadata can be used to manage information internally. Sometimes used for SEO.",
            "nullable": true
          },
          "metaTagKeywords": {
            "type": "string",
            "description": "Metadata keywords. Metadata can be used to manage information internally. Sometimes used for SEO.",
            "nullable": true
          },
          "titleTagTitle": {
            "type": "string",
            "description": "Used to customize the HTML title tag within the head section of the product details page",
            "nullable": true
          },
          "seoFriendlyUrl": {
            "type": "string",
            "description": "Human-readable identifier that you can give to the product to create friendly URLs. For example, \r\ninstead of \"http: //example.com/products?category=2&id=25,\" the friendly URL can be \"http: //example.com/products/category/2/25.\"",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Container for language-specific content to display on the storefront. You'll have a container for each supported language (LocaleCode). This enables you to display a product in multiple languages yet manage it as a single product internally."
      },
      "ProductCategory": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "integer",
            "description": "Unique identifier of the category. System-supplied and read-only.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Categories to which the product belongs."
      },
      "CatalogAdminsActiveDateRange": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Active Effectivity Dates"
      },
      "ProductInCatalogInfo": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "integer",
            "description": "The CatalogId of the catalog that the product is associated with (The catalog must a valid catalog within the MasterCatalog that the product belongs to)",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean",
            "description": "If true, the product is marked as available for sale in the catalog. Setting a product to IsActive = false will prevent it from being shown on the customer facing storefront.",
            "nullable": true
          },
          "isContentOverridden": {
            "type": "boolean",
            "description": "If true, the content for this product is overridden in the catalog. If false, the MasterCatalog level content will be used for the product.",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/ProductLocalizedContent"
          },
          "isPriceOverridden": {
            "type": "boolean",
            "description": "If true, the price for this product is overridden in the catalog. If false, the MasterCatalog level price will be used for the product.",
            "nullable": true
          },
          "price": {
            "$ref": "#/components/schemas/CatalogAdminsProductPrice"
          },
          "isSeoContentOverridden": {
            "type": "boolean",
            "description": "If true, the SEO content for this product is overridden in the catalog. If false, the MasterCatalog level SEO content will be used for the product.",
            "nullable": true
          },
          "seoContent": {
            "$ref": "#/components/schemas/ProductLocalizedSEOContent"
          },
          "productCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCategory"
            },
            "description": "Categories to which the product belongs for this catalog.",
            "nullable": true
          },
          "primaryProductCategory": {
            "$ref": "#/components/schemas/ProductCategory"
          },
          "dateFirstAvailableInCatalog": {
            "type": "string",
            "description": "Date this product was first Available for sale in the catalog. This is utilized in expressions that reference DaysInCatloag.",
            "format": "date-time",
            "nullable": true
          },
          "activeDateRange": {
            "$ref": "#/components/schemas/CatalogAdminsActiveDateRange"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Use the Products resource to create and manage products for your store.\r\nYou can create products with options that a shopper configures\r\n(such as a T-shirt color and size). The system can manage inventory for all\r\ncombinations of your product options, and can calculate tax and shipping costs."
      },
      "CatalogAdminsProductPricingBehaviorInfo": {
        "type": "object",
        "properties": {
          "discountsRestricted": {
            "type": "boolean",
            "nullable": true
          },
          "discountsRestrictedStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "discountsRestrictedEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "variationPricingMethod": {
            "type": "string",
            "description": "Only used when product is a variation",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Pricing behavior associated with the product"
      },
      "ProductExtraValueDeltaPrice": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "Which currency to use.",
            "nullable": true
          },
          "deltaPrice": {
            "type": "number",
            "description": "Amount of money saved when discounts are applied.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "How much a product option costs above the cost of the base product, if at all."
      },
      "ProductExtraValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "deltaPrice": {
            "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
          },
          "localizedDeltaPrice": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductExtraValueDeltaPrice"
            },
            "nullable": true
          },
          "deltaWeight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "isDefaulted": {
            "type": "boolean",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "attributeVocabularyValueDetail": {
            "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
          }
        },
        "additionalProperties": false,
        "description": "A value of a product option for this product. For example, a computer product may have an option called \"Memory\" that can have the values \"6GB,\"8GB,\" and \"12GB.\""
      },
      "ProductExtra": {
        "type": "object",
        "properties": {
          "attributeFQN": {
            "type": "string",
            "description": "Unique identifier of the Attribute.",
            "nullable": true
          },
          "isRequired": {
            "type": "boolean",
            "nullable": true
          },
          "isMultiSelect": {
            "type": "boolean",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductExtraValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Product options for configurable or stand-alone products. A configurable option is one that the shopper chooses when ordering, for example, \r\nthe color of a T-shirt. A stand-alone option is independent of the product and can be added to the product order. For example, a monogram."
      },
      "ProductPropertyValueLocalizedContent": {
        "type": "object",
        "properties": {
          "localeCode": {
            "type": "string",
            "description": "Language used for the string attribute value.",
            "nullable": true
          },
          "stringValue": {
            "type": "string",
            "description": "Localized Value in the language of the locale code",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Attribute Value Localized Resource"
      },
      "CatalogAdminsProductPropertyValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
          },
          "localizedContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductPropertyValueLocalizedContent"
            },
            "nullable": true
          },
          "attributeVocabularyValueDetail": {
            "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
          }
        },
        "additionalProperties": false,
        "description": "A value of a product option for this product. For example, a computer product may have an option called \"Memory\" that can have the values \"6GB,\"8GB,\" and \"12GB.\""
      },
      "CatalogAdminsProductProperty": {
        "type": "object",
        "properties": {
          "attributeFQN": {
            "type": "string",
            "description": "Unique identifier of the Attribute.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsProductPropertyValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Product options for configurable or stand-alone products. A configurable option is one that the shopper chooses when ordering, for example, \r\nthe color of a T-shirt. A stand-alone option is independent of the product and can be added to the product order. For example, a monogram."
      },
      "CatalogAdminsProductInventoryInfo": {
        "type": "object",
        "properties": {
          "manageStock": {
            "type": "boolean",
            "description": "If true, the Products service manages inventory for this product.",
            "nullable": true
          },
          "outOfStockBehavior": {
            "type": "string",
            "description": "The behvior when the ManageStock is true and the product is not in stock.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Use the Products resource to create and manage products for your store. You can create products with options that a shopper configures (such as a T-shirt color and size). The system can manage inventory for all combinations of your product options, and can calculate tax and shipping costs."
      },
      "CatalogAdminsProductCost": {
        "type": "object",
        "properties": {
          "isoCurrencyCode": {
            "type": "string",
            "description": "Currency code.",
            "nullable": true
          },
          "cost": {
            "type": "number",
            "description": "Cost of the product. This is the price the merchant pays for the product.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Price of the product and currency used."
      },
      "ProductSupplierInfo": {
        "type": "object",
        "properties": {
          "mfgPartNumber": {
            "type": "string",
            "nullable": true
          },
          "distPartNumber": {
            "type": "string",
            "nullable": true
          },
          "cost": {
            "$ref": "#/components/schemas/CatalogAdminsProductCost"
          }
        },
        "additionalProperties": false,
        "description": "Supplier info for the product"
      },
      "ProductVariationOption": {
        "type": "object",
        "properties": {
          "attributeFQN": {
            "type": "string",
            "description": "Unique identifier of the product variation option. System-supplied and read-only.",
            "nullable": true
          },
          "value": {
            "description": "Name of the product variation option used on the admin side independent of how it appears on the storefront. For example, the internal \"SZ\" attribute might appear as \"size\" on the storefront.",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/AttributeVocabularyValueLocalizedContent"
          }
        },
        "additionalProperties": false,
        "description": "An option for a product variation. For example, a T-shirt with size and color configurable options, might have a product variation option of \"size\" or \"color.\""
      },
      "ProductPublishingInfo": {
        "type": "object",
        "properties": {
          "publishedState": {
            "type": "string",
            "nullable": true
          },
          "lastPublishedBy": {
            "type": "string",
            "nullable": true
          },
          "lastPublishedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "publishSetCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Price of the product and currency used."
      },
      "CatalogAdminsBundledProduct": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Product Code",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "Qty of the bundled PRoduct",
            "format": "int32"
          },
          "price": {
            "$ref": "#/components/schemas/CatalogAdminsProductPrice"
          },
          "productName": {
            "type": "string",
            "description": "Read only Name of the BundledProduct",
            "nullable": true
          },
          "packageHeight": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "packageWidth": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "packageLength": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "packageWeight": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "fulfillmentTypesSupported": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Indicates the fulfillment types the product supports.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Price of the product and currency used."
      },
      "CatalogAdminsProductCollectionMemberKey": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Key to resolve a collection member product",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Key to resolve a collection member"
      },
      "ProductCollectionProduct": {
        "type": "object",
        "properties": {
          "memberKey": {
            "$ref": "#/components/schemas/CatalogAdminsProductCollectionMemberKey"
          },
          "productUsage": {
            "type": "string",
            "description": "ReadOnly Indicates the usage type of this product. Must be one of the values in ProductUsageConst.",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/ProductLocalizedContent"
          },
          "price": {
            "$ref": "#/components/schemas/CatalogAdminsProductPrice"
          }
        },
        "additionalProperties": false,
        "description": "List of products that belong to a product collection product."
      },
      "CatalogAdminsProductCollectionInfo": {
        "type": "object",
        "properties": {
          "collectionProductCode": {
            "type": "string",
            "description": "Product code of the product that is the collection that the containing product belongs to",
            "nullable": true
          },
          "collectionName": {
            "type": "string",
            "description": "Collection name in the language of the master catalog",
            "nullable": true
          },
          "isPrimaryCollection": {
            "type": "boolean",
            "description": "True when this is the primary collection for the containing product.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about the relationship between a Mozu.ProductAdmin.Contracts.Product and a productCollection (product with usagetype of collection)\r\nThis is only represented on the product member side of the relationship."
      },
      "CatalogAdminsProductImageGroupTag": {
        "required": [
          "fqn"
        ],
        "type": "object",
        "properties": {
          "fqn": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CatalogAdminsProductImageGroup": {
        "required": [
          "productImageGroupId"
        ],
        "type": "object",
        "properties": {
          "productImageGroupId": {
            "type": "string"
          },
          "productImageGroupTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsProductImageGroupTag"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SlicingSettings": {
        "type": "object",
        "properties": {
          "slicingAttributeFqn": {
            "type": "string",
            "description": "Product option FQN to create slices on",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Container class for Slicing Settings"
      },
      "CatalogAdminsProduct": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Merchant-created code identifier associated with the product, for example, a SKU or product item number.",
            "nullable": true
          },
          "productUsage": {
            "type": "string",
            "description": "Indicates the usage type of this product. Must be one of the values in ProductUsageConst.",
            "nullable": true
          },
          "fulfillmentTypesSupported": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Indicates the fulfillment types the product supports.",
            "nullable": true
          },
          "masterCatalogId": {
            "type": "integer",
            "description": "Identifier of the Master Catalog that this product is a member of. System-supplied and read-only",
            "format": "int32",
            "nullable": true
          },
          "productSequence": {
            "type": "integer",
            "description": "System generated monotonically increasing sequence",
            "format": "int32",
            "nullable": true
          },
          "productTypeId": {
            "type": "integer",
            "description": "Unique identifier of the productType of the product. Refers to a valid ProductType that was previously created with the ProductType resource.",
            "format": "int32",
            "nullable": true
          },
          "isValidForProductType": {
            "type": "boolean",
            "description": "Read only flag that indicates if the product meets the product type constraints (All adminRequired attributes have a valid value)",
            "nullable": true
          },
          "baseProductCode": {
            "type": "string",
            "description": "This is the base product ProductCode of a product that is a variation. It is read-only and only populated for products that are variations of a configurable base product.",
            "nullable": true
          },
          "productInCatalogs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductInCatalogInfo"
            },
            "description": "Catalog specific info for each catalog a product is valid in. There should always be one or more entries here.",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/ProductLocalizedContent"
          },
          "price": {
            "$ref": "#/components/schemas/CatalogAdminsProductPrice"
          },
          "pricingBehavior": {
            "$ref": "#/components/schemas/CatalogAdminsProductPricingBehaviorInfo"
          },
          "seoContent": {
            "$ref": "#/components/schemas/ProductLocalizedSEOContent"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsProductOption"
            },
            "description": "The Options defined in the product Type that are currently assigned to this product",
            "nullable": true
          },
          "extras": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductExtra"
            },
            "description": "The Extras defined in the product Type that are currently assigned to this product",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsProductProperty"
            },
            "description": "The Properties defined in the product Type that are currently assigned to this product",
            "nullable": true
          },
          "isTaxable": {
            "type": "boolean",
            "description": "If true, the product is subject to tax.",
            "nullable": true
          },
          "inventoryInfo": {
            "$ref": "#/components/schemas/CatalogAdminsProductInventoryInfo"
          },
          "shippingClassId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isRecurring": {
            "type": "boolean",
            "description": "If true, the product can be purchased or fulfilled at regular intervals, for example, monthly billing or a subscription.",
            "nullable": true
          },
          "upc": {
            "type": "string",
            "description": "UPC code of the product.",
            "nullable": true
          },
          "supplierInfo": {
            "$ref": "#/components/schemas/ProductSupplierInfo"
          },
          "isPackagedStandAlone": {
            "type": "boolean",
            "description": "Does this product need to be packaged on its own",
            "nullable": true
          },
          "standAlonePackageType": {
            "type": "string",
            "description": "When packaged alone this is the package type",
            "nullable": true
          },
          "packageHeight": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "packageWidth": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "packageLength": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "packageWeight": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "applicableDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsDiscount"
            },
            "description": "Read only. List of discounts that are available for a product.",
            "nullable": true
          },
          "isVariation": {
            "type": "boolean",
            "description": "Read only. If true, this is a product variation of a product with configurable options. System-supplied and read-only."
          },
          "variationKey": {
            "type": "string",
            "description": "Read only. If IsVariation true, thish provides a unique key to manage the variation of the base product.",
            "nullable": true
          },
          "hasConfigurableOptions": {
            "type": "boolean",
            "description": "Read only. If true, this product has configurable options. The product is not purchasable until the shopper selects options that resolve to a product variation. System-supplied and read-only."
          },
          "hasStandAloneOptions": {
            "type": "boolean",
            "description": "Read only. If true, the product has stand-alone options that a shopper may select. System-supplied and read-only."
          },
          "variationOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariationOption"
            },
            "description": "Read only List of variations that exist for a product. This is only populated when IsVariation is true. To get the list of options, the GET request must include the VariationOptions response group.",
            "nullable": true
          },
          "publishingInfo": {
            "$ref": "#/components/schemas/ProductPublishingInfo"
          },
          "bundledProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsBundledProduct"
            },
            "description": "list of other products that are included in a BundleProduct\r\nThis requires that the ProductUsage be set to Bundle",
            "nullable": true
          },
          "productCollectionProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCollectionProduct"
            },
            "description": "list of other products that are members of a ProductCollection\r\nThis requires that the ProductUsage be set to Collection",
            "nullable": true
          },
          "productCollections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsProductCollectionInfo"
            },
            "description": "List of Mozu.ProductAdmin.Contracts.ProductCollectionInfo that this product belongs to",
            "nullable": true
          },
          "productImageGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsProductImageGroup"
            },
            "description": "List of the image groups this product uses.\r\nImage groups are used to map different images to different product options.\r\nIf the product doesn't have options then all images will be in the default\r\nimage group.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "slicingSettings": {
            "$ref": "#/components/schemas/SlicingSettings"
          },
          "primaryProductCollectionCode": {
            "type": "string",
            "description": "When this product belongs to a product collection this is the product id for the primary collection.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Use the Products resource to create and manage products for your store. You can create products with options that a shopper configures (such as a T-shirt color and size). The system can manage inventory for all combinations of your product options, and can calculate tax and shipping costs."
      },
      "CatalogAdminsProductCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsProduct"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of products returned as a whole. A collection is not paged."
      },
      "ProductCodeRename": {
        "type": "object",
        "properties": {
          "existingProductCode": {
            "type": "string",
            "description": "The existing ProductCode that should be renamed",
            "nullable": true
          },
          "newProductCode": {
            "type": "string",
            "description": "The new ProductCode that will be the result of the rename",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A tuple used to rename the productCode of a product"
      },
      "ProductVariationDeltaPrice": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "Which currency is in use.",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "How much more the variation costs above the cost of the base product.",
            "format": "double",
            "nullable": true
          },
          "msrp": {
            "type": "number",
            "description": "Manufacturer Suggested Retail Price.",
            "format": "double",
            "nullable": true
          },
          "creditValue": {
            "type": "number",
            "description": "Credit amt of the product",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "How much more a product variation costs above the cost of the base product. If the price of the base product changes, this price is adjusted automatically."
      },
      "ProductVariationFixedPrice": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "Which currency is in use.",
            "nullable": true
          },
          "listPrice": {
            "type": "number",
            "description": "Variation price for fixed pricing",
            "format": "double",
            "nullable": true
          },
          "salePrice": {
            "type": "number",
            "description": "Variation sale price whne fixed pricing",
            "format": "double",
            "nullable": true
          },
          "msrp": {
            "type": "number",
            "description": "Manufacturer Suggested Retail Price.",
            "format": "double",
            "nullable": true
          },
          "creditValue": {
            "type": "number",
            "description": "Credit amt of the product",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductVariationProperty": {
        "type": "object",
        "properties": {
          "attributeFQN": {
            "type": "string",
            "description": "Unique identifier of the Attribute.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsProductPropertyValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ProductVariation": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": "If true, the merchant accepts the variation generated from the configurable options as a product offering. If IsActive is false then the product variation is not for sale--either because it was never a product offering or it was permanently dropped. IsActive is not intended for temporary unavailability. Default is false.",
            "nullable": true
          },
          "isOrphan": {
            "type": "boolean",
            "description": "If true, the variation is no longer possible. The system sets IsOrphan to true when the merchant has changed something to make this variation impossible. For example, if the merchant stopped selling all \"small\" shirts, all product variations with the \"small\" option are set to IsOrphan. System-supplied and read-only.",
            "nullable": true
          },
          "variationExists": {
            "type": "boolean",
            "description": "If true, the product variation exists. When the merchant sets IsActive to true, the system sets VariationExists to true and creates a Variation Key as a unique identifier for this variation. System-supplied and read-only.",
            "nullable": true
          },
          "variationkey": {
            "type": "string",
            "description": "Unique identifier for a single variation (\"small\" + \"red\" + \"short-sleeved\"). System-supplied and read-only.",
            "nullable": true
          },
          "variationProductCode": {
            "type": "string",
            "description": "Descriptive code to refer to a single variation. Typically this is a sequence appended to the base ProduceCode. A merchant can create this code to easily recognize a product variation. By default, the system creates this code by appending a number to the base product. After the merchant supplies this code, it becomes read-only.",
            "nullable": true
          },
          "deltaPrice": {
            "$ref": "#/components/schemas/ProductVariationDeltaPrice"
          },
          "localizedDeltaPrice": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariationDeltaPrice"
            },
            "description": "How much more the variation costs above the cost of the base product. If the price of the base product changes, this price is adjusted accordingly.\r\nThis collection allows for multiple currencies.",
            "nullable": true
          },
          "fixedPrice": {
            "$ref": "#/components/schemas/ProductVariationFixedPrice"
          },
          "localizedFixedPrice": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariationFixedPrice"
            },
            "description": "Price of the variation using fixed per currency\r\nThis collection allows for multiple currencies.",
            "nullable": true
          },
          "deltaWeight": {
            "type": "number",
            "description": "Weight of the product with this variation.",
            "format": "double",
            "nullable": true
          },
          "fixedWeight": {
            "type": "number",
            "description": "Fixed weight of the product with this variation.",
            "format": "double",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariationOption"
            },
            "description": "List of values for this product variation: such as \"small, \"red.. these are read only here as the variationKey defines the values \"",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariationProperty"
            },
            "description": "List of properties specific to this variation",
            "nullable": true
          },
          "upc": {
            "type": "string",
            "description": "Price Lookup Unit code for the product",
            "nullable": true
          },
          "fulfillmentTypesSupported": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Indicates the fulfillment types the product supports.",
            "nullable": true
          },
          "supplierInfo": {
            "$ref": "#/components/schemas/ProductSupplierInfo"
          }
        },
        "additionalProperties": false,
        "description": "The ProductVariation resource helps merchants manage their products with configurable options. Using this resource, the system creates a matrix of all possible combinations of the product options and the merchant confirms which variations match products for sale. For example, a T-shirt with three color and three size options has nine possible product variations. The system keeps track of inventory for each variation."
      },
      "ProductVariationPagedCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of product variations where the variations are returned in a series of pages."
      },
      "ProductVariationCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of product variations returned as a whole. A collection is not paged."
      },
      "CatalogAdminsProductProperty]": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductProperty]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsProductProperty]"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductPropertyPatchAction": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Product code of the target product",
            "nullable": true
          },
          "attributeFqn": {
            "type": "string",
            "description": "AttributeFQN",
            "nullable": true
          },
          "patches": {
            "$ref": "#/components/schemas/ProductProperty]"
          },
          "saveAndPublish": {
            "type": "boolean",
            "description": "If true and publishing is enabled, actions are applied to a draft version of the product and then the draft is published otherwise\r\nchanges are saved to the live product."
          }
        },
        "additionalProperties": false,
        "description": "List of JsonPatch operations to be applied to a Mozu.ProductAdmin.Contracts.ProductProperty"
      },
      "QuickEditProductPropertyActions": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductPropertyPatchAction"
            },
            "description": "List of Mozu.ProductAdmin.Contracts.ProductPropertyPatchAction actions to perform",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "List of Mozu.ProductAdmin.Contracts.ProductPropertyPatchActions to be applied to a list of\r\nMozu.ProductAdmin.Contracts.ProductPropertys."
      },
      "QuickEditResult": {
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string",
            "description": "The unique resouce identifier",
            "nullable": true
          },
          "success": {
            "type": "boolean",
            "description": "true if the patch succeeded."
          },
          "message": {
            "type": "string",
            "description": "Error message if any.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Individual update action result"
      },
      "QuickEditResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuickEditResult"
            },
            "description": "List of Mozu.ProductAdmin.Contracts.QuickEditResult",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Aggregates the individual results of update actions per product update"
      },
      "CatalogAdminsProductInCatalogInfo]": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductInCatalogInfo]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsProductInCatalogInfo]"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductInCatalogPatchAction": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Product code of the target product",
            "nullable": true
          },
          "catalogId": {
            "type": "integer",
            "description": "CatalogId",
            "format": "int32"
          },
          "patches": {
            "$ref": "#/components/schemas/ProductInCatalogInfo]"
          },
          "saveAndPublish": {
            "type": "boolean",
            "description": "If true and publishing is enabled, actions are applied to a draft version of the product and then the draft is published otherwise\r\nchanges are saved to the live product."
          }
        },
        "additionalProperties": false,
        "description": "List of JsonPatch operations to be applied to a Mozu.ProductAdmin.Contracts.ProductInCatalogInfo"
      },
      "QuickEditProductInCatalogActions": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductInCatalogPatchAction"
            },
            "description": "List of Mozu.ProductAdmin.Contracts.ProductPropertyPatchAction actions to perform",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "List of Mozu.ProductAdmin.Contracts.ProductInCatalogPatchActions to be applied"
      },
      "CatalogAdminsProduct]": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Product]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogAdminsProduct]"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductPatchAction": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Target product code",
            "nullable": true
          },
          "patches": {
            "$ref": "#/components/schemas/Product]"
          },
          "saveAndPublish": {
            "type": "boolean",
            "description": "If true and publishing is enabled, actions are applied to a draft version of the product and then the draft is published otherwise\r\nchanges are saved to the live product."
          }
        },
        "additionalProperties": false,
        "description": "List of JsonPatch operations to be applied to a Mozu.ProductAdmin.Contracts.Product"
      },
      "QuickEditProductActions": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductPatchAction"
            },
            "description": "List of Mozu.ProductAdmin.Contracts.ProductPatchAction actions to perform",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "List of Mozu.ProductAdmin.Contracts.ProductPatchActions to be applied to a list of Mozu.ProductAdmin.Contracts.Products."
      },
      "ProductSortExpression": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "The name of the field to sort on.\r\nMust be a known sort field or sortable attribute"
          },
          "direction": {
            "type": "string",
            "description": "ASC or DESC",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductSortOverride": {
        "required": [
          "productCode"
        ],
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "The product code of the product being overridden"
          },
          "sliceValue": {
            "type": "string",
            "description": "The slicing value of the product being overridden",
            "nullable": true
          },
          "position": {
            "type": "integer",
            "description": "Indicates the relative position of the product to other overridden products.\r\nPosition is absolute if IsPinned is true.\r\nNot applicable to buried products. Buried products will be given a default\r\nposition of -1",
            "format": "int32",
            "nullable": true
          },
          "isPinned": {
            "type": "boolean",
            "description": "Flag to indicate that the product is pinned at the specified position.\r\nNot applicable to buried products",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a product that is positioned out of its normal sort position.\r\nIt can be boosted to the top of the list, positioned exactly or buried at the bottom"
      },
      "ProductSortDefinition": {
        "required": [
          "name",
          "sortExpressions",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "productSortDefinitionId": {
            "type": "integer",
            "description": "System or user provided ID for the ProductSortDefinition",
            "format": "int32",
            "nullable": true
          },
          "categoryId": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Short Name for the sort definition. Required."
          },
          "startDate": {
            "type": "string",
            "description": "The Start Date when the sort definition becomes active",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "Optional end date for a product sort definition",
            "format": "date-time",
            "nullable": true
          },
          "sortExpressions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSortExpression"
            },
            "description": "Sort expression to apply\r\nMax two expressions"
          },
          "boosted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSortOverride"
            },
            "description": "List of products being positioned",
            "nullable": true
          },
          "buried": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSortOverride"
            },
            "description": "List of products being positioned",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Defines a default sort for a list of products and allows some products to be\r\nboosted to the top or pinned ot a specific position, or buried at the bottom of the\r\nlist.  Only 10 items can be boosted or pinned and up to"
      },
      "ProductSortDefinitionPagedCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductSortDefinition"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of product sort definitions where product sort definitions are returned in a series of pages."
      },
      "AttributeInProductTypeDisplayInfo": {
        "type": "object",
        "properties": {
          "displayIntention": {
            "type": "string",
            "description": "Defines the intended display of this Attribute in the storeFront (ex. DropDown, ImagePicker, RadioButtons....)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CatalogAdminsAttributeVocabularyValueDisplayInfo": {
        "type": "object",
        "properties": {
          "cmsId": {
            "type": "string",
            "description": "Id of the image in the CMS.",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "URL of the image.",
            "nullable": true
          },
          "colorValue": {
            "type": "string",
            "description": "Hex Color value to display in a color picker",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AttributeVocabularyValueInProductType": {
        "type": "object",
        "properties": {
          "value": {
            "description": "The actual value of the attribute vocabulary. This must be an existing value defined in the attribute vocabulary",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "Used to order the display of the attribute values in the storefront....",
            "format": "int32",
            "nullable": true
          },
          "displayInfo": {
            "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValueDisplayInfo"
          },
          "vocabularyValueDetail": {
            "$ref": "#/components/schemas/CatalogAdminsAttributeVocabularyValue"
          }
        },
        "additionalProperties": false
      },
      "AttributeInProductType": {
        "type": "object",
        "properties": {
          "attributeFQN": {
            "type": "string",
            "description": "Unique identifier of the Attribute. Must be an attribute fully qualilfied name that already exists. If no namespace is specified Tenant is assumed",
            "nullable": true
          },
          "isInheritedFromBaseType": {
            "type": "boolean",
            "description": "If True, the attribute is part of the base product type and can only have order modified.",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "Used to order the display of the attributes within a section",
            "format": "int32",
            "nullable": true
          },
          "isRequiredByAdmin": {
            "type": "boolean",
            "description": "If True, the admin must include this attribute in products of this productType",
            "nullable": true
          },
          "isHiddenProperty": {
            "type": "boolean",
            "description": "If True, the property is hidden in the storefront. This field only applies to properties.",
            "nullable": true
          },
          "isAdminOnlyProperty": {
            "type": "boolean",
            "description": "If true, this property is not available on the storefront. If false, this property will be available on storefront. The IsHiddenProperty hides the property from the customer, but is still available from the API.",
            "nullable": true
          },
          "isProductDetailsOnlyProperty": {
            "type": "boolean",
            "description": "If True this property will not be returned  storefront product listings (Search,GetProduct) it will still be returned on GetProduct, ValidateProduct...)",
            "nullable": true
          },
          "isMultiValueProperty": {
            "type": "boolean",
            "description": "If True, the property can have multiple values selected on the product. Only applies to PredefinedVocabulary properties.",
            "nullable": true
          },
          "displayInfo": {
            "$ref": "#/components/schemas/AttributeInProductTypeDisplayInfo"
          },
          "vocabularyValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeVocabularyValueInProductType"
            },
            "description": "The collection of vocabulary values included in this product type.",
            "nullable": true
          },
          "attributeDetail": {
            "$ref": "#/components/schemas/CatalogAdminsAttribute"
          }
        },
        "additionalProperties": false
      },
      "ProductType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the ProductType. System-supplied and read-only.",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the productType",
            "nullable": true
          },
          "masterCatalogId": {
            "type": "integer",
            "description": "Indentifier of the Master Catalog that this ProductType is a member of. System-supplied and read-only.",
            "format": "int32",
            "nullable": true
          },
          "isBaseProductType": {
            "type": "boolean",
            "description": "System supplied and read only. There is only one BaseProductType per MasterCatalog."
          },
          "productCount": {
            "type": "integer",
            "description": "Indicates the number of products currently using this Product Type. System-supplied and read-only.",
            "format": "int32",
            "nullable": true
          },
          "productUsages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ProductUsages supported by the ProductType.",
            "nullable": true
          },
          "goodsType": {
            "type": "string",
            "description": "The TYpe of Goods of this product",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeInProductType"
            },
            "description": "Collection of the Attributes that are Options in this productType",
            "nullable": true
          },
          "extras": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeInProductType"
            },
            "description": "Collection of the Attributes that are Extras in this productType",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeInProductType"
            },
            "description": "Collection of the Attributes that are Properties in this productType",
            "nullable": true
          },
          "variantProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeInProductType"
            },
            "description": "Collection of the Attributes that are VariantProperties in this productType",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "ProductTypeCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of attributes."
      },
      "PublishingScope": {
        "type": "object",
        "properties": {
          "allPending": {
            "type": "boolean",
            "description": "True = scope to all pending products",
            "nullable": true
          },
          "productCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of specific productCodes to scope publish operation against",
            "nullable": true
          },
          "publishSetCode": {
            "type": "string",
            "description": "The Publish Set to publish",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublishSet": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The PublishSet unique identifier",
            "nullable": true
          },
          "productCount": {
            "type": "integer",
            "description": "Number of product drafts that are included in the publish set",
            "format": "int32"
          },
          "productCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of specific product codes that are included in the publish set",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublishSetCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublishSet"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Non-paged collection of PublishSets."
      },
      "SynonymDefinition": {
        "type": "object",
        "properties": {
          "synonymId": {
            "type": "integer",
            "description": "The unique identifier for the synonym definition",
            "format": "int32",
            "nullable": true
          },
          "key": {
            "type": "string",
            "description": "If key is defined then map is directed",
            "nullable": true
          },
          "synonyms": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of synonyms.  If no key is defined the matches are bidirectional",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SynonymDefinitionCollection": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "integer",
            "description": "Read-only TenantId",
            "format": "int32"
          },
          "siteId": {
            "type": "integer",
            "description": "Read-only  Site Id",
            "format": "int32"
          },
          "localeCode": {
            "type": "string",
            "description": "The locale code to which this definition applies",
            "nullable": true
          },
          "synonymDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SynonymDefinition"
            },
            "description": "List of mappings for this definition",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Non-paged collection of all synonyms for a Site-Locale. Used for bulk operations"
      },
      "SynonymDefinitionPagedCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SynonymDefinition"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Paged collection of synonyms for a Site-Locale."
      },
      "SearchTuningRuleFilter": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchTuningRule": {
        "type": "object",
        "properties": {
          "siteId": {
            "type": "integer",
            "format": "int32"
          },
          "searchTuningRuleCode": {
            "type": "string",
            "nullable": true
          },
          "searchTuningRuleName": {
            "type": "string",
            "nullable": true
          },
          "searchTuningRuleDescription": {
            "type": "string",
            "nullable": true
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchTuningRuleFilter"
            },
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "isDefault": {
            "type": "boolean"
          },
          "activeStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "activeEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "boostedProductCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "blockedProductCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "SearchTuningRuleCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchTuningRule"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchTuningRuleSortFields": {
        "type": "object",
        "properties": {
          "sortFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "inclusionExclusionType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BoostValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true
          },
          "boost": {
            "type": "integer",
            "format": "int32"
          },
          "operator": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BoostField": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string",
            "nullable": true
          },
          "valueExpressions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BoostValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FieldValueBoost": {
        "type": "object",
        "properties": {
          "boostType": {
            "type": "string",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BoostField"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CampaignSiteSearchSettings": {
        "type": "object",
        "properties": {
          "searchTermAssociations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "fieldValueBoost": {
            "$ref": "#/components/schemas/FieldValueBoost"
          }
        },
        "additionalProperties": false
      },
      "CampaignProductSuggestSettings": {
        "type": "object",
        "properties": {
          "searchTermAssociations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "fieldValueBoost": {
            "$ref": "#/components/schemas/FieldValueBoost"
          }
        },
        "additionalProperties": false
      },
      "CampaignListingSettings": {
        "type": "object",
        "properties": {
          "fieldValueBoost": {
            "$ref": "#/components/schemas/FieldValueBoost"
          }
        },
        "additionalProperties": false
      },
      "CampaignSettings": {
        "type": "object",
        "properties": {
          "campaignName": {
            "type": "string",
            "nullable": true
          },
          "campaignId": {
            "type": "string",
            "nullable": true
          },
          "json": {
            "type": "string",
            "nullable": true
          },
          "campaignDescription": {
            "type": "string",
            "nullable": true
          },
          "campaignStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "campaignEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "siteSearchSettings": {
            "$ref": "#/components/schemas/CampaignSiteSearchSettings"
          },
          "productSuggestSettings": {
            "$ref": "#/components/schemas/CampaignProductSuggestSettings"
          },
          "listingSettings": {
            "$ref": "#/components/schemas/CampaignListingSettings"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Settings to control product search and indexing behavior"
      },
      "CampaignSettingsCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignSettings"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FieldWeight": {
        "type": "object",
        "properties": {
          "searchFieldName": {
            "type": "string",
            "description": "field in the index to target",
            "nullable": true
          },
          "weight": {
            "type": "integer",
            "description": "weight to apply to boost field",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SuggestSettings": {
        "type": "object",
        "properties": {
          "fieldWeights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldWeight"
            },
            "nullable": true
          },
          "personalizationExperience": {
            "type": "string",
            "nullable": true
          },
          "personalizationFactor": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "returnFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "crossFieldAdditiveScoreFactor": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ListingSettings": {
        "type": "object",
        "properties": {
          "customBoosts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "fieldValueBoost": {
            "$ref": "#/components/schemas/FieldValueBoost"
          },
          "personalizationExperience": {
            "type": "string",
            "nullable": true
          },
          "personalizationFactor": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductSuggestSettings": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SuggestSettings"
          }
        ],
        "properties": {
          "customBoosts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "fieldValueBoost": {
            "$ref": "#/components/schemas/FieldValueBoost"
          },
          "searchChildProductsByDefault": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SearchRedirect": {
        "type": "object",
        "properties": {
          "redirectId": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "searchTermList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Redirects based on what is entered in site search"
      },
      "SearchRedirectCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchRedirect"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "List of search redirects"
      },
      "SiteSearchFieldWeight": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldWeight"
          }
        ],
        "properties": {
          "phraseWeight": {
            "type": "integer",
            "description": "weight to apply in phrase boosting",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "A custom field and weight value for search relevancy"
      },
      "TypoTolerance": {
        "type": "object",
        "properties": {
          "factor": {
            "type": "integer",
            "description": "Typo tolerance distance for fuzzy match. Must be Integer 1-10.",
            "format": "int32"
          },
          "distance": {
            "type": "integer",
            "description": "Typo tolerance distance for fuzzy match. Must be Integer 1 or 2.",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "description": "Only the class itself can set Enabled to some value, \r\nhowever anyone could read the value in Enabled.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CatalogAdminsSpellcheck": {
        "type": "object",
        "properties": {
          "autocorrect": {
            "type": "boolean",
            "description": "Enables/disables the use of spell correct/auto correct at query time"
          },
          "didyoumean": {
            "type": "boolean",
            "description": "Enables/disables the use of did you mean at query time"
          },
          "spellcheckEnabled": {
            "type": "boolean",
            "description": "Does the spelling dictionary exists in SOLR\r\nThis determines if toggle in site search settings should be enabled/disabled"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "SiteSearchSettings": {
        "type": "object",
        "properties": {
          "fieldWeights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteSearchFieldWeight"
            },
            "nullable": true
          },
          "customBoosts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "fieldValueBoost": {
            "$ref": "#/components/schemas/FieldValueBoost"
          },
          "minimumMatchPercents": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "phraseSlop": {
            "type": "integer",
            "format": "int32"
          },
          "personalizationExperience": {
            "type": "string",
            "nullable": true
          },
          "personalizationFactor": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "searchChildProductsByDefault": {
            "type": "boolean"
          },
          "crossFieldAdditiveScoreFactor": {
            "type": "number",
            "format": "double"
          },
          "typoTolerance": {
            "$ref": "#/components/schemas/TypoTolerance"
          },
          "spellcheck": {
            "$ref": "#/components/schemas/CatalogAdminsSpellcheck"
          }
        },
        "additionalProperties": false
      },
      "SearchSettings": {
        "type": "object",
        "properties": {
          "settingsName": {
            "type": "string",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean"
          },
          "siteSearchSettings": {
            "$ref": "#/components/schemas/SiteSearchSettings"
          },
          "productSuggestSettings": {
            "$ref": "#/components/schemas/ProductSuggestSettings"
          },
          "categorySuggestSettings": {
            "$ref": "#/components/schemas/SuggestSettings"
          },
          "listingSettings": {
            "$ref": "#/components/schemas/ListingSettings"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Settings to control product search and indexing behavior"
      },
      "SearchSettingsCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchSettings"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SpellcheckUpdate": {
        "type": "object",
        "properties": {
          "spellcheckEnabled": {
            "type": "boolean",
            "description": "Spellcheck true/false"
          },
          "tenantId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "masterCatalogId": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "localeCode": {
            "type": "string",
            "description": "e.g en-US",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "TagNode": {
        "type": "object",
        "properties": {
          "tagName": {
            "type": "string",
            "nullable": true
          },
          "tagPath": {
            "type": "string",
            "nullable": true
          },
          "tagCode": {
            "type": "string",
            "nullable": true
          },
          "isRoot": {
            "type": "boolean"
          },
          "children": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TagNodeTree": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "success": {
            "type": "boolean"
          },
          "items": {
            "$ref": "#/components/schemas/TagNode"
          }
        },
        "additionalProperties": false,
        "description": "Hierarchical tree for Tags"
      },
      "CampaignResult": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "type": "integer",
            "format": "int32"
          },
          "campaignName": {
            "type": "string",
            "nullable": true
          },
          "campaignId": {
            "type": "string",
            "nullable": true
          },
          "json": {
            "type": "string",
            "nullable": true
          },
          "campaignDescription": {
            "type": "string",
            "nullable": true
          },
          "campaignStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "campaignEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "siteSearchSettings": {
            "$ref": "#/components/schemas/CampaignSiteSearchSettings"
          },
          "productSuggestSettings": {
            "$ref": "#/components/schemas/CampaignProductSuggestSettings"
          },
          "listingSettings": {
            "$ref": "#/components/schemas/CampaignListingSettings"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Campaign result from db"
      },
      "CatalogRuntimesCurrencyExchangeRate": {
        "type": "object",
        "properties": {
          "fromCurrencyCode": {
            "type": "string",
            "description": "The source currency code",
            "nullable": true
          },
          "toCurrencyCode": {
            "type": "string",
            "description": "The target currency code",
            "nullable": true
          },
          "rate": {
            "type": "number",
            "description": "The exchange rate",
            "format": "double",
            "nullable": true
          },
          "multiplier": {
            "type": "number",
            "description": "An additional multiplier to use in calculations",
            "format": "double",
            "nullable": true
          },
          "decimalPlaces": {
            "type": "integer",
            "description": "Number of decimal places",
            "format": "int32",
            "nullable": true
          },
          "roundingStrategy": {
            "type": "integer",
            "description": "Rounding strategy",
            "format": "int32",
            "nullable": true
          },
          "referenceData": {
            "type": "string",
            "description": "Reference data for miscellaneous metadata from updates",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The currency exchange rates from one currency to another."
      },
      "ResolvedPriceList": {
        "type": "object",
        "properties": {
          "priceListCode": {
            "type": "string",
            "nullable": true
          },
          "priceListId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PriceListNode": {
        "type": "object",
        "properties": {
          "priceListCode": {
            "type": "string",
            "nullable": true
          },
          "priceListId": {
            "type": "integer",
            "format": "int32"
          },
          "parentPriceListId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "priceListLevel": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CatalogRuntimesPriceList": {
        "type": "object",
        "properties": {
          "priceListCode": {
            "type": "string",
            "nullable": true
          },
          "priceListId": {
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "resolvable": {
            "type": "boolean"
          },
          "isIndexed": {
            "type": "boolean",
            "nullable": true
          },
          "filteredInStoreFront": {
            "type": "boolean"
          },
          "isSiteDefault": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceListNode"
            },
            "nullable": true
          },
          "descendants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceListNode"
            },
            "nullable": true
          },
          "validSites": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CatalogRuntimesCategory": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "integer",
            "description": "Internal unique identifier of the category. System-supplied and read-only.",
            "format": "int32"
          },
          "parentCategory": {
            "type": "object"
          },
          "content": {
            "$ref": "#/components/schemas/CategoryContent"
          },
          "childrenCategories": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of subcategories that belong to this category.",
            "nullable": true
          },
          "sequence": {
            "type": "integer",
            "description": "Order in which categories appear when they are at the same level (siblings). For example, categories can be sequenced so that a specific category always appears first (or last).",
            "format": "int32",
            "nullable": true
          },
          "isDisplayed": {
            "type": "boolean",
            "description": "Indicates whether the category should be displayed."
          },
          "categoryCode": {
            "type": "string",
            "description": "External unique identifier of the category.",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "Indicates whether the category should be displayed.",
            "format": "int32",
            "nullable": true
          },
          "updateDate": {
            "type": "string",
            "description": "Last Modified Date Time",
            "format": "date-time"
          },
          "shouldSlice": {
            "type": "boolean",
            "description": "Indicates whether the category should be sliced"
          }
        },
        "additionalProperties": false,
        "description": "The category hierarchy of your store as it appears on the storefront. This is the category heirarchy defined with the admin/category resource except for any categories with an IsDisplayed value set to false."
      },
      "CategoryImage": {
        "type": "object",
        "properties": {
          "imageLabel": {
            "type": "string",
            "description": "Image title.  Unicode data with a maximum length of 50 characters.",
            "nullable": true
          },
          "altText": {
            "type": "string",
            "description": "Descriptive text associated with the image. Unicode data with a maximum length of 200 characters.",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "Image URL. Unicode data with a maximum length of 4000 characters.",
            "nullable": true
          },
          "cmsId": {
            "type": "string",
            "description": "Id of the image in the CMS.",
            "nullable": true
          },
          "videoUrl": {
            "type": "string",
            "description": "URL of the video. Unicode data with a maximum length of 4000 characters.",
            "nullable": true
          },
          "mediaType": {
            "type": "string",
            "description": "Type of media. Used by the client to determine how to render the image or video or what have you.",
            "nullable": true
          },
          "sequence": {
            "type": "integer",
            "description": "For categories with multiple images, the sequence is the order in which this image appears. Whole number data. Required.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Image or video associated with a category."
      },
      "CategoryContent": {
        "type": "object",
        "properties": {
          "categoryImages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryImage"
            },
            "description": "Images associated with the category.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the category as it appears on the storefront.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the category as it appears on the storefront.",
            "nullable": true
          },
          "pageTitle": {
            "type": "string",
            "description": "Title that appears at the top of new pages.",
            "nullable": true
          },
          "metaTagTitle": {
            "type": "string",
            "description": "Metadata title. Metadata can be used to manage information internally.",
            "nullable": true
          },
          "metaTagDescription": {
            "type": "string",
            "description": "Metadata description. Metadata can be used to manage information internally.",
            "nullable": true
          },
          "metaTagKeywords": {
            "type": "string",
            "description": "Metadata keywords. Metadata can be used to manage information internally.",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "description": "Human-readable identifier given to the category to create friendly URLs.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Name of the category and optionally, a description, page title, friendly URL, associated images, and any metadata."
      },
      "CatalogRuntimesCategoryCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesCategory"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of categories returned as a whole. A collection is not paged."
      },
      "CatalogRuntimesCategoryPagedCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesCategory"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of categories where categories are returned in a series of pages."
      },
      "CatalogRuntimesPackageMeasurements": {
        "type": "object",
        "properties": {
          "packageHeight": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "packageWidth": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "packageLength": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          },
          "packageWeight": {
            "$ref": "#/components/schemas/CommerceRuntimeMeasurement"
          }
        },
        "additionalProperties": false,
        "description": "Physical dimensions of the package required to ship the product and its weight."
      },
      "CatalogRuntimesProductInventoryInfo": {
        "type": "object",
        "properties": {
          "manageStock": {
            "type": "boolean",
            "description": "If true, the Products service manages inventory for this product.",
            "nullable": true
          },
          "outOfStockBehavior": {
            "type": "string",
            "description": "The behvior when the ManageStock is true and the product is not in stock.",
            "nullable": true
          },
          "onlineStockAvailable": {
            "type": "integer",
            "description": "Number of product items currently available for purchase.",
            "format": "int32",
            "nullable": true
          },
          "onlineSoftStockAvailable": {
            "type": "integer",
            "description": "Number of product items currently available for purchase.",
            "format": "int32",
            "nullable": true
          },
          "onlineLocationCode": {
            "type": "string",
            "description": "Directship location code for OnlineStockAvailable",
            "nullable": true
          },
          "availableDate": {
            "type": "string",
            "description": "Date the item will become available for back order if out of stock",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Use the Products resource to create and manage products for your store. You can create products with options that a shopper configures (such as a T-shirt color and size). The system can manage inventory for all combinations of your product options, and can calculate tax and shipping costs."
      },
      "BundledProductBase": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Merchant-created code associated with the product, for example, a SKU.",
            "nullable": true
          },
          "goodsType": {
            "type": "string",
            "description": "The GoodsType of this product (Physical, Digital, DigitalCredit)",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the bundled product",
            "format": "int32"
          },
          "measurements": {
            "$ref": "#/components/schemas/CatalogRuntimesPackageMeasurements"
          },
          "isPackagedStandAlone": {
            "type": "boolean",
            "description": "Is this product shipped in its own package",
            "nullable": true
          },
          "inventoryInfo": {
            "$ref": "#/components/schemas/CatalogRuntimesProductInventoryInfo"
          },
          "optionAttributeFQN": {
            "type": "string",
            "description": "Fully Qualified Name of the selected option's attribute (only applies to Products as extras)",
            "nullable": true
          },
          "optionValue": {
            "description": "Value of the selected option (only applies to Products as extras)",
            "nullable": true
          },
          "creditValue": {
            "type": "number",
            "description": "Credit Value applicable to this product. Should only be present on DigitalCredit goodsType....",
            "format": "double",
            "nullable": true
          },
          "productType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details of a product, including its product code, name, description, options (if any), and current state--whether the product can be purchased given the options selected currently."
      },
      "ProductImage": {
        "type": "object",
        "properties": {
          "imageLabel": {
            "type": "string",
            "description": "Image title.  Unicode data with a maximum length of 50 characters.",
            "nullable": true
          },
          "altText": {
            "type": "string",
            "description": "Descriptive text associated with the image. Unicode data with a maximum length of 200 characters.",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "Image URL. Unicode data with a maximum length of 4000 characters.",
            "nullable": true
          },
          "cmsId": {
            "type": "string",
            "description": "Id of the image in the CMS.",
            "nullable": true
          },
          "videoUrl": {
            "type": "string",
            "description": "URL of the video. Unicode data with a maximum length of 4000 characters.",
            "nullable": true
          },
          "mediaType": {
            "type": "string",
            "description": "Type of media. Used by the client to determine how to render the image or video or what have you.",
            "nullable": true
          },
          "sequence": {
            "type": "integer",
            "description": "For products with multiple images, the sequence is the order in which this image appears. Whole number data. Required.",
            "format": "int32",
            "nullable": true
          },
          "productImageGroupId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Image or video associated with a product."
      },
      "ProductContent": {
        "type": "object",
        "properties": {
          "productName": {
            "type": "string",
            "description": "Name of the product.",
            "nullable": true
          },
          "productFullDescription": {
            "type": "string",
            "description": "Detailed description of the product typically used for a product details page.",
            "nullable": true
          },
          "productShortDescription": {
            "type": "string",
            "description": "Brief description of the product typically used when the product is displayed in a list or search results.",
            "nullable": true
          },
          "metaTagTitle": {
            "type": "string",
            "description": "Metadata title used to manage information internally.",
            "nullable": true
          },
          "metaTagDescription": {
            "type": "string",
            "description": "Metadata description used to manage information internally.",
            "nullable": true
          },
          "metaTagKeywords": {
            "type": "string",
            "description": "Metadata keywords used to manage information internally.",
            "nullable": true
          },
          "seoFriendlyUrl": {
            "type": "string",
            "description": "Human-readable identifier defined for the product to create friendly URLs.",
            "nullable": true
          },
          "productImages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductImage"
            },
            "description": "Images associated with the product.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Name of the product and, if supplied, description, metatags, friendly URL, and associated images."
      },
      "CatalogRuntimesBundledProduct": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BundledProductBase"
          }
        ],
        "properties": {
          "content": {
            "$ref": "#/components/schemas/ProductContent"
          }
        },
        "additionalProperties": false
      },
      "ValidationMessage": {
        "type": "object",
        "properties": {
          "severity": {
            "type": "string",
            "description": "Severity level of the validation failure.\r\n Must be one of the values in SeverityConst.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "What invoked the validation.  Must be one of the values in SourceTypeConst.",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Message displayed to the user when this validation failure occurred.",
            "nullable": true
          },
          "validationType": {
            "type": "string",
            "description": "Type of validation error that occurred. This can be checked programatically. \r\n Must be one of the values in ValidationTypeConst.",
            "nullable": true
          },
          "sourceId": {
            "type": "string",
            "description": "Unique identifier of the source that invoked the validation failure.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductPurchasableState": {
        "type": "object",
        "properties": {
          "isPurchasable": {
            "type": "boolean",
            "description": "If true, this product is currently available for purchase. For products with options, this is false until the shopper selects all required options."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationMessage"
            },
            "description": "Message associated with this product if it is not ready to be purchased. For products with options, message contains which required options are missing.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Current state of the product purchase, that is, whether it is ready to be purchased. For products with configurable options,     /// the product is purchaseable if the shopper has selected all required options. If not, a message lists which required options are missing."
      },
      "CatalogRuntimesDiscount": {
        "type": "object",
        "properties": {
          "discountId": {
            "type": "integer",
            "description": "Unique identifier of the discount.",
            "format": "int32"
          },
          "expirationDate": {
            "type": "string",
            "description": "Date when the discount expires.",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the discount.",
            "nullable": true
          },
          "friendlyDescription": {
            "type": "string",
            "description": "Description of the discount.",
            "nullable": true
          },
          "impact": {
            "type": "number",
            "description": "The Impact of the individual Discount",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Discount name and expiration date."
      },
      "CatalogRuntimesAppliedDiscount": {
        "type": "object",
        "properties": {
          "couponCode": {
            "type": "string",
            "description": "If the discount is a coupon, code associated with the coupon.",
            "nullable": true
          },
          "discount": {
            "$ref": "#/components/schemas/CatalogRuntimesDiscount"
          },
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesDiscount"
            },
            "description": "Discount name and expiration date.",
            "nullable": true
          },
          "impact": {
            "type": "number",
            "description": "The new calculated price of the product. That is, the product price minus the discount amount.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Discount applied to the product."
      },
      "CatalogRuntimesProductPrice": {
        "type": "object",
        "properties": {
          "msrp": {
            "type": "number",
            "description": "Manufacturer suggested Retail price, this may be null if one is not set in the catalog.",
            "format": "double",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "Listed Price of the product. This is the price that the merchant intends to sell the product for if no sale is active.",
            "format": "double",
            "nullable": true
          },
          "priceType": {
            "type": "string",
            "description": "Futher clarification of what value is being returned in the Price field",
            "nullable": true
          },
          "salePrice": {
            "type": "number",
            "description": "Current sale price of the product. This can be either a specific numerical amount or it can be calculated based on an active discount. Optional.",
            "format": "double",
            "nullable": true
          },
          "salePriceType": {
            "type": "string",
            "nullable": true
          },
          "catalogSalePrice": {
            "type": "number",
            "description": "Current sale price of the product listed in the catalog. This is not typically dispalyed directly to the user as it will be listed in SalePrice if applicable.",
            "format": "double",
            "nullable": true
          },
          "catalogListPrice": {
            "type": "number",
            "description": "Current Price Listed in the catalog.",
            "format": "double",
            "nullable": true
          },
          "discount": {
            "$ref": "#/components/schemas/CatalogRuntimesAppliedDiscount"
          },
          "creditValue": {
            "type": "number",
            "description": "Credit Value applicable to this product. Should only be present on DigitalCredit goodsType....",
            "format": "double",
            "nullable": true
          },
          "effectivePricelistCode": {
            "type": "string",
            "description": "The priceList that was applied to this product",
            "nullable": true
          },
          "priceListEntryCode": {
            "type": "string",
            "description": "The specific PriceListCode that was applied (includes inheritence",
            "nullable": true
          },
          "priceListEntryMode": {
            "type": "string",
            "description": "IF a PriceList Entry was applied to this price it will be (simple, bulk...)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Price of the product with any sale and discounts applied."
      },
      "ProductPriceRange": {
        "type": "object",
        "properties": {
          "lower": {
            "$ref": "#/components/schemas/CatalogRuntimesProductPrice"
          },
          "upper": {
            "$ref": "#/components/schemas/CatalogRuntimesProductPrice"
          }
        },
        "additionalProperties": false,
        "description": "For products with options that vary the cost of the product, the range between lowest and highest possible price of the product based on the current selection of options."
      },
      "ProductVolumePrice": {
        "type": "object",
        "properties": {
          "isCurrent": {
            "type": "boolean"
          },
          "minQty": {
            "type": "integer",
            "format": "int32"
          },
          "maxQty": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "priceRange": {
            "$ref": "#/components/schemas/ProductPriceRange"
          },
          "price": {
            "$ref": "#/components/schemas/CatalogRuntimesProductPrice"
          }
        },
        "additionalProperties": false
      },
      "CatalogRuntimesProductPricingBehaviorInfo": {
        "type": "object",
        "properties": {
          "discountsRestricted": {
            "type": "boolean",
            "nullable": true
          },
          "discountsRestrictedStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "discountsRestrictedEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AttributeDetail": {
        "type": "object",
        "properties": {
          "valueType": {
            "type": "string",
            "description": "The ValueType of the attribute. Valid values for ValueType are defined in ValueTypeTypeConst.",
            "nullable": true
          },
          "inputType": {
            "type": "string",
            "description": "The InputType type of the attribute. Valid values for InputType are defined in InputTypeConst.",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "description": "The DataType of the attribute. Valid values for DataType are defined in DataTypeTypeConst.",
            "nullable": true
          },
          "usageType": {
            "type": "string",
            "description": "The UsageType of the attribute. Valid values for the usageType are defined in UsageTypeConst .",
            "nullable": true
          },
          "dataTypeSequence": {
            "type": "integer",
            "description": "A unique sequence of the attribute By dataType (used for common naming of fields in search index)",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the attribute in the language specified by LocaleCode.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the attribute in the language specified by LocaleCode.",
            "nullable": true
          },
          "validation": {
            "$ref": "#/components/schemas/CatalogAdminsAttributeValidation"
          },
          "searchableInStorefront": {
            "type": "boolean",
            "description": "Indicates whether the attribute value is searchable."
          },
          "searchDisplayValue": {
            "type": "boolean",
            "description": "If true, the system will index the display value of string attributes instead of the canonical value for searching. \r\nThe canonical value will always be used for filtering. Does not apply for for non-string attributes."
          },
          "allowFilteringAndSortingInStorefront": {
            "type": "boolean",
            "description": "Indicates whether the attribute should be able to be used in filters, facets, and sorting on the public storefront."
          },
          "indexValueWithCase": {
            "type": "boolean",
            "description": "Indicates whether the attribtue value is indexed with case or not",
            "nullable": true
          },
          "customWeightInStorefrontSearch": {
            "type": "boolean",
            "description": "Indicates whether the attribtue value is indexed so that it can have a custom relevency weight compared to other attributes in a tokenized text search",
            "nullable": true
          },
          "displayIntention": {
            "type": "string",
            "description": "Am optional hint to the theme about how this attribute should be displayed (what control to use)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Product Attribute properties common between a Product Propery, Option, and Extra"
      },
      "CatalogRuntimesAttributeVocabularyValueDisplayInfo": {
        "type": "object",
        "properties": {
          "cmsId": {
            "type": "string",
            "description": "Id of the image in the CMS.",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "URL of the image.",
            "nullable": true
          },
          "colorValue": {
            "type": "string",
            "description": "Hex Color value to display in a color picker",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Product Attribute properties common between a Product Propery, Option, and Extra"
      },
      "CatalogRuntimesProductPropertyValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "stringValue": {
            "type": "string",
            "description": "Localized Value in the language of the locale code",
            "nullable": true
          },
          "displayInfo": {
            "$ref": "#/components/schemas/CatalogRuntimesAttributeVocabularyValueDisplayInfo"
          }
        },
        "additionalProperties": false,
        "description": "Value of product property"
      },
      "CatalogRuntimesProductProperty": {
        "type": "object",
        "properties": {
          "attributeFQN": {
            "type": "string",
            "description": "Attribute fully qualified name",
            "nullable": true
          },
          "isHidden": {
            "type": "boolean",
            "description": "Indicates whether the product property should be hidden from the customer",
            "nullable": true
          },
          "isMultiValue": {
            "type": "boolean",
            "description": "Indicates whether it's possible for there to be more than one value in the Values field",
            "nullable": true
          },
          "attributeDetail": {
            "$ref": "#/components/schemas/AttributeDetail"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesProductPropertyValue"
            },
            "description": "Value(s) of the product property",
            "nullable": true
          },
          "propertyType": {
            "type": "string",
            "description": "Property Type of the Property",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An attribute used as a property of a product"
      },
      "CatalogRuntimesProductOptionValue": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "attributeValueId": {
            "type": "integer",
            "description": "Unique Id for the Value",
            "format": "int32"
          },
          "stringValue": {
            "type": "string",
            "description": "Localized Value in the language of the locale code only available for dataType string",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "If true, this option is enabled and can be selected. During configuration, this returns false of this option value is invalid with other current selected options.",
            "nullable": true
          },
          "isSelected": {
            "type": "boolean",
            "description": "If true, this is the option that is currently selected. It can be either the default value or one that the shopper has selected.",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "If true, this is the default value that the merchant supplied.",
            "nullable": true
          },
          "deltaWeight": {
            "type": "number",
            "description": "How much this option weighs above the weight of the product.",
            "format": "double",
            "nullable": true
          },
          "deltaPrice": {
            "type": "number",
            "description": "How much this option costs above the cost of the product.",
            "format": "double",
            "nullable": true
          },
          "shopperEnteredValue": {
            "description": "How much this option costs above the cost of the product.",
            "nullable": true
          },
          "bundledProduct": {
            "$ref": "#/components/schemas/CatalogRuntimesBundledProduct"
          },
          "displayInfo": {
            "$ref": "#/components/schemas/CatalogRuntimesAttributeVocabularyValueDisplayInfo"
          }
        },
        "additionalProperties": false,
        "description": "Value of product option...\"red,\" \"white,\" \"blue.\""
      },
      "CatalogRuntimesProductOption": {
        "type": "object",
        "properties": {
          "attributeFQN": {
            "type": "string",
            "description": "Attribute fully qualified name",
            "nullable": true
          },
          "isRequired": {
            "type": "boolean",
            "description": "If true, the shopper must provide a value for the option before it can be purchased.",
            "nullable": true
          },
          "isMultiValue": {
            "type": "boolean",
            "description": "If true, more than one value can be assigned to an option. Only possible with stand-alone options.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesProductOptionValue"
            },
            "description": "Possible choices for an option, for example, values of the option \"Color\" can be \"red,\" \"white,\" and \"blue.\"",
            "nullable": true
          },
          "attributeDetail": {
            "$ref": "#/components/schemas/AttributeDetail"
          },
          "isProductImageGroupSelector": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "An option for a product and its list of values, if any. Also includes whether the option is configurable or stand-alone, whether it is required, whether it can have mulitple values and whether the shopper can supply its value (for example, engraved initials)."
      },
      "VariationOption": {
        "type": "object",
        "properties": {
          "valueSequence": {
            "type": "integer",
            "format": "int32"
          },
          "attributeFQN": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VariationSummary": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Merchant-created code associated with the variation product, for example, a SKU.",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariationOption"
            },
            "description": "The combination of options that resolve to this variation product",
            "nullable": true
          },
          "inventoryInfo": {
            "$ref": "#/components/schemas/CatalogRuntimesProductInventoryInfo"
          }
        },
        "additionalProperties": false,
        "description": "Details of a product, including its product code, name, description, options (if any), and current state--whether the product can be purchased given the options selected currently."
      },
      "CatalogRuntimesProductImageGroupTag": {
        "type": "object",
        "properties": {
          "attributeFqn": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CatalogRuntimesProductImageGroup": {
        "required": [
          "productImageGroupId"
        ],
        "type": "object",
        "properties": {
          "productImageGroupId": {
            "type": "string"
          },
          "productImageGroupTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesProductImageGroupTag"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CatalogRuntimesProductCollectionInfo": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Product Code of the collection",
            "nullable": true
          },
          "isPrimary": {
            "type": "boolean",
            "description": "True if the collection is the primary collection for the containing product."
          }
        },
        "additionalProperties": false
      },
      "CatalogRuntimesProductCollectionMemberKey": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is the key of the product collection member.  For now, it's just product code, but may expand in future"
      },
      "ProductCollectionMember": {
        "type": "object",
        "properties": {
          "memberKey": {
            "$ref": "#/components/schemas/CatalogRuntimesProductCollectionMemberKey"
          }
        },
        "additionalProperties": false,
        "description": "List of products that belong to a product collection product."
      },
      "CatalogRuntimesProduct": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Merchant-created code associated with the product, for example, a SKU.",
            "nullable": true
          },
          "purchaseLocation": {
            "type": "string",
            "description": "The location where the product is being purchased.. default is null. Products can have different prices\r\nby purchaseLocation via custom priceListResolution....",
            "nullable": true
          },
          "productSequence": {
            "type": "integer",
            "description": "System generated monotonically increasing sequence",
            "format": "int32",
            "nullable": true
          },
          "productUsage": {
            "type": "string",
            "description": "The UsageType of this product (Standard, Configurable, Bundle, Component, Collection)",
            "nullable": true
          },
          "fulfillmentTypesSupported": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Indicates the fulfillment types the product supports.",
            "nullable": true
          },
          "goodsType": {
            "type": "string",
            "description": "The GoodsType of the product (Physical, Digital, DigitalCredit....)",
            "nullable": true
          },
          "bundledProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesBundledProduct"
            },
            "description": "The list of Bundled products included in this product. This is only populated when ProductUsage=Bundle",
            "nullable": true
          },
          "content": {
            "$ref": "#/components/schemas/ProductContent"
          },
          "purchasableState": {
            "$ref": "#/components/schemas/ProductPurchasableState"
          },
          "isActive": {
            "type": "boolean",
            "description": "If true, the product exists. If not, the product should not appear in search results.",
            "nullable": true
          },
          "publishState": {
            "type": "string",
            "description": "Represents the published state of the product returned. Valid values for ValueType are defined in PublishStateConst.",
            "nullable": true
          },
          "price": {
            "$ref": "#/components/schemas/CatalogRuntimesProductPrice"
          },
          "priceRange": {
            "$ref": "#/components/schemas/ProductPriceRange"
          },
          "volumePriceBands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVolumePrice"
            },
            "description": "For products with bulk pricing... this will be populated with pricebands, depending on what options have been selected...",
            "nullable": true
          },
          "volumePriceRange": {
            "$ref": "#/components/schemas/ProductPriceRange"
          },
          "availableShippingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesDiscount"
            },
            "description": "List of potential shipping discounts available for this product.",
            "nullable": true
          },
          "productType": {
            "type": "string",
            "nullable": true
          },
          "productTypeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isTaxable": {
            "type": "boolean",
            "description": "If true, the product is subject to tax."
          },
          "isRecurring": {
            "type": "boolean",
            "description": "If true, the product can be purchased or fulfilled at regular intervals, for example, monthly billing or a subscription."
          },
          "pricingBehavior": {
            "$ref": "#/components/schemas/CatalogRuntimesProductPricingBehaviorInfo"
          },
          "inventoryInfo": {
            "$ref": "#/components/schemas/CatalogRuntimesProductInventoryInfo"
          },
          "createDate": {
            "type": "string",
            "description": "When the product was created with the product admin resource.",
            "format": "date-time"
          },
          "updateDate": {
            "type": "string",
            "description": "When the product was last modified with the product admin resource.",
            "format": "date-time"
          },
          "dateFirstAvailableInCatalog": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "catalogStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "catalogEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "daysAvailableInCatalog": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "upc": {
            "type": "string",
            "description": "UPC code of the product.",
            "nullable": true
          },
          "upCs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "UPC code of the products (populated for configurable products).",
            "nullable": true
          },
          "mfgPartNumber": {
            "type": "string",
            "description": "Manufacturer part number.",
            "nullable": true
          },
          "mfgPartNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Manufacturer part numbers (populated for configurable products).",
            "nullable": true
          },
          "variationProductCode": {
            "type": "string",
            "description": "When a configurable product has IsPurchasable=true on a GetProduct, this property will be populated for submission to cart.",
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesCategory"
            },
            "description": "List of categories to which this product belongs.",
            "nullable": true
          },
          "measurements": {
            "$ref": "#/components/schemas/CatalogRuntimesPackageMeasurements"
          },
          "isPackagedStandAlone": {
            "type": "boolean",
            "description": "Is this product shipped in its own package",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesProductProperty"
            },
            "description": "List of product properties. These are attributes that might apply to multiple products, for example, price, size, manufacturer. These attributes cannot be configured by the shopper.",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesProductOption"
            },
            "description": "List of the product's configurable options and extras. \r\nIncludes whether an option is configurable (for example, a T-shirt) or an Extra (for example, monogram or gift-wrapping).",
            "nullable": true
          },
          "variations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariationSummary"
            },
            "nullable": true
          },
          "validPriceLists": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "locationsInStock": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "slicingAttributeFQN": {
            "type": "string",
            "nullable": true
          },
          "productImageGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesProductImageGroup"
            },
            "description": "List of the image groups this product uses.\r\nImage groups are used to map different images to different product options.\r\nIf the product doesn't have options then all images will be in the default\r\nimage group.",
            "nullable": true
          },
          "sliceValue": {
            "type": "string",
            "description": "Readonly value of the selected value of the option corresponding to the Mozu.ProductRuntime.Contracts.Product.SlicingAttributeFQN",
            "nullable": true
          },
          "productCollections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesProductCollectionInfo"
            },
            "description": "List of product codes of product collections that this product is a member of.",
            "nullable": true
          },
          "productCollectionMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCollectionMember"
            },
            "description": "list of member products that are part of the collection\r\nThis requires that the ProductUsage be set to Collection",
            "nullable": true
          },
          "collectionMembersProductContent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductContent"
            },
            "description": "Only used for indexing",
            "nullable": true
          },
          "score": {
            "type": "number",
            "description": "The item's search engine relevancy score.",
            "format": "double"
          },
          "personalizationScore": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Details of a product, including its product code, name, description, options (if any), and current state--whether the product can be purchased given the options selected currently."
      },
      "CatalogRuntimesProductCollection": {
        "type": "object",
        "properties": {
          "nextCursorMark": {
            "type": "string",
            "description": "If a cursorMark is provided on the request, then the nextCursorMark will be populated on the response.\r\nProvide this value as the cursorMark argument on the next request. If a cursorMark is provided on the request and the nextCursorMark value is null, then the end of the resultset was reached",
            "nullable": true
          },
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesProduct"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductForIndexing": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CatalogRuntimesProduct"
          }
        ],
        "properties": {
          "slices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesProduct"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductOptionSelection": {
        "type": "object",
        "properties": {
          "attributeFQN": {
            "type": "string",
            "description": "Fully Qualified Name of the selected option's attribute",
            "nullable": true
          },
          "value": {
            "description": "Value of the selected option",
            "nullable": true
          },
          "attributeValueId": {
            "type": "integer",
            "description": "The unique ValueId of the Attribute (this can be sent as an alternative the to the AttributeFqn and Value)",
            "format": "int32",
            "nullable": true
          },
          "shopperEnteredValue": {
            "description": "Value that shopper entered if this is an Extra of VaolueType ShopperEntered.  This allows shopper data entry (such as the shopper's initials).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Name of the option that has been selected, and, if this is a stand-alone option, the value that the shopper entered."
      },
      "ProductOptionSelections": {
        "type": "object",
        "properties": {
          "variationProductCode": {
            "type": "string",
            "description": "For a product with options, the code of the product variation that represents the current selection of product options.",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductOptionSelection"
            },
            "description": "List of the product options that the shopper has currently selected.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "If the product has configurable options, the current state of the shopper's selections."
      },
      "ConfiguredProduct": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Merchant-created code associated with the product, for example, a SKU.",
            "nullable": true
          },
          "purchaseLocation": {
            "type": "string",
            "description": "The location where the product is being purchased.. default is null. Products can have different prices\r\nby purchaseLocation via custom priceListResolution....",
            "nullable": true
          },
          "fulfillmentTypesSupported": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Indicates the fulfillment types the product supports.",
            "nullable": true
          },
          "variationProductCode": {
            "type": "string",
            "description": "For a product with options, the code of the product variation that represents the current selection of product options. \r\nQuestion: is this right?",
            "nullable": true
          },
          "upc": {
            "type": "string",
            "description": "UPC code of the product.",
            "nullable": true
          },
          "mfgPartNumber": {
            "type": "string",
            "description": "Manufacturer part number.",
            "nullable": true
          },
          "purchasableState": {
            "$ref": "#/components/schemas/ProductPurchasableState"
          },
          "priceRange": {
            "$ref": "#/components/schemas/ProductPriceRange"
          },
          "volumePriceBands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVolumePrice"
            },
            "description": "For products with bulk pricing... this will be populated with pricebands, depending on what options have been selected...",
            "nullable": true
          },
          "volumePriceRange": {
            "$ref": "#/components/schemas/ProductPriceRange"
          },
          "price": {
            "$ref": "#/components/schemas/CatalogRuntimesProductPrice"
          },
          "availableShippingDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesDiscount"
            },
            "description": "List of potential shipping discounts available for this product.",
            "nullable": true
          },
          "measurements": {
            "$ref": "#/components/schemas/CatalogRuntimesPackageMeasurements"
          },
          "inventoryInfo": {
            "$ref": "#/components/schemas/CatalogRuntimesProductInventoryInfo"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesProductOption"
            },
            "description": "Remaining options and option values that can be selected given the shopper's current selection of options.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesProductProperty"
            },
            "description": "Remaining options and option values that can be selected given the shopper's current selection of options.",
            "nullable": true
          },
          "priceListEntryTypeProperty": {
            "$ref": "#/components/schemas/CatalogRuntimesProductProperty"
          },
          "productImages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductImage"
            },
            "description": "Images associated with the product.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Product as it is currently configured on the storefront. The configuration changes each time the shopper changes the product order."
      },
      "BundledProductSummary": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BundledProductBase"
          }
        ],
        "properties": {
          "productShortDescription": {
            "type": "string",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductValidationSummary": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "description": "Merchant-created code associated with the product, for example, a SKU.",
            "nullable": true
          },
          "purchaseLocation": {
            "type": "string",
            "description": "The location where the product is being purchased.. default is null. Products can have different prices\r\nby purchaseLocation via custom priceListResolution....",
            "nullable": true
          },
          "productUsage": {
            "type": "string",
            "description": "The UsageType of this product (Standard, Configurable, Bundle, Component)",
            "nullable": true
          },
          "fulfillmentTypesSupported": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Indicates the fulfillment types the product supports.",
            "nullable": true
          },
          "goodsType": {
            "type": "string",
            "description": "The GoodsType of the product (Physical, Digital, DigitalCredit....)",
            "nullable": true
          },
          "bundledProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BundledProductSummary"
            },
            "description": "The list of Bundled products included in this product. This is only populated when ProductUsage=Bundle",
            "nullable": true
          },
          "upc": {
            "type": "string",
            "description": "UPC code of the product.",
            "nullable": true
          },
          "mfgPartNumber": {
            "type": "string",
            "description": "Manufacturer part number.",
            "nullable": true
          },
          "variationProductCode": {
            "type": "string",
            "description": "For a product with options, the code of the product variation that represents the current selection of product options.",
            "nullable": true
          },
          "purchasableState": {
            "$ref": "#/components/schemas/ProductPurchasableState"
          },
          "price": {
            "$ref": "#/components/schemas/CatalogRuntimesProductPrice"
          },
          "measurements": {
            "$ref": "#/components/schemas/CatalogRuntimesPackageMeasurements"
          },
          "isPackagedStandAlone": {
            "type": "boolean",
            "description": "Is this product shipped in its own package",
            "nullable": true
          },
          "image": {
            "$ref": "#/components/schemas/ProductImage"
          },
          "productShortDescription": {
            "type": "string",
            "description": "Brief description of the product typically used when the product is displayed in a list or search results.",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "description": "Name of the product.",
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesCategory"
            },
            "description": "Categories to which the product belongs.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesProductProperty"
            },
            "description": "List of product Properties.",
            "nullable": true
          },
          "pricingBehavior": {
            "$ref": "#/components/schemas/CatalogRuntimesProductPricingBehaviorInfo"
          },
          "inventoryInfo": {
            "$ref": "#/components/schemas/CatalogRuntimesProductInventoryInfo"
          },
          "isTaxable": {
            "type": "boolean",
            "description": "If true, the product listed on the live order is subject to tax."
          },
          "productType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DiscountSelections": {
        "type": "object",
        "properties": {
          "discountIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Discount Ids",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Discount Selections"
      },
      "DiscountValidationSummary": {
        "type": "object",
        "properties": {
          "applicableDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesDiscount"
            },
            "description": "Applicable/Valid Discounts",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Provides a summary (more accurately it is a container) for valid discounts for potentially valid discounts for a product"
      },
      "LocationInventory": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "nullable": true
          },
          "locationCode": {
            "type": "string",
            "nullable": true
          },
          "stockAvailable": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "softStockAvailable": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sku": {
            "type": "string",
            "nullable": true
          },
          "mfgPartNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The inventory for a product at a specific Location"
      },
      "LocationInventoryCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationInventory"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CatalogRuntimesInventoryTag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The tags for the inventory"
      },
      "LocationInventoryQuery": {
        "type": "object",
        "properties": {
          "locationCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "productCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "inventoryTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesInventoryTag"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The inventory for a product at a specific Location"
      },
      "ProductCostQuery": {
        "type": "object",
        "properties": {
          "productCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CatalogRuntimesProductCost": {
        "type": "object",
        "properties": {
          "productCode": {
            "type": "string",
            "nullable": true
          },
          "cost": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "The inventory for a product at a specific Location"
      },
      "ProductCostCollection": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesProductCost"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchSuggestion": {
        "type": "object",
        "properties": {
          "suggestionType": {
            "type": "string",
            "description": "The type of Suggestion (e.g. Term, Product, Category). \r\nWill be one of the values of the SuggestionTypeConst type.",
            "nullable": true
          },
          "suggestion": {
            "description": "A suggested entity based on the search query. Use the SuggestionType to determine the type of entity.\r\nCould be a SearchTerm, Product, or Category",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A suggested result based on the search query"
      },
      "SearchSuggestionGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Group Name",
            "nullable": true
          },
          "suggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchSuggestion"
            },
            "description": "List of related SearchSuggestions",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchSuggestionResult": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Text that the shopper types in a search query.",
            "nullable": true
          },
          "suggestionGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchSuggestionGroup"
            },
            "description": "List of SearchSuggestionGroups",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "List of items to suggest to the shopper who is entering a search query, for example, a search box on the storefront."
      },
      "RequestFilter": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VisualSearchResult": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            },
            "nullable": true
          },
          "trackingId": {
            "type": "string",
            "nullable": true
          },
          "pageId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductSearchRandomAccessCursor": {
        "type": "object",
        "properties": {
          "cursorMarks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A calculated set of cursor marks for a given query that can be accessed in any order, providing the ability to page through all results in random/paralellized order"
      },
      "BaseProductSearchResult": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesProduct"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FacetValue": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "isApplied": {
            "type": "boolean",
            "description": "True if this FacetValue was supplied as a facet value filter in the current search",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "Number of occurrences of FacetValue in result set.",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "description": "String representation of Facet Value",
            "nullable": true
          },
          "filterValue": {
            "type": "string",
            "description": "Submit this as a facet value filter",
            "nullable": true
          },
          "rangeQueryValueStart": {
            "type": "string",
            "description": "When range query Facet",
            "nullable": true
          },
          "rangeQueryValueEnd": {
            "type": "string",
            "description": "When range query Facet",
            "nullable": true
          },
          "parentFacetValue": {
            "type": "string",
            "description": "When hierarchical Facet",
            "nullable": true
          },
          "isDisplayed": {
            "type": "boolean",
            "description": "Indicates whether the FacetValue should be displayed"
          },
          "childrenFacetValues": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "When hierarchical Facet",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "CatalogRuntimesFacet": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "facetType": {
            "type": "string",
            "description": "Value, RangeQuery, Hierarchy",
            "nullable": true
          },
          "field": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "For faceted searches, name of the facet and list of facet values. For example, a facet called \"Brands\" may have the facet values \"Apple,\" \"Motorola,\" and \"Samsung.\""
      },
      "SolrDebugInfo": {
        "type": "object",
        "properties": {
          "searchTuningRuleCode": {
            "type": "string",
            "nullable": true
          },
          "boostedProductCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "blockedProductCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "boostQueries": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "boostFunctions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CandidateCorrection": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Collation query from search engine",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Spell correction"
      },
      "CatalogRuntimesSpellcheck": {
        "type": "object",
        "properties": {
          "candidateCorrections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateCorrection"
            },
            "nullable": true
          },
          "autoCorrected": {
            "type": "boolean",
            "nullable": true
          },
          "originalQuery": {
            "type": "string",
            "nullable": true
          },
          "correctedQuery": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Spellcheck related results"
      },
      "ProductSearchResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseProductSearchResult"
          }
        ],
        "properties": {
          "facets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogRuntimesFacet"
            },
            "nullable": true
          },
          "solrDebugInfo": {
            "$ref": "#/components/schemas/SolrDebugInfo"
          },
          "searchRedirect": {
            "type": "string",
            "nullable": true
          },
          "searchEngine": {
            "type": "string",
            "nullable": true
          },
          "nextCursorMark": {
            "type": "string",
            "nullable": true
          },
          "spellcheck": {
            "$ref": "#/components/schemas/CatalogRuntimesSpellcheck"
          }
        },
        "additionalProperties": false,
        "description": "Products and facets returned from search criteria supplied in a ProductSearch query."
      },
      "PreviewCampaignSettings": {
        "type": "object",
        "properties": {
          "campaignName": {
            "type": "string",
            "nullable": true
          },
          "campaignStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "campaignEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "siteSearchSettings": {
            "$ref": "#/components/schemas/CampaignSiteSearchSettings"
          },
          "productSuggestSettings": {
            "$ref": "#/components/schemas/CampaignProductSuggestSettings"
          },
          "listingSettings": {
            "$ref": "#/components/schemas/CampaignListingSettings"
          }
        },
        "additionalProperties": false
      },
      "FindProductsPreviewParameters": {
        "type": "object",
        "properties": {
          "mid": {
            "type": "string",
            "nullable": true
          },
          "query": {
            "type": "string",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "startIndex": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "searchType": {
            "type": "string",
            "nullable": true
          },
          "fieldList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "searchSettings": {
            "type": "string",
            "nullable": true
          },
          "campaignSettings": {
            "$ref": "#/components/schemas/PreviewCampaignSettings"
          }
        },
        "additionalProperties": false,
        "description": "This should follow the immutable DTO pattern"
      },
      "ProductSearchPreviewResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseProductSearchResult"
          }
        ],
        "additionalProperties": false,
        "description": "Products and search information returned for search preview query."
      },
      "CartSettings": {
        "type": "object",
        "properties": {
          "enableHandlingFee": {
            "type": "boolean"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Cart settings defined for this site."
      },
      "SupportedCard": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "friendlyName": {
            "type": "string",
            "nullable": true
          },
          "paymentType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GatewayCredentialFieldDefinition": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "adminDisplayOrder": {
            "type": "integer",
            "format": "int32"
          },
          "isPublic": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PreAuthorizeTransactionTypeDataContract": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PreAuthorizeDefinition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "preAuthorizeTestUrl": {
            "type": "string",
            "nullable": true
          },
          "preAuthorizeProdUrl": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/PreAuthorizeTransactionTypeDataContract"
          }
        },
        "additionalProperties": false
      },
      "GatewayDefinition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "prodServiceURL": {
            "type": "string",
            "nullable": true
          },
          "testServiceURL": {
            "type": "string",
            "nullable": true
          },
          "integrationImplTypeName": {
            "type": "string",
            "nullable": true
          },
          "supportedCards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportedCard"
            },
            "nullable": true
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "credentialDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GatewayCredentialFieldDefinition"
            },
            "nullable": true
          },
          "preAuthorizeDefinition": {
            "$ref": "#/components/schemas/PreAuthorizeDefinition"
          },
          "administationUi": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GatewayCredentialFieldValue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "isValueSet": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GatewayAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "gatewayDefinitionId": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "credentialFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GatewayCredentialFieldValue"
            },
            "nullable": true
          },
          "binPatterns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SiteGatewaySupportedCard": {
        "type": "object",
        "properties": {
          "gatewayAccountId": {
            "type": "string",
            "nullable": true
          },
          "processingGatewayAccountId": {
            "type": "string",
            "nullable": true
          },
          "cardTypeId": {
            "type": "string",
            "nullable": true
          },
          "paymentType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Gateway": {
        "type": "object",
        "properties": {
          "gatewayDefinition": {
            "$ref": "#/components/schemas/GatewayDefinition"
          },
          "areGatewayCredentialFieldsSet": {
            "type": "boolean",
            "description": "Returns true if Gateway CredentialsField is set. For security purposes, Gateway subresource CredentialFields will not be returned."
          },
          "gatewayAccount": {
            "$ref": "#/components/schemas/GatewayAccount"
          },
          "supportedCards": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Which credit cards the Merchant supports",
            "nullable": true
          },
          "siteGatewaySupportedCards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteGatewaySupportedCard"
            },
            "description": "Which credit cards the Merchant supports",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocalizedContent": {
        "type": "object",
        "properties": {
          "localeCode": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VocabularyValue": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizedContent"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ThirdPartyCredentialField": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The displayable name of this credential field",
            "nullable": true
          },
          "apiName": {
            "type": "string",
            "description": "The name of this credential that should be used for web requests.",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The value for this credential that should be used for web requests.",
            "nullable": true
          },
          "vocabularyValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VocabularyValue"
            },
            "nullable": true
          },
          "inputType": {
            "type": "string",
            "description": "The input field type for the value.",
            "nullable": true
          },
          "isSensitive": {
            "type": "boolean",
            "description": "the value holds sensitive information.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes the name and value of a third party credential field."
      },
      "ExternalPaymentWorkflowDefinition": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Should be one of Contracts.Constants.ThirdPartyWorkflowNames.",
            "nullable": true
          },
          "namespace": {
            "type": "string",
            "nullable": true
          },
          "fullyQualifiedName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Information about this definition for display purposes in the 'Payment and Checkout Settings'\r\nadmin ui.  This field may contain valid html tags",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean"
          },
          "isLegacy": {
            "type": "boolean",
            "description": "Indicates if this is a legacy implementation using ARC only\r\nor using the new extensible implementation.",
            "nullable": true
          },
          "credentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ThirdPartyCredentialField"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This class describes credentials and enablement for the various third-party payment workflows that we will integrate with.\r\nExamples include Paypal Express, Amazon Payments, Google Wallet, etc."
      },
      "SiteSettingsPurchaseOrderPaymentTerm": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "A unique code for purchase order payment term",
            "nullable": true
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence Number",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "Value of the net term",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SiteSettingsPurchaseOrderCustomField": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique code/name for memo field",
            "nullable": true
          },
          "label": {
            "type": "string",
            "description": "Memo field label that appers on the store front",
            "nullable": true
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence Number",
            "format": "int32"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Whether this memo field is enabled"
          },
          "isRequired": {
            "type": "boolean",
            "description": "Whether this memo field is mandatory to be filled in when placing an order"
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderPaymentDefinition": {
        "type": "object",
        "properties": {
          "isEnabled": {
            "type": "boolean",
            "description": "Is purchase order payment enabled"
          },
          "paymentTerms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteSettingsPurchaseOrderPaymentTerm"
            },
            "description": "Allowed net terms",
            "nullable": true
          },
          "allowSplitPayment": {
            "type": "boolean",
            "description": "Indicates whether another payment can be used with the purchase order"
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteSettingsPurchaseOrderCustomField"
            },
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderJob": {
        "type": "object",
        "properties": {
          "isEnabled": {
            "type": "boolean",
            "description": "Specifies whether this job should run."
          },
          "interval": {
            "type": "integer",
            "description": "How often this job should run in minutes.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Contains settings for a job that can run on a regular basis."
      },
      "FlexibleCaptureFlow": {
        "type": "object",
        "properties": {
          "captureBy": {
            "type": "string",
            "description": "Look at the `ShipmentState` or the `ShipmentWorkflow`.",
            "nullable": true
          },
          "captureOn": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Which shipment states or workflow statuses are considered eligible for capture.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specifies a pre-fulfilled shipment state that is eligible for capture."
      },
      "FlexibleCapture": {
        "type": "object",
        "properties": {
          "sthFlow": {
            "$ref": "#/components/schemas/FlexibleCaptureFlow"
          },
          "bopisFlow": {
            "$ref": "#/components/schemas/FlexibleCaptureFlow"
          }
        },
        "additionalProperties": false,
        "description": "Contains settings specifying whether the auto-capture payment feature should consider pre-fulfilled shipments."
      },
      "AutoCaptureJob": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderJob"
          }
        ],
        "properties": {
          "flexibleCapture": {
            "$ref": "#/components/schemas/FlexibleCapture"
          },
          "forceCaptureOnFirstCapture": {
            "type": "boolean",
            "description": "Specifies whether all available funds should be collected once any shipment is ready for capture."
          }
        },
        "additionalProperties": false,
        "description": "Contains settings for the auto-capture payment feature."
      },
      "ForceCaptureJob": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderJob"
          }
        ],
        "properties": {
          "captureAfterDays": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Contains settings for when payments should be auto-captured regardless of shipment status."
      },
      "OrderJobSettings": {
        "type": "object",
        "properties": {
          "autoCaptureJob": {
            "$ref": "#/components/schemas/AutoCaptureJob"
          },
          "forceCaptureJob": {
            "$ref": "#/components/schemas/ForceCaptureJob"
          }
        },
        "additionalProperties": false,
        "description": "Contains settings for the auto-capture payment feature."
      },
      "PaymentSettings": {
        "type": "object",
        "properties": {
          "gateways": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Gateway"
            },
            "nullable": true
          },
          "externalPaymentWorkflowDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalPaymentWorkflowDefinition"
            },
            "nullable": true
          },
          "payByMail": {
            "type": "boolean"
          },
          "purchaseOrder": {
            "$ref": "#/components/schemas/PurchaseOrderPaymentDefinition"
          },
          "jobSettings": {
            "$ref": "#/components/schemas/OrderJobSettings"
          },
          "paymentRanking": {
            "type": "string",
            "nullable": true
          },
          "refundRanking": {
            "type": "string",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Payment gateway settings defined for this site. A payment gateway is an e-commerce application service provider that authorizes \r\npayments for e-businesses and online retailers. You can define multiple payment gateway settings but only one is active at a time. \r\nAuthorize.net is the only payment gateway supported currently."
      },
      "CustomerCheckoutSettings": {
        "type": "object",
        "properties": {
          "customerCheckoutType": {
            "type": "string",
            "description": "Checkout login setting. Value can be either \"LoginOptional,\" where shoppers are prompted to sign in\r\nbut are not required to do so, or \"LoginRequired,\" where shopppers must login before purchasing.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Checkout requirements for customers, for example, whether they must login before purchasing from your store. \r\nOther customized checkout requirements can be defined."
      },
      "ThirdPartyPaymentSetting": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "paymentProcessingFlowType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderProcessingSettings": {
        "type": "object",
        "properties": {
          "paymentProcessingFlowType": {
            "type": "string",
            "description": "Credit card payment authorization setting. Options can be authorize and charge the shopper's credit card when the order is placed, \"AuthorizeAndCaptureOnOrderPlacement,\" \r\nauthorize the shopper's credit card when the order is placed and charge the credit card when the shipped, \"AuthorizeOnOrderPlacementAndCaptureOnOrderShipment,\" \r\nor authorize and charge the shopper's credit card for the full amount when the order is shipped, \"AuthorizeAndCaptureOnOrderShipment.\"",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "useOverridePriceToCalculateDiscounts": {
            "type": "boolean",
            "description": "Use the override price on products to calculate discounts"
          },
          "abandonedOrderThresholdInMinutes": {
            "type": "integer",
            "description": "Abandoned Order Threshold in minutes indicates the number of minutes until a pending order is considered abandoned.",
            "format": "int32",
            "nullable": true
          },
          "giftCardProcessingType": {
            "type": "string",
            "description": "Gift card payment authorization setting. Options can be authorize and charge the shopper's credit card when the order is placed, \"AuthorizeAndCaptureOnOrderPlacement,\" \r\nauthorize the shopper's gift card when the order is placed and charge the gift card when it is shipped, \"AuthorizeOnOrderPlacementAndCaptureOnOrderShipment,\" \r\nor authorize and charge the shopper's gift card for the full amount when the order is shipped, \"AuthorizeAndCaptureOnOrderShipment.\"",
            "nullable": true
          },
          "giftCardRefundCreditProcessingType": {
            "type": "string",
            "description": "GiftCrd Refund/Credit flow, wither to existing or new giftcard",
            "nullable": true
          },
          "thirdPartyPaymentSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ThirdPartyPaymentSetting"
            },
            "description": "Order processing settings for Third party payments\r\nEx- ApplePay using AuthorizeOnOrderPlacementAndCaptureOnOrderShipment for processing orders",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order processing (credit card payment authorization) setting defined for this site. \r\nCan choose when the shopper’s credit card is authorized and charged. Possibilities include, \"authorize and charge the shopper's credit card for the full \r\norder amount when the order is placed,\" \"authorize the shopper's credit card for the full amount when the order is placed and charge the credit card when the order is shipped,\" or \r\n\"authorize and charge the shopper's credit card for the full amount when the order is shipped.\""
      },
      "CheckoutSettings": {
        "type": "object",
        "properties": {
          "paymentSettings": {
            "$ref": "#/components/schemas/PaymentSettings"
          },
          "customerCheckoutSettings": {
            "$ref": "#/components/schemas/CustomerCheckoutSettings"
          },
          "orderProcessingSettings": {
            "$ref": "#/components/schemas/OrderProcessingSettings"
          }
        },
        "additionalProperties": false,
        "description": "Checkout and payment settings defined for this site. Can set which payment gateway to use, whether a shopper is required to login to place an order,\r\nwhen credit cards are authorized and charged (when the order is placed or shipped), and, in the future, \r\nwhether the checkout page displays an option for shoppers to receive your email marketing campaigns."
      },
      "BPMConfiguration": {
        "type": "object",
        "properties": {
          "containerId": {
            "type": "string",
            "nullable": true
          },
          "processId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FulfillmentJob": {
        "type": "object",
        "properties": {
          "isEnabled": {
            "type": "boolean"
          },
          "interval": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PickupReminderJob": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FulfillmentJob"
          }
        ],
        "additionalProperties": false
      },
      "ReleaseBackorderJob": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FulfillmentJob"
          }
        ],
        "additionalProperties": false
      },
      "FulfillmentJobSettings": {
        "type": "object",
        "properties": {
          "pickupReminderJob": {
            "$ref": "#/components/schemas/PickupReminderJob"
          },
          "releaseBackorderJob": {
            "$ref": "#/components/schemas/ReleaseBackorderJob"
          }
        },
        "additionalProperties": false
      },
      "ShippingMethod": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Cancellation": {
        "type": "object",
        "properties": {
          "onParentShipment": {
            "type": "boolean"
          },
          "restrictedSteps": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShipToStore": {
        "type": "object",
        "properties": {
          "isEnabled": {
            "type": "boolean"
          },
          "alwaysCreateTransferShipments": {
            "type": "boolean"
          },
          "shippingMethod": {
            "$ref": "#/components/schemas/ShippingMethod"
          },
          "cancellation": {
            "$ref": "#/components/schemas/Cancellation"
          }
        },
        "additionalProperties": false
      },
      "CreateShipmentsOnPendingReview": {
        "type": "object",
        "properties": {
          "isEnabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "FulfillerSettings": {
        "type": "object",
        "properties": {
          "editShipment": {
            "type": "boolean"
          },
          "returnOrCreditOnImportedOrders": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "FulfillmentSettings": {
        "type": "object",
        "properties": {
          "defaultBackOrderDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "paymentVoidAndReauth": {
            "type": "boolean",
            "nullable": true
          },
          "bpmConfiguration": {
            "$ref": "#/components/schemas/BPMConfiguration"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "fulfillmentJobSettings": {
            "$ref": "#/components/schemas/FulfillmentJobSettings"
          },
          "shipToStore": {
            "$ref": "#/components/schemas/ShipToStore"
          },
          "createShipmentsOnPendingReview": {
            "$ref": "#/components/schemas/CreateShipmentsOnPendingReview"
          },
          "fulfillerSettings": {
            "$ref": "#/components/schemas/FulfillerSettings"
          },
          "actionOnBOPISReject": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Mapping": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "beforeRouting": {
            "type": "boolean",
            "nullable": true
          },
          "listFqn": {
            "type": "string",
            "nullable": true
          },
          "docId": {
            "type": "string",
            "nullable": true
          },
          "mapTo": {
            "type": "string",
            "nullable": true
          },
          "facetId": {
            "type": "string",
            "nullable": true
          },
          "pattern": {
            "type": "string",
            "nullable": true
          },
          "replacement": {
            "type": "string",
            "nullable": true
          },
          "mappings": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Validator": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "pattern": {
            "type": "string",
            "nullable": true
          },
          "listFqn": {
            "type": "string",
            "nullable": true
          },
          "field": {
            "type": "string",
            "nullable": true
          },
          "docId": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "attributeFQN": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Route": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "nullable": true
          },
          "defaults": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "internalRoute": {
            "type": "string",
            "nullable": true
          },
          "functionId": {
            "type": "string",
            "nullable": true
          },
          "mappings": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "canonical": {
            "type": "boolean",
            "nullable": true
          },
          "validators": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "urlScheme": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomRouteSettings": {
        "type": "object",
        "properties": {
          "mappings": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Mapping"
            },
            "nullable": true
          },
          "validators": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Validator"
            },
            "nullable": true
          },
          "routes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Route"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CacheSettings": {
        "type": "object",
        "properties": {
          "cdnCacheBustKey": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaxableTerritory": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "stateOrProvinceCode": {
            "type": "string",
            "nullable": true
          },
          "isShippingTaxable": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailTransactionSettings": {
        "type": "object",
        "properties": {
          "backInStock": {
            "type": "boolean",
            "nullable": true
          },
          "orderChanged": {
            "type": "boolean",
            "nullable": true
          },
          "orderShipped": {
            "type": "boolean",
            "nullable": true
          },
          "orderFulfillmentDetailsChanged": {
            "type": "boolean",
            "nullable": true
          },
          "shopperLoginCreated": {
            "type": "boolean",
            "nullable": true
          },
          "shopperPasswordReset": {
            "type": "boolean",
            "nullable": true
          },
          "returnCreated": {
            "type": "boolean",
            "nullable": true
          },
          "returnAuthorized": {
            "type": "boolean",
            "nullable": true
          },
          "returnUpdated": {
            "type": "boolean",
            "nullable": true
          },
          "returnRejected": {
            "type": "boolean",
            "nullable": true
          },
          "returnCancelled": {
            "type": "boolean",
            "nullable": true
          },
          "returnClosed": {
            "type": "boolean",
            "nullable": true
          },
          "refundCreated": {
            "type": "boolean",
            "nullable": true
          },
          "storeCreditCreated": {
            "type": "boolean",
            "nullable": true
          },
          "storeCreditUpdated": {
            "type": "boolean",
            "nullable": true
          },
          "giftCardCreated": {
            "type": "boolean",
            "nullable": true
          },
          "orderCancellation": {
            "type": "boolean",
            "nullable": true
          },
          "orderCancellationFailed": {
            "type": "boolean",
            "nullable": true
          },
          "backorder": {
            "type": "boolean",
            "nullable": true
          },
          "shipmentConfirmation": {
            "type": "boolean",
            "nullable": true
          },
          "orderPickupReady": {
            "type": "boolean",
            "nullable": true
          },
          "orderPickupReminder": {
            "type": "boolean",
            "nullable": true
          },
          "shipmentBackorderDateChanged": {
            "type": "boolean",
            "nullable": true
          },
          "shipmentItemCanceled": {
            "type": "boolean",
            "nullable": true
          },
          "shipmentAssigned": {
            "type": "boolean",
            "nullable": true
          },
          "transferShipmentCreated": {
            "type": "boolean",
            "nullable": true
          },
          "transferShipmentShipped": {
            "type": "boolean",
            "nullable": true
          },
          "partialPickupReady": {
            "type": "boolean",
            "nullable": true
          },
          "transferShipmentCreatedByFulfiller": {
            "type": "boolean",
            "nullable": true
          },
          "intransitConfirmation": {
            "type": "boolean",
            "nullable": true
          },
          "curbsideReady": {
            "type": "boolean",
            "nullable": true
          },
          "partialCurbsideReady": {
            "type": "boolean",
            "nullable": true
          },
          "gatewayGiftCardCreated": {
            "type": "boolean",
            "nullable": true
          },
          "customerIntransit": {
            "type": "boolean",
            "nullable": true
          },
          "customerAtCurbside": {
            "type": "boolean",
            "nullable": true
          },
          "accountDenied": {
            "type": "boolean",
            "nullable": true
          },
          "accountInactive": {
            "type": "boolean",
            "nullable": true
          },
          "accountCreated": {
            "type": "boolean",
            "nullable": true
          },
          "quoteInReview": {
            "type": "boolean",
            "nullable": true
          },
          "quoteReadyForCheckout": {
            "type": "boolean",
            "nullable": true
          },
          "quoteExpired": {
            "type": "boolean",
            "nullable": true
          },
          "deliveryDateUpdated": {
            "type": "boolean",
            "nullable": true
          },
          "readyForDelivery": {
            "type": "boolean",
            "nullable": true
          },
          "subscriptionActivated": {
            "type": "boolean",
            "nullable": true
          },
          "subscriptionPaused": {
            "type": "boolean",
            "nullable": true
          },
          "subscriptionErrored": {
            "type": "boolean",
            "nullable": true
          },
          "subscriptionCancelled": {
            "type": "boolean",
            "nullable": true
          },
          "subscriptionFrequencyUpdated": {
            "type": "boolean",
            "nullable": true
          },
          "subscriptionOrderedNow": {
            "type": "boolean",
            "nullable": true
          },
          "subscriptionNextOrderDateUpdated": {
            "type": "boolean",
            "nullable": true
          },
          "subscriptionPaymentUpdated": {
            "type": "boolean",
            "nullable": true
          },
          "subscriptionShippingInfoUpdated": {
            "type": "boolean",
            "nullable": true
          },
          "subscriptionItemAdded": {
            "type": "boolean",
            "nullable": true
          },
          "subscriptionItemsCancelled": {
            "type": "boolean",
            "nullable": true
          },
          "subscriptionSkipped": {
            "type": "boolean",
            "nullable": true
          },
          "subscriptionItemQuantityUpdated": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ViewAuthorizations": {
        "type": "object",
        "properties": {
          "requireAuthForLive": {
            "type": "boolean"
          },
          "requireAuthForPending": {
            "type": "boolean"
          },
          "enforceSitewideSSL": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailTypeSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "senderEmailAddressOverride": {
            "type": "string",
            "nullable": true
          },
          "senderEmailAliasOverride": {
            "type": "string",
            "nullable": true
          },
          "replyToEmailAddressOverride": {
            "type": "string",
            "nullable": true
          },
          "bccEmailAddressOverride": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SMSTransactionSettings": {
        "type": "object",
        "properties": {
          "shipmentItemCanceled": {
            "type": "boolean",
            "nullable": true
          },
          "shipmentAssigned": {
            "type": "boolean",
            "nullable": true
          },
          "customerIntransit": {
            "type": "boolean",
            "nullable": true
          },
          "customerAtCurbside": {
            "type": "boolean",
            "nullable": true
          },
          "intransitConfirmation": {
            "type": "boolean",
            "nullable": true
          },
          "shipmentFulfilled": {
            "type": "boolean",
            "nullable": true
          },
          "orderConfirmation": {
            "type": "boolean",
            "nullable": true
          },
          "curbsideReady": {
            "type": "boolean",
            "nullable": true
          },
          "storeItemsCanceled": {
            "type": "boolean",
            "nullable": true
          },
          "optOutAcknowledgement": {
            "type": "boolean",
            "nullable": true
          },
          "orderPickupReady": {
            "type": "boolean",
            "nullable": true
          },
          "orderPickupReminder": {
            "type": "boolean",
            "nullable": true
          },
          "customerAtStore": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SMSTypeSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReCaptchaSettings": {
        "type": "object",
        "properties": {
          "siteKey": {
            "type": "string",
            "nullable": true
          },
          "validScore": {
            "type": "number",
            "format": "double"
          },
          "secret": {
            "type": "string",
            "nullable": true
          },
          "actions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GeneralSettings": {
        "type": "object",
        "properties": {
          "isMozuWebSite": {
            "type": "boolean"
          },
          "websiteName": {
            "type": "string",
            "nullable": true
          },
          "customCdnHostName": {
            "type": "string",
            "nullable": true
          },
          "missingImageSubstitute": {
            "type": "string",
            "nullable": true
          },
          "cacheSettings": {
            "$ref": "#/components/schemas/CacheSettings"
          },
          "templateSiteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "siteTimeZone": {
            "type": "string",
            "nullable": true
          },
          "siteTimeFormat": {
            "type": "string",
            "nullable": true
          },
          "senderEmailAddress": {
            "type": "string",
            "nullable": true
          },
          "senderEmailAlias": {
            "type": "string",
            "nullable": true
          },
          "replyToEmailAddress": {
            "type": "string",
            "nullable": true
          },
          "bccEmailAddress": {
            "type": "string",
            "nullable": true
          },
          "favIconPath": {
            "type": "string",
            "nullable": true
          },
          "favIconMobilePath": {
            "type": "string",
            "nullable": true
          },
          "logoText": {
            "type": "string",
            "nullable": true
          },
          "logoPath": {
            "type": "string",
            "nullable": true
          },
          "theme": {
            "type": "string",
            "nullable": true
          },
          "mobileTheme": {
            "type": "string",
            "nullable": true
          },
          "tabletTheme": {
            "type": "string",
            "nullable": true
          },
          "googleAnalyticsCode": {
            "type": "string",
            "nullable": true
          },
          "isGoogleAnalyticsEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "isGoogleAnalyticsEcommerceEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "isWishlistCreationEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "isMultishipEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "isAddressValidationEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "allowInvalidAddresses": {
            "type": "boolean",
            "nullable": true
          },
          "taxableTerritories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxableTerritory"
            },
            "nullable": true
          },
          "supressedEmailTransactions": {
            "$ref": "#/components/schemas/EmailTransactionSettings"
          },
          "emailTransactionsOnlyOnRequest": {
            "$ref": "#/components/schemas/EmailTransactionSettings"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          },
          "viewAuthorizations": {
            "$ref": "#/components/schemas/ViewAuthorizations"
          },
          "customRoutes": {
            "$ref": "#/components/schemas/CustomRouteSettings"
          },
          "emailTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailTypeSetting"
            },
            "nullable": true
          },
          "supressedSmsTransactions": {
            "$ref": "#/components/schemas/SMSTransactionSettings"
          },
          "smsTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SMSTypeSetting"
            },
            "nullable": true
          },
          "reCaptchaSettings": {
            "$ref": "#/components/schemas/ReCaptchaSettings"
          }
        },
        "additionalProperties": false
      },
      "Job": {
        "type": "object",
        "properties": {
          "isEnabled": {
            "type": "boolean"
          },
          "timesOfDay": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryExportJob": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Job"
          }
        ],
        "additionalProperties": false
      },
      "InventorySettings": {
        "type": "object",
        "properties": {
          "inventoryExportJob": {
            "$ref": "#/components/schemas/InventoryExportJob"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "ReturnSettings": {
        "type": "object",
        "properties": {
          "defaultProcessingFee": {
            "type": "number",
            "format": "double"
          },
          "defaultShippingLocation": {
            "type": "string",
            "nullable": true
          },
          "createLabelOnFulfillment": {
            "type": "boolean"
          },
          "displayRefundToNewGiftCard": {
            "type": "boolean"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "SiteShippingHandlingFee": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Site setting for the name that appears as the sender of the shipping origin.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The site setting that specifies the store's handling fees"
      },
      "SiteShippingSignatureRequirement": {
        "type": "object",
        "properties": {
          "minimumValueThreshold": {
            "type": "number",
            "description": "If set, this is exact amount a shipment must be greater than to trigger usage of the IsSignatureRequired property",
            "format": "double",
            "nullable": true
          },
          "isSignatureRequired": {
            "type": "boolean",
            "description": "Is Signature Required?",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The site setting that specifies the store's handling fees"
      },
      "SiteShippingSettings": {
        "type": "object",
        "properties": {
          "orderHandlingFee": {
            "$ref": "#/components/schemas/SiteShippingHandlingFee"
          },
          "signatureRequirement": {
            "$ref": "#/components/schemas/SiteShippingSignatureRequirement"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Defines the site setting for the active shipping rate provider that rate provider calculates domestic and international shipping rates.\r\nYour site may have multiple shipping rate providers, for example, FedEx, DHL, USPS. However, only one shipping rate provider can be active at the same time."
      },
      "SubscriptionSettings": {
        "type": "object",
        "properties": {
          "continuityOrderDateOffset": {
            "type": "integer",
            "description": "Specifies the number of days before the next order date to create the continuity order.",
            "format": "int32"
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false,
        "description": "Subscription settings defined or this site"
      },
      "FieldTypeDefinitionRepositoryEntry": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "nullable": true
          },
          "solrFieldType": {
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "usageRestrictions": {
            "description": "Restricts the fields used by specific SOLR analyzer.\r\nOriginally developed for entity entraction/ aka noun_extraction\r\n(e.g. searching for sofa tables should return tables, not sofas)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "SchemaDefinitionField": {
        "required": [
          "fieldDefinition",
          "fieldName"
        ],
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string"
          },
          "fieldDefinition": {
            "type": "string"
          },
          "friendlyName": {
            "type": "string",
            "nullable": true
          },
          "searchFieldName": {
            "type": "string",
            "nullable": true
          },
          "ingestFieldName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SpellingSchemaDefinitionField": {
        "type": "object",
        "properties": {
          "ingestFieldName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SchemaDefinition": {
        "required": [
          "fields",
          "language"
        ],
        "type": "object",
        "properties": {
          "language": {
            "type": "string"
          },
          "isPublished": {
            "type": "boolean"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaDefinitionField"
            }
          },
          "spellingFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpellingSchemaDefinitionField"
            },
            "description": "List of attributes used in the spelling dictionary",
            "nullable": true
          },
          "spellCorrectEnabled": {
            "type": "boolean",
            "description": "Returns boolean if contains any SpellingFields members.",
            "nullable": true
          },
          "auditInfo": {
            "$ref": "#/components/schemas/AdminUserAuditInfo"
          }
        },
        "additionalProperties": false
      },
      "AdminUserSite": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTenantEntity"
          }
        ],
        "properties": {
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "catalogId": {
            "type": "integer",
            "format": "int32"
          },
          "localeCode": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "domain": {
            "type": "string",
            "nullable": true
          },
          "primaryCustomDomain": {
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantAttribute"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdminUserTenant": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTenantEntity"
          }
        ],
        "properties": {
          "isDevTenant": {
            "type": "boolean"
          },
          "sites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminUserSite"
            },
            "nullable": true
          },
          "masterCatalogs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminUserMasterCatalog"
            },
            "nullable": true
          },
          "domain": {
            "type": "string",
            "nullable": true
          },
          "omsMerchantId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantAttribute"
            },
            "nullable": true
          },
          "isUnified": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      }
    },
    "parameters": {
      "x-vol-tenant": {
        "name": "x-vol-tenant",
        "in": "header",
        "description": "Tenant ID",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "exportSettingsName": {
        "name": "exportSettingsName",
        "in": "query",
        "description": "Export Settings Name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "exportSettingsFTPName": {
        "name": "exportSettingsFTPName",
        "in": "path",
        "description": "Export Settings FTP Name",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "exportSettingsS3Name": {
        "name": "exportSettingsS3Name",
        "in": "path",
        "description": "Export Settings S3 Name",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "tagCategoryName": {
        "name": "tagCategoryName",
        "in": "query",
        "description": "Tag Category Name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "tagValue": {
        "name": "tagValue",
        "in": "query",
        "description": "Tag Value",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "x-vol-site": {
        "name": "x-vol-site",
        "in": "header",
        "description": "Site ID",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "type": {
        "name": "type",
        "in": "query",
        "description": "Type of request enum",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "ALL",
            "PARTIAL",
            "ANY",
            "ALL_STORES"
          ]
        }
      },
      "items": {
        "name": "items",
        "in": "query",
        "description": "List of Items to search on",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ItemQuantity"
          }
        }
      },
      "requestLocation": {
        "name": "requestLocation",
        "in": "query",
        "description": "Location for Request",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/RequestLocation"
        }
      },
      "locationWhitelist": {
        "name": "locationWhitelist",
        "in": "query",
        "description": "List of location codes that are allowed to be included in results",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "locationBlacklist": {
        "name": "locationBlacklist",
        "in": "query",
        "description": "List of location codes that are NOT allowed to be included in results",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "The maximum number of results to return, defaults to 100 for most",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "ignoreSafetyStock": {
        "name": "ignoreSafetyStock",
        "in": "query",
        "description": "Whether to ignore the safety stock buffer put in place",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "includeNegativeInventory": {
        "name": "includeNegativeInventory",
        "in": "query",
        "description": "Whether to allow items with negative inventory in the results",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "shippingLocation": {
        "name": "shippingLocation",
        "in": "query",
        "description": "Whether to limit results to locations that are shipping enabled",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "transferEnabled": {
        "name": "transferEnabled",
        "in": "query",
        "description": "Filter results by locations that have transfer enabled (true) or don't (false)",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "pickup": {
        "name": "pickup",
        "in": "query",
        "description": "Filter results by locations that are pickup-enabled (true) or not (false)",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "includeInAggregate": {
        "name": "includeInAggregate",
        "in": "query",
        "description": "Filter results by locations that have aggregate export enabled (true) or don't (false)",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "includeAttributes": {
        "name": "includeAttributes",
        "in": "query",
        "description": "Flag to include attributes or not",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      }
    },
    "requestBodies": {
      "CreateExportSettingsRequest": {
        "description": "Request to create a new Export Settings",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateExportSettingsRequest"
            }
          }
        }
      },
      "ExportInventoryRequest": {
        "description": "Request to run an inventory export",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ExportInventoryRequest"
            }
          }
        }
      },
      "UpdateExportSettingsRequest": {
        "description": "Request to update an existing Export Settings",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateExportSettingsRequest"
            }
          }
        }
      },
      "CreateExportSettingsFTPRequest": {
        "description": "Request to create a new Export Settings FTP",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateExportSettingsFTPRequest"
            }
          }
        }
      },
      "UpdateExportSettingsFTPRequest": {
        "description": "Request to update an existing Export Settings FTP",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateExportSettingsFTPRequest"
            }
          }
        }
      },
      "CreateExportSettingsS3Request": {
        "description": "Request to create a new Export Settings S3",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateExportSettingsS3Request"
            }
          }
        }
      },
      "UpdateExportSettingsS3Request": {
        "description": "Request to update an existing Export Settings S3",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateExportSettingsS3Request"
            }
          }
        }
      },
      "Tag": {
        "description": "Request create or modify Tag",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InventoryTag"
            }
          }
        }
      },
      "TagCategory": {
        "description": "Request create or modify Tag Categories",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TagCategory"
            }
          }
        }
      },
      "AllocateInventoryRequest": {
        "description": "Request to allocate inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AllocateInventoryRequest"
            }
          }
        }
      },
      "FetchFileConfigRequest": {
        "description": "Request to fetch file configs",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FetchFileConfigRequest"
            }
          }
        }
      },
      "InventoryRequest": {
        "description": "Request to get inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InventoryRequest"
            }
          }
        }
      },
      "AggregateRequest": {
        "description": "Request to aggregate inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AggregateRequest"
            }
          }
        }
      },
      "RefreshRequest": {
        "description": "Request to refresh inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RefreshRequest"
            }
          }
        }
      },
      "AdjustRequest": {
        "description": "Request to adjust inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AdjustRequest"
            }
          }
        }
      },
      "DeleteItemRequest": {
        "description": "Request to delete item(s)",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeleteItemRequest"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer scheme.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "servers": [
    {
      "url": "https://t{tenantId}-s{siteId}.{env}.mozu.com/api",
      "description": "Site Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "siteId": {
          "default": "0",
          "description": "Id of the Site"
        },
        "env": {
          "default": "sandbox",
          "enum": [
            "sandbox",
            "tp1",
            "tp2",
            "tp3",
            "tp4",
            "tp5",
            "stg1",
            "perf1"
          ]
        }
      }
    },
    {
      "url": "https://t{tenantId}.{env}.mozu.com/api",
      "description": "Tenant Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "env": {
          "default": "sandbox",
          "enum": [
            "sandbox",
            "tp1",
            "tp2",
            "tp3",
            "tp4",
            "tp5",
            "stg1",
            "perf1"
          ]
        }
      }
    },
    {
      "url": "https://home.mozu.com/api",
      "description": "HomePod Api"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ]
}