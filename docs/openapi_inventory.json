{
  "openapi": "3.0.0",
  "info": {
    "title": "Inventory",
    "description": "<div id=\"overview_INVENTORY\">\r\n            <h2>INVENTORY</h2>\r\n            <p>Use the Inventory API to retrieve the inventory levels of requested products, refresh and adjust current\r\n                stock levels at fulfillment locations, and tag segmented inventory for different channels. When using tags for inventory segmentation, inventory records are separated into categories to identify\r\n                which portions of its\r\n                total quantity are intended for different channels, customer groups, fulfillment methods, or other\r\n                needs.\r\n                This allows for setting a percentage of the quantity that would be available for each category and\r\n                setting discrete units at the location level as available for each category. For example, tags could\r\n                define how much of each\r\n                inventory record is set aside for a certain sales channel: the Kibo storefront, Walmart, or Amazon. The\r\n                percentages of the\r\n                inventory allotted for each channel would add up to 100% - the Kibo storefront could have 80% of the\r\n                inventory, Amazon 10%, and Walmart 10%. For more information, see the <a href=\"https://docs.kibocommerce.com/help/inventory\">Inventory guides</a>.</p>\r\n            <p>Use the <strong>Inventory</strong>, <strong>Inventory Allocation</strong>, and <strong>Modify Inventory</strong> resources to retrieve and update inventory levels.</p>  \r\n            <p>Use the <strong>Inventory Job</strong> resource to retrieve information about your pending inventory update processing jobs.</p> \r\n            <p>Use the <strong>Inventory Tag</strong> and <strong>Tag Category</strong> resources to segment your inventory records.</p> \r\n        </div>",
    "version": "1.0.1"
  },
  "paths": {
    "/commerce/inventory/v1/bin/{bin_id}": {
      "post": {
        "tags": [
          "InventoryBin"
        ],
        "description": "Update the designated bin",
        "parameters": [
          {
            "name": "bin_id",
            "in": "path",
            "description": "Id of bin to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateBinRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bin"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "summary": "Update Bin"
      }
    },
    "/commerce/inventory/v1/export/create": {
      "post": {
        "tags": [
          "ExportInventory"
        ],
        "description": "Creates entirely new export configurations for both FTP and S3 settings. This call allows you to specify all the values for the Export Settings object, such as file type and specific location groups or sites (which cannot be edited through FTP- or S3-specific endpoints). This is the initial setup request required to configure inventory export.",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateExportSettingsRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Service Error"
          }
        },
        "summary": "Create Export Settings"
      }
    },
    "/commerce/inventory/v1/export": {
      "post": {
        "tags": [
          "ExportInventory"
        ],
        "description": "Run Export Settings Job",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/ExportInventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportInventoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Service Error"
          }
        },
        "summary": "Run Export"
      }
    },
    "/commerce/inventory/v1/export/update": {
      "post": {
        "tags": [
          "ExportInventory"
        ],
        "description": "Updates the entire Export Settings object, including FTP and S3 configurations as well as file type and specific location groups or sites (which cannot be edited through FTP- or S3-specific endpoints).",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateExportSettingsRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateExportSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "No Settings Found"
          },
          "500": {
            "description": "Internal Service Error"
          }
        },
        "summary": "Update Export Settings"
      }
    },
    "/commerce/inventory/v1/export/{exportSettingsName}": {
      "delete": {
        "tags": [
          "ExportInventory"
        ],
        "description": "Deletes the entire Export Settings object, including any FTP or S3 configurations within it.",
        "parameters": [
          {
            "name": "exportSettingsName",
            "in": "path",
            "description": "Export Settings Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Delete Export Settings"
      }
    },
    "/commerce/inventory/v1/export/ftp/create": {
      "post": {
        "tags": [
          "ExportInventory"
        ],
        "description": "Creates new FTP settings and adds them to an existing Export Settings object, which may be useful if you want the export to go to a new endpoint instead of the one originally set up (or if the export needs to go to multiple endpoints). This call will not function unless you have performed the initial Create Export Settings request first.",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateExportSettingsFTPRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Service Error"
          }
        },
        "summary": "Create Export Settings FTP"
      }
    },
    "/commerce/inventory/v1/export/ftp/update": {
      "post": {
        "tags": [
          "ExportInventory"
        ],
        "description": "Updates the FTP settings within an existing Export Settings object.",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateExportSettingsFTPRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateExportSettingsFTPResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "No Settings Found"
          },
          "500": {
            "description": "Internal Service Error"
          }
        },
        "summary": "Update Export Settings FTP"
      }
    },
    "/commerce/inventory/v1/export/ftp/{exportSettingsName}/{exportSettingsFTPName}": {
      "delete": {
        "tags": [
          "ExportInventory"
        ],
        "description": "Deletes the specified FTP settings object. Not specifying the FTP Name/ID will delete all FTP settings within the Export Settings. This will not delete the entire Export Settings object.",
        "parameters": [
          {
            "name": "exportSettingsName",
            "in": "path",
            "description": "Export Settings Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exportSettingsFTPName",
            "in": "path",
            "description": "Export Settings FTP Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Delete Export Settings FTP"
      }
    },
    "/commerce/inventory/v1/export/s3/create": {
      "post": {
        "tags": [
          "ExportInventory"
        ],
        "description": "Creates new S3 settings and adds them to an existing Export Settings object, which may be useful if you want the export to go to a new endpoint instead of the one originally set up (or if the export needs to go to multiple endpoints). This call will not function unless you have performed the initial Create Export Settings request first.",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateExportSettingsS3Request"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Service Error"
          }
        },
        "summary": "Create Export Settings S3"
      }
    },
    "/commerce/inventory/v1/export/s3/update": {
      "post": {
        "tags": [
          "ExportInventory"
        ],
        "description": "Updates the S3 settings within an existing Export Settings object. Note that you cannot update location groups or sites with this request - you must use the full Update Export Settings request instead.",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateExportSettingsS3Request"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateExportSettingsS3Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "No Settings Found"
          },
          "500": {
            "description": "Internal Service Error"
          }
        },
        "summary": "Update Export Settings S3"
      }
    },
    "/commerce/inventory/v1/export/s3/{exportSettingsName}/{exportSettingsS3Name}": {
      "delete": {
        "tags": [
          "ExportInventory"
        ],
        "description": "Deletes the specified S3 settings object. Not specifying the S3 Name/ID will delete all S3 settings within the Export Settings. This will not delete the entire Export Settings object.",
        "parameters": [
          {
            "name": "exportSettingsName",
            "in": "path",
            "description": "Export Settings Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exportSettingsS3Name",
            "in": "path",
            "description": "Export Settings S3 Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Delete Export Settings S3"
      }
    },
    "/commerce/inventory/v1/export/gcs/create": {
      "post": {
        "tags": [
          "ExportInventory"
        ],
        "description": "Creates new GSC settings and adds them to an existing Export Settings object, which may be useful if you want the export to go to a new endpoint instead of the one originally set up (or if the export needs to go to multiple endpoints). This call will not function unless you have performed the initial Create Export Settings request first.",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateExportSettingsGCSRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Service Error"
          }
        },
        "summary": "Create Export Settings GCS"
      }
    },
    "/commerce/inventory/v1/export/gcs/update": {
      "post": {
        "tags": [
          "ExportInventory"
        ],
        "description": "Updates the GCS settings within an existing Export Settings object.",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateExportSettingsGCSRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateExportSettingsGCSResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "No Settings Found"
          },
          "500": {
            "description": "Internal Service Error"
          }
        },
        "summary": "Update Export Settings GCS"
      }
    },
    "/commerce/inventory/v1/export/gcs/{exportSettingsName}/{exportSettingsGCSName}": {
      "delete": {
        "tags": [
          "ExportInventory"
        ],
        "description": "Deletes the specified GCS settings object. Not specifying exportSettingsGCSID deletes ALL GCS settings for the specified export settings.",
        "parameters": [
          {
            "name": "exportSettingsName",
            "in": "path",
            "description": "Export Settings Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exportSettingsGCSName",
            "in": "path",
            "description": "Export Settings GCS Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Delete Export Settings GCS"
      }
    },
    "/commerce/inventory/v1/config/fetchfile/{fetchFileConfigID}": {
      "delete": {
        "tags": [
          "InventoryFetchFileConfig"
        ],
        "description": "Deletes a fetch file configuration.",
        "parameters": [
          {
            "name": "fetchFileConfigID",
            "in": "path",
            "description": "Id of fetch file config",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Delete Fetch Config"
      }
    },
    "/commerce/inventory/v1/config/fetchfile/testConnection/{fetchFileConfigID}": {
      "get": {
        "tags": [
          "InventoryFetchFileConfig"
        ],
        "description": "Attempts to connect to a fetch file endpoint and lists current files if successful",
        "parameters": [
          {
            "name": "fetchFileConfigID",
            "in": "path",
            "description": "Id of fetch file config",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchFileConnectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Test Connection"
      }
    },
    "/commerce/inventory/v1/deleteOldInventory/{months}": {
      "delete": {
        "tags": [
          "InventoryJob"
        ],
        "description": "Deletes older records from inventory table",
        "parameters": [
          {
            "name": "months",
            "in": "path",
            "description": "The x months before which we want the records to get deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobIDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Delete Old Inventory"
      }
    },
    "/commerce/inventory/v1/deleteOldInventory/allSilo/{months}": {
      "delete": {
        "tags": [
          "InventoryJob"
        ],
        "description": "Deletes older records from inventory table of all silos",
        "parameters": [
          {
            "name": "months",
            "in": "path",
            "description": "The x months before which we want the records to get deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobIDResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Delete All Old Inventory"
      }
    },
    "/commerce/inventory/v1/location/{locationCode}": {
      "get": {
        "tags": [
          "InventoryLocation"
        ],
        "description": "Get Locations",
        "parameters": [
          {
            "name": "locationCode",
            "in": "path",
            "description": "Location Code of the location to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Location Not Found"
          }
        },
        "summary": "Get Locations"
      }
    },
    "/commerce/inventory/v1/location/{locationGroupCode}": {
      "get": {
        "tags": [
          "InventoryLocation"
        ],
        "description": "Get LocationGroups",
        "parameters": [
          {
            "name": "locationGroupCode",
            "in": "path",
            "description": "Location Group Code of the location to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationGroupResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Location Not Found"
          }
        },
        "summary": "Get Location Groups"
      }
    },
    "/commerce/inventory/v5/inventory/shipmentInventoryAllocations": {
      "post": {
        "tags": [
          "ShipmentInventoryAllocation"
        ],
        "description": "Get future Inventory Allocations by shipment Ids",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/ShipmentInventoryAllocationRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentInventoryAllocationResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "$ref": "#/components/schemas/ShipmentInventoryAllocationResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get Shipment Inventory Allocations"
      }
    },
    "/commerce/inventory/v1/silo/siloConfig": {
      "post": {
        "tags": [
          "InventorySilo"
        ],
        "description": "Updates tenant silo config",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateTenantSiloConfigRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSiloConfigModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Update Tenant Silo Config"
      }
    },
    "/commerce/inventory/v1/tagCategory/{tagCategoryName}/tag": {
      "post": {
        "tags": [
          "InventoryTag"
        ],
        "description": "Create a tag",
        "parameters": [
          {
            "name": "tagCategoryName",
            "in": "path",
            "description": "Tag Category Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Tag"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryTag"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Create Tag"
      }
    },
    "/commerce/inventory/v1/tagCategory/{tagCategoryName}/tag/{tagValue}}": {
      "get": {
        "tags": [
          "InventoryTag"
        ],
        "description": "Get a tag",
        "parameters": [
          {
            "name": "tagCategoryName",
            "in": "path",
            "description": "Tag Category Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagValue",
            "in": "path",
            "description": "Tag Value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryTag"
                }
              }
            }
          },
          "404": {
            "description": "Tag Not Found"
          }
        },
        "summary": "Get Tag"
      },
      "put": {
        "tags": [
          "InventoryTag"
        ],
        "description": "Update the designated tag",
        "parameters": [
          {
            "name": "tagCategoryName",
            "in": "path",
            "description": "Tag Category Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagValue",
            "in": "path",
            "description": "Tag Value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Tag"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryTag"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "summary": "Update Tag"
      },
      "delete": {
        "tags": [
          "InventoryTag"
        ],
        "description": "Delete a Tag",
        "parameters": [
          {
            "name": "tagCategoryName",
            "in": "path",
            "description": "Tag Category Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagValue",
            "in": "path",
            "description": "Tag Value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Tag Not Found"
          }
        },
        "summary": "Delete Tag"
      }
    },
    "/commerce/inventory/v1/tagCategory": {
      "get": {
        "tags": [
          "InventoryTagCategory"
        ],
        "description": "Get all tag categories for a tenant",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagCategory"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tag Categories Not Found"
          }
        },
        "summary": "Get Tag Category All"
      }
    },
    "/commerce/inventory/v1/tagCategory/{tagCategoryName}": {
      "get": {
        "tags": [
          "InventoryTagCategory"
        ],
        "description": "Get a tag category",
        "parameters": [
          {
            "name": "tagCategoryName",
            "in": "path",
            "description": "Tag Category Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategory"
                }
              }
            }
          },
          "404": {
            "description": "Tag Not Found"
          }
        },
        "summary": "Get Tag Category"
      },
      "put": {
        "tags": [
          "InventoryTagcategory"
        ],
        "description": "Update the designated tag category",
        "parameters": [
          {
            "name": "tagCategoryName",
            "in": "path",
            "description": "Tag Category Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TagCategory"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        },
        "summary": "Update Tag Category"
      },
      "delete": {
        "tags": [
          "InventoryTagcategory"
        ],
        "description": "Delete a Tag category",
        "parameters": [
          {
            "name": "tagCategoryName",
            "in": "path",
            "description": "Tag Category Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Tag category Not Found"
          }
        },
        "summary": "Delete Tag Category"
      }
    },
    "/adjustFutureDate/{futureInventoryID}": {
      "put": {
        "tags": [
          "InventoryFutureDate"
        ],
        "description": "Adjust future_date of future inventory",
        "parameters": [
          {
            "name": "futureInventoryID",
            "in": "path",
            "description": "id of the future_inventory row in db",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobQueueResponse"
                }
              }
            }
          },
          "404": {
            "description": "Future Inventory ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Adjust Future Date"
      }
    },
    "/cache/invalidate": {
      "post": {
        "tags": [
          "InventoryCache"
        ],
        "description": "Invalidate Cache",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/InvalidateCacheRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Cache key invalidated successfully."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid request parameters."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Server error."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Invalidates the current inventory cache."
      }
    },
    "/commerce/inventory/v5/inventory/allocate": {
      "post": {
        "tags": [
          "InventoryAllocation"
        ],
        "description": "Allocates inventory based on the given request",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/AllocateInventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobQueueResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "$ref": "#/components/schemas/BaseResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Allocate Inventory"
      }
    },
    "/commerce/inventory/v5/inventory/deallocate": {
      "post": {
        "tags": [
          "InventoryAllocation"
        ],
        "description": "As the Refresh Inventory call does not clear allocated inventory, you can use this Deallocate Inventory call if you have items stuck in \"Allocated\" status. This requires details about the shipment and which specific line items need to be deallocated. For examples on how to find shipments with allocated inventory and perform a deallocation on them, see the <a href=\"https://docs.kibocommerce.com/help/inventory-api-overview\">Inventory API guide</a>.",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/AllocateInventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobQueueResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "$ref": "#/components/schemas/BaseResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Deallocate Inventory"
      }
    },
    "/commerce/inventory/v5/inventory/fulfill": {
      "post": {
        "tags": [
          "InventoryAllocation"
        ],
        "description": "Fulfills inventory based on the given request",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/AllocateInventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobQueueResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "$ref": "#/components/schemas/BaseResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Fulfill Inventory"
      }
    },
    "/commerce/inventory/v5/inventory/transitionCart": {
      "post": {
        "tags": [
          "InventoryAllocation"
        ],
        "description": "Transitions a cart allocation into a normal order/shipment allocation",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/TransitionCartRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "$ref": "#/components/schemas/BaseResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Transition Cart"
      }
    },
    "/commerce/inventory/v1/bin": {
      "get": {
        "tags": [
          "InventoryBin"
        ],
        "description": "Get a list of bins",
        "parameters": [
          {
            "name": "locationID",
            "in": "query",
            "description": "Id of location",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Term to match in bins",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to show",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BinResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Bins Not Found"
          }
        },
        "summary": "Get Bins"
      },
      "post": {
        "tags": [
          "InventoryBin"
        ],
        "description": "Create a bin",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateBinRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BinIDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Create Bin"
      }
    },
    "/commerce/inventory/v1/bin/searchInventory": {
      "post": {
        "tags": [
          "InventoryBin"
        ],
        "description": "Search bins for a inventory by bin name or any product identifier",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/BinSearchRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BinSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Search Bins"
      }
    },
    "/commerce/inventory/v1/bin/loadInventory": {
      "post": {
        "tags": [
          "InventoryBin"
        ],
        "description": "Loads bin inventory for designated bins",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/LoadBinInventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadBinInventoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Load Inventory"
      }
    },
    "/commerce/inventory/v1/bin/binTypes": {
      "get": {
        "tags": [
          "InventoryBin"
        ],
        "description": "Get list of bin types",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BinTypeModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Get Bin Types"
      }
    },
    "/commerce/inventory/v1/bin/binStatuses": {
      "get": {
        "tags": [
          "InventoryBin"
        ],
        "description": "Get list of bin statuses",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BinStatusModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Get Bin Statuses"
      }
    },
    "/commerce/inventory/v1/bin/updateBins": {
      "post": {
        "tags": [
          "InventoryBin"
        ],
        "description": "Update the designated bins",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateBinsRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBinsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Update Bins"
      }
    },
    "/commerce/inventory/v5/inventory/blockAssignment": {
      "post": {
        "tags": [
          "InventoryBlockAssignment"
        ],
        "description": "Setting the blockAssignment flag to true for the product based on the given request",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/BlockAssignmentRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "$ref": "#/components/schemas/BaseResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Block Assignment"
      }
    },
    "/commerce/inventory/v1/config/fetchfile": {
      "get": {
        "tags": [
          "InventoryFetchFileConfig"
        ],
        "description": "Get the Fetch File Configs for the current tenant",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFetchFileConfigResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get Fetch Config"
      },
      "post": {
        "tags": [
          "InventoryFetchFileConfig"
        ],
        "description": "Save a new Fetch File Configuration.",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/FetchFileConfigRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Save Fetch Config"
      }
    },
    "/commerce/inventory/v5/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "description": "Gets inventory from a specified location.",
        "parameters": [
          {
            "name": "x-vol-site",
            "in": "query",
            "description": "Site ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of request enum",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ALL",
                "PARTIAL",
                "ANY",
                "ALL_STORES"
              ]
            }
          },
          {
            "name": "items",
            "in": "query",
            "description": "List of Items to search on",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ItemQuantity"
              }
            }
          },
          {
            "name": "requestLocation",
            "in": "query",
            "description": "Location for Request",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/RequestLocation"
            }
          },
          {
            "name": "locationWhitelist",
            "in": "query",
            "description": "List of location codes that are allowed to be included in results",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "locationBlacklist",
            "in": "query",
            "description": "List of location codes that are NOT allowed to be included in results",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return, defaults to 100 for most",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ignoreSafetyStock",
            "in": "query",
            "description": "Whether to ignore the safety stock buffer put in place",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeNegativeInventory",
            "in": "query",
            "description": "Whether to allow items with negative inventory in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "shippingLocation",
            "in": "query",
            "description": "Whether to limit results to locations that are shipping enabled",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "transferEnabled",
            "in": "query",
            "description": "Filter results by locations that have transfer enabled (true) or don't (false)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pickup",
            "in": "query",
            "description": "Filter results by locations that are pickup-enabled (true) or not (false)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeInAggregate",
            "in": "query",
            "description": "Filter results by locations that have aggregate export enabled (true) or don't (false)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeAttributes",
            "in": "query",
            "description": "Flag to include attributes or not",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bins Not Found"
          }
        },
        "summary": "Get Inventory (GET)"
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "description": "Queries for specified inventory at given location. To call the version of this API with RIS (<a href=\"https://docs.kibocommerce.com/help/real-time-inventory-service\">real-time inventory service</a>) data, use the /commerce/realtime-inventory/v5/inventory endpoint instead.",
        "parameters": [
          {
            "name": "x-vol-site",
            "in": "query",
            "description": "Site ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/InventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Get Inventory (POST)"
      }
    },
    "/commerce/inventory/v5/inventory/aggregate": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "description": "Aggregates inventory.",
        "parameters": [
          {
            "name": "x-vol-site",
            "in": "query",
            "description": "Site ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AggregateRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AggregateResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Aggregate"
      }
    },
    "/commerce/inventory/v1/queue/{jobID}": {
      "get": {
        "tags": [
          "InventoryJob"
        ],
        "description": "Get the specified inventory upload job. Once an inventory file has been uploaded for processing, use this call to find the correct job ID as well as the status of the job. Once the job has been found, continue calling the API to monitor the status of the inventory upload and see when the job has been successfully uploaded, as well as the number of items uploaded.",
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "Id of bin to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobQueueResponse"
                }
              }
            }
          },
          "404": {
            "description": "Job Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get Job"
      }
    },
    "/commerce/inventory/v1/queue": {
      "get": {
        "tags": [
          "InventoryJob"
        ],
        "description": "Get the requested jobs.",
        "parameters": [
          {
            "name": "locationCode",
            "in": "query",
            "description": "Tenant specified unique Identifier of the owning location",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return, defaults to 100 for most",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "owner",
            "in": "query",
            "description": "User that owns the job",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Type of the Job Queue Request",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "REFRESH",
                  "ADJUST",
                  "RELEASE_SHIPMENTS",
                  "CREATE_PICK_WAVE",
                  "CLOSE_PICK_WAVE",
                  "PUT_AWAY_FILE",
                  "SHORT_PICK_ERROR",
                  "BIN_AUDIT_START",
                  "BIN_AUDIT_COMPLETION",
                  "CREATE_BIN_AUDIT",
                  "RELEASE_PENDING_ITEMS"
                ]
              }
            }
          },
          {
            "name": "originalFilename",
            "in": "query",
            "description": "The full name of the file that was picked up at the secure droppoint server before being split up by location.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobQueueResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Job Not Found"
          }
        },
        "summary": "Get Jobs"
      }
    },
    "/commerce/inventory/v1/location": {
      "get": {
        "tags": [
          "InventoryLocation"
        ],
        "description": "Get Locations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Get Locations"
      },
      "post": {
        "tags": [
          "InventoryLocation"
        ],
        "description": "Save Location",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/LocationRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Save Location"
      }
    },
    "/commerce/inventory/v1/locationGroup": {
      "get": {
        "tags": [
          "InventoryLocationGroup"
        ],
        "description": "Get LocationGroups",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationGroupResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Get Location Groups"
      }
    },
    "/commerce/inventory/v5/inventory/refresh": {
      "post": {
        "tags": [
          "ModifyInventory"
        ],
        "summary": "Refresh",
        "description": "Sets the inventory count for products at a particular location. These requests are placed into a queue of jobs that are processed one at a time. Due to this, the best practice is to submit fewer requests with more items per call, rather than numerous requests with a small number of items each. Unlike the Adjust API that only accepts a maximum of 1000 items per call, this Refresh API can accept up to 12000 items. However, Kibo recommends batches of 3000 items.",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/RefreshRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobIDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/commerce/inventory/v5/inventory/adjust": {
      "post": {
        "tags": [
          "ModifyInventory"
        ],
        "summary": "Adjust",
        "description": "Adjusts the inventory count for a product at a location. It is different from Inventory Refresh because rather than stating the total quantity of the product, this adjustment specifies the amount of change in the form of increments and decrements (+/-). Increments do not require a + sign and may be sent as a simple integer, but decrements must include the – sign. For example, there would be a -2 quantity for an item if there were two fewer than in the previous count, a 2 quantity if there were two more, and a 0 quantity if there were no change.<br>These requests are placed into a queue of jobs that are processed one at a time. Due to this, the best practice is to submit fewer requests with more items per call, rather than numerous requests with a small number of items each. However, unlike the Refresh API that accepts a maximum of 12000 items per call, this Adjust API only accepts up to 1000 items. If you exceed that limit, a Bad Request error will be returned.",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/AdjustRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobIDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/commerce/inventory/v5/inventory/delete": {
      "post": {
        "tags": [
          "ModifyInventory"
        ],
        "description": "Delete Inventory",
        "parameters": [
          {
            "name": "x-vol-site",
            "in": "query",
            "description": "Site ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DeleteItemRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Delete"
      }
    },
    "/commerce/inventory/v5/inventory/deleteFutureInventory": {
      "post": {
        "tags": [
          "ModifyInventory"
        ],
        "description": "Deletes future inventory.",
        "parameters": [
          {
            "name": "x-vol-site",
            "in": "query",
            "description": "Site ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DeleteFutureItemRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteFutureItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Delete Future Inventory"
      }
    },
    "/commerce/inventory/v5/inventory/deleteItems": {
      "post": {
        "tags": [
          "ModifyInventory"
        ],
        "description": "Deletes multiple inventory items.",
        "parameters": [
          {
            "name": "x-vol-site",
            "in": "query",
            "description": "Site ID",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DeleteItemsRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Delete Items"
      }
    },
    "/commerce/inventory/v5/inventory/getOrderItemInformation": {
      "post": {
        "tags": [
          "InventoryOrderItem"
        ],
        "description": "Retrieves the information for a specific order item",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/OrderItemInformationRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderItemInformation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "summary": "Get Order Item Information"
      }
    }
  },
  "components": {
    "schemas": {
      "BaseRequest": {
        "title": "Base Request",
        "description": "Base Request Model",
        "properties": {
          "locationCode": {
            "title": "location code",
            "description": "Location Code",
            "type": "string"
          },
          "userID": {
            "description": "user id",
            "type": "integer"
          },
          "pageSize": {
            "description": "how many results to show per page",
            "type": "integer"
          },
          "pageNum": {
            "description": "which page to show",
            "type": "integer"
          },
          "sortBy": {
            "description": "index to sort results by",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateBinRequest": {
        "title": "Update Bin Request",
        "description": "Request needed for updating a bin",
        "required": [
          "binID",
          "locationCode"
        ],
        "allOf": [
          {
            "properties": {
              "binID": {
                "description": "Bin identifier",
                "type": "integer"
              },
              "binTypeID": {
                "description": "New Bin's Type ID",
                "type": "integer"
              },
              "binStatusID": {
                "description": "New Bin's Status ID",
                "type": "integer"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "BaseResponse": {
        "title": "Base Response",
        "description": "Base Response Model",
        "properties": {
          "success": {
            "description": "Flag for success",
            "type": "boolean"
          },
          "messages": {
            "description": "List of messages",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "numResults": {
            "description": "Number of results",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Bin": {
        "title": "Bin Inventory Response",
        "description": "Response object for a bin",
        "allOf": [
          {
            "properties": {
              "name": {
                "description": "Bin Name",
                "type": "string"
              },
              "binID": {
                "description": "Bin ID",
                "type": "integer"
              },
              "locationCode": {
                "description": "Location Code",
                "type": "string"
              },
              "binTypeID": {
                "description": "Bin Type ID",
                "type": "integer"
              },
              "binStatusID": {
                "description": "Bin Status ID",
                "type": "integer"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "ExportSettingsFTP": {
        "title": "Export Settings FTP",
        "description": "Export Settings FTP",
        "required": [
          "name",
          "ftpServer",
          "ftpPort",
          "ftpDirectory"
        ],
        "properties": {
          "active": {
            "description": "Flag for Active State",
            "type": "boolean"
          },
          "exportSettingsID": {
            "description": "Export Settings ID",
            "type": "integer"
          },
          "exportSettingsFTPID": {
            "description": "Export Settings FTP ID",
            "type": "integer"
          },
          "name": {
            "description": "Export Settings FTP Name",
            "type": "string"
          },
          "ftpServer": {
            "description": "FTP Server Address",
            "type": "string"
          },
          "ftpPort": {
            "description": "FTP Server Port",
            "type": "integer"
          },
          "ftpDirectory": {
            "description": "FTP Server Directory",
            "type": "string"
          },
          "ftpDirectoryControlFile": {
            "description": "FTP Server Control File Directory",
            "type": "string"
          },
          "ftpUser": {
            "description": "FTP Username",
            "type": "string"
          },
          "ftpPassword": {
            "description": "FTP Password",
            "type": "string"
          },
          "deliveryClass": {
            "description": "FTP Delivery Class. Defaults to ExportDeliveryDefault",
            "type": "string"
          },
          "controlFile": {
            "description": "Control File",
            "type": "string"
          },
          "controlFileEmail": {
            "description": "Control File Email",
            "type": "string"
          },
          "remoteFileName": {
            "description": "Remote File Name",
            "type": "string"
          },
          "controlFileName": {
            "description": "Control File Name",
            "type": "string"
          },
          "endpoint": {
            "description": "Endpoint",
            "type": "string"
          },
          "environment": {
            "description": "Environment",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExportSettingsS3": {
        "title": "Export Settings S3",
        "description": "Export Settings S3",
        "required": [
          "name",
          "region",
          "bucket"
        ],
        "properties": {
          "exportSettingsID": {
            "description": "Export Settings ID",
            "type": "integer"
          },
          "exportSettingsS3ID": {
            "description": "Export Settings S3 ID",
            "type": "integer"
          },
          "name": {
            "description": "Export Settings S3 Name",
            "type": "string"
          },
          "active": {
            "description": "Flag for Active State",
            "type": "boolean"
          },
          "region": {
            "description": "S3 Region",
            "type": "string"
          },
          "bucket": {
            "description": "S3 Bucket (directory)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExportSettingsGcs": {
        "title": "Export Settings GCS",
        "description": "Export Settings GCS",
        "required": [
          "name",
          "gcs_bucket"
        ],
        "properties": {
          "exportSettingsID": {
            "description": "Export Settings ID",
            "type": "integer"
          },
          "exportSettingsGcsID": {
            "description": "Export Settings GCS ID",
            "type": "integer"
          },
          "name": {
            "description": "Export Settings GCS Name",
            "type": "string"
          },
          "active": {
            "description": "Flag for Active State",
            "type": "boolean"
          },
          "gcsBucket": {
            "description": "GCS Bucket (directory)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "tags": {
        "description": "Associative Map of <String, String> for tagCategoryName => tagName",
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "ExportSettings": {
        "title": "Export Settings",
        "description": "Export Settings",
        "required": [
          "name",
          "fileFormat",
          "exportType",
          "ftpInformation"
        ],
        "properties": {
          "name": {
            "description": "Export Settings Name",
            "type": "string"
          },
          "fileFormat": {
            "description": "Format for the export file",
            "type": "string",
            "enum": [
              "XML",
              "CSV"
            ]
          },
          "exportType": {
            "description": "Type of exportGG for the settings",
            "type": "string",
            "enum": [
              "AGGREGATE",
              "LOCATION"
            ]
          },
          "onlySendAvailable": {
            "description": "Flag for only sending available",
            "type": "boolean"
          },
          "onlySendActiveLocations": {
            "description": "Flag for only sending from active locations",
            "type": "boolean"
          },
          "ftpInformation": {
            "description": "List of export FTP settings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportSettingsFTP"
            }
          },
          "s3Information": {
            "description": "List of export S3 settings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportSettingsS3"
            }
          },
          "gcsInformation": {
            "description": "List of export S3 settings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportSettingsGcs"
            }
          },
          "exportSingleFile": {
            "description": "Flag for exporting as a single file",
            "type": "boolean"
          },
          "safetyStock": {
            "description": "Safety Stock",
            "type": "string",
            "enum": [
              "SAFETY_STOCK_MAX",
              "SAFETY_STOCK_MIN",
              "SAFETY_STOCK_AVG",
              "SAFETY_STOCK_SUM"
            ]
          },
          "floor": {
            "description": "Floor",
            "type": "string",
            "enum": [
              "FLOOR_MAX",
              "FLOOR_MIN",
              "FLOOR_AVG",
              "FLOOR_SUM"
            ]
          },
          "ltd": {
            "description": "LTD",
            "type": "string",
            "enum": [
              "LTD_MAX",
              "LTD_MIN",
              "LTD_AVG",
              "LTD_SUM"
            ]
          },
          "fileName": {
            "description": "Name for the export file",
            "type": "string"
          },
          "shortenFilename": {
            "description": "Flag for using shortened filenames",
            "type": "boolean"
          },
          "includeAttributes": {
            "description": "Flag for including attributes",
            "type": "boolean"
          },
          "zipFiles": {
            "description": "Flag for zipping the files",
            "type": "boolean"
          },
          "zipFileName": {
            "description": "Name for the zipped file",
            "type": "string"
          },
          "untransformedFileName": {
            "description": "Untransformed File Name",
            "type": "string"
          },
          "untransformedZipFileName": {
            "description": "Untransformed Zip File Name",
            "type": "string"
          },
          "locationGroupIDs": {
            "description": "Location Group Ids associated with the settings",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "siteIDs": {
            "description": "Site Ids associated with the settings",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "directShip": {
            "description": "Flag for only using locations with Direct Ship enabled",
            "type": "boolean"
          },
          "pickup": {
            "description": "Flag for only using locations with In Store Pickup enabled",
            "type": "boolean"
          },
          "transfer": {
            "description": "Flag for only using locations with Transfer enabled",
            "type": "boolean"
          },
          "productMapping": {
            "title": "productMapping",
            "description": "Enum for export productMapping",
            "type": "string",
            "enum": [
              "SWAP_PART_NUMBER_WITH_UPC",
              "SWAP_SKU_WITH_UPC"
            ]
          },
          "isClassic": {
            "description": "Flag for marking the setting as a classic export",
            "type": "boolean"
          },
          "ignoreNegativeInventoryLocations": {
            "description": "Flag for excluding negative inventory locations",
            "type": "boolean"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "type": "object"
      },
      "CreateExportSettingsRequest": {
        "title": "Create Export Settings Request",
        "description": "Request needed for creating Export Settings",
        "required": [
          "exportSettings"
        ],
        "allOf": [
          {
            "properties": {
              "exportSettings": {
                "$ref": "#/components/schemas/ExportSettings"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "ExportSettingsResponse": {
        "title": "Job ID Response",
        "description": "Job ID Response",
        "properties": {
          "exportSettingsName": {
            "description": "Created Export Settings Name",
            "type": "string"
          },
          "exportSettingsFTPName": {
            "description": "Created Export Settings FTP Name",
            "type": "string"
          },
          "exportSettingsS3Name": {
            "description": "Created Export Settings S3 Name",
            "type": "string"
          },
          "exportSettingsGcsName": {
            "description": "Created Export Settings GCS Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExportInventoryRequest": {
        "title": "Export Inventory Request",
        "description": "Export Inventory Request",
        "allOf": [
          {
            "properties": {
              "exportSettingsName": {
                "description": "Name of the Export Settings to use",
                "type": "string"
              },
              "exportSettingsFTPName": {
                "description": "Name of the FTP Settings to use. Will only check for this if exportID is already set",
                "type": "string"
              },
              "exportSettingsS3Name": {
                "description": "Name of the S3 Settings to use. Will only check for this if exportID is already set",
                "type": "string"
              },
              "exportSettingsGcsName": {
                "description": "Name of the Gcs Settings to use. Will only check for this if exportID is already set",
                "type": "string"
              },
              "development": {
                "description": "Flag for sending the exports to the development droppoint",
                "type": "boolean"
              },
              "exportSettingsId": {
                "description": "Export id post import",
                "type": "integer"
              },
              "exportSettingsFtpId": {
                "description": "FTP id post import",
                "type": "integer"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "ExportInventoryJobResponse": {
        "title": "Export Inventory Job Response",
        "description": "Response for each export job creation",
        "properties": {
          "exportSettingsID": {
            "description": "Export Settings ID",
            "type": "integer"
          },
          "jobID": {
            "description": "ID of newly created job",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ExportInventoryResponse": {
        "title": "Export Inventory Response",
        "description": "Response for Export Inventory api",
        "properties": {
          "exportInventoryJobResponses": {
            "description": "List of Export Inventory Job Responses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportInventoryJobResponse"
            }
          }
        },
        "type": "object"
      },
      "UpdateExportSettingsRequest": {
        "title": "Update Export Settings Request",
        "description": "Request needed updating existing Export Settings",
        "required": [
          "exportSettingsID",
          "exportSettings"
        ],
        "allOf": [
          {
            "properties": {
              "exportSettings": {
                "$ref": "#/components/schemas/ExportSettings"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "UpdateExportSettingsResponse": {
        "title": "Update Export Settings Response",
        "description": "Update Export Settings Response",
        "allOf": [
          {
            "properties": {
              "tenantID": {
                "description": "Tenant ID",
                "type": "integer"
              },
              "name": {
                "description": "Name",
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "DeletedCountResponse": {
        "title": "Deleted Count Response",
        "description": "Deleted Count Response Model",
        "properties": {
          "deleted": {
            "description": "Count of deleted entries",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreateExportSettingsFTPRequest": {
        "title": "Create Export Settings FTP Request",
        "description": "Request needed for creating Export Settings FTP",
        "required": [
          "exportSettingsFTP",
          "exportSettingsName"
        ],
        "allOf": [
          {
            "properties": {
              "exportSettingsName": {
                "description": "Export Settings Name to associate the ftp settings with",
                "type": "string"
              },
              "exportSettingsFTP": {
                "$ref": "#/components/schemas/ExportSettingsFTP"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "UpdateExportSettingsFTPRequest": {
        "title": "Update Export Settings FTP Request",
        "description": "Request needed updating existing Export Settings FTP",
        "required": [
          "exportSettingsName",
          "exportSettingsFTP"
        ],
        "allOf": [
          {
            "properties": {
              "exportSettingsName": {
                "description": "Export Settings Name to associate the ftp settings with",
                "type": "string"
              },
              "exportSettingsFTP": {
                "$ref": "#/components/schemas/ExportSettingsFTP"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "UpdateExportSettingsFTPResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Update Export Settings FTP Response",
            "description": "Updates the FTP settings within an existing Export Settings object. Note that you cannot update location groups or sites with this request - you must use the full Update Export Settings request instead.",
            "properties": {
              "tenantID": {
                "description": "Tenant ID",
                "type": "integer"
              },
              "exportSettingsFTPName": {
                "description": "Export Settings FTP Name",
                "type": "string"
              },
              "exportSettingsName": {
                "description": "Export Settings Name to associate the ftp settings with",
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "CreateExportSettingsS3Request": {
        "title": "Create Export Settings S3 Request",
        "description": "Request needed for creating Export Settings S3",
        "required": [
          "exportSettingsS3",
          "exportSettingsName"
        ],
        "allOf": [
          {
            "properties": {
              "exportSettingsName": {
                "description": "Export Settings Name to associate the ftp settings with",
                "type": "string"
              },
              "exportSettingsS3": {
                "$ref": "#/components/schemas/ExportSettingsS3"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "UpdateExportSettingsS3Request": {
        "title": "Update Export Settings S3 Request",
        "description": "Request needed updating existing Export Settings S3",
        "required": [
          "exportSettingsName",
          "exportSettingsS3"
        ],
        "allOf": [
          {
            "properties": {
              "exportSettingsName": {
                "description": "Export Settings Name to associate the ftp settings with",
                "type": "string"
              },
              "exportSettingsS3": {
                "$ref": "#/components/schemas/ExportSettingsS3"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "UpdateExportSettingsS3Response": {
        "title": "Update Export Settings S3 Response",
        "description": "Update Export Settings S3 Response",
        "allOf": [
          {
            "properties": {
              "tenantID": {
                "description": "Tenant ID",
                "type": "integer"
              },
              "exportSettingsS3ID": {
                "description": "Export Settings S3 ID",
                "type": "integer"
              },
              "exportSettingsID": {
                "description": "Export Settings ID to associate the s3 settings with",
                "type": "integer"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "CreateExportSettingsGcsRequest": {
        "title": "Create Export Settings GCS Request",
        "description": "Request needed for creating Export Settings GCS",
        "required": [
          "exportSettingsGcs",
          "exportSettingsName"
        ],
        "allOf": [
          {
            "properties": {
              "exportSettingsName": {
                "description": "Export Settings Name to associate the GCS settings with",
                "type": "string"
              },
              "exportSettingsGcs": {
                "$ref": "#/components/schemas/ExportSettingsGcs"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "UpdateExportSettingsGcsRequest": {
        "title": "Update Export Settings GCS Request",
        "description": "Request needed for updating existing Export Settings GCS",
        "required": [
          "exportSettingsName",
          "exportSettingsGcs"
        ],
        "allOf": [
          {
            "properties": {
              "exportSettingsName": {
                "description": "Export Settings Name to associate the ftp settings with",
                "type": "string"
              },
              "exportSettingsGcs": {
                "$ref": "#/components/schemas/ExportSettingsGcs"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "UpdateExportSettingsGCSResponse": {
        "title": "Update Export Settings Gcs Response",
        "description": "Update Export Settings Gcs Response",
        "allOf": [
          {
            "properties": {
              "tenantID": {
                "description": "Tenant ID",
                "type": "integer"
              },
              "exportSettingsGcsID": {
                "description": "Export Settings Gcs ID",
                "type": "integer"
              },
              "exportSettingsID": {
                "description": "Export Settings ID to associate the Gcs settings with",
                "type": "integer"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "DeletedResponse": {
        "title": "Deleted Response",
        "description": "Deleted Response Model",
        "properties": {
          "deleted": {
            "description": "Whether the delete was successful",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "FetchFileConnectionResponse": {
        "title": "FetchFileConnectionResponse",
        "description": "FetchFileConnectionResponse",
        "properties": {
          "ftpFiles": {
            "description": "List of files found on the specified sftp directory",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ftpArchiveFiles": {
            "description": "List of files found on the specified sftp archive directory",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "gcsFiles": {
            "description": "List of files found on the specified gcs bucket/path",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "gcsArchiveFiles": {
            "description": "List of files found on the specified gcs archive bucket/path",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "s3Files": {
            "description": "List of files found on the specified s3 bucket/path",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "s3ArchiveFiles": {
            "description": "List of files found on the specified s3 archive bucket/path",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "JobIDResponse": {
        "title": "Job ID Response",
        "description": "Job ID Response",
        "properties": {
          "jobID": {
            "description": "Job ID",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LocationResponse": {
        "title": "LocationResponse",
        "description": "Location Response Object",
        "allOf": [
          {
            "properties": {
              "locationID": {
                "description": "Internal Location ID",
                "type": "integer"
              },
              "tenantID": {
                "description": "Tenant ID",
                "type": "integer"
              },
              "locationCode": {
                "description": "Location Code",
                "type": "string"
              },
              "express": {
                "description": "Flag for whether the location is express enabled or not",
                "type": "boolean"
              },
              "includeInLocationExport": {
                "description": "Flag for whether the location is to be included in location exports",
                "type": "boolean"
              },
              "includeInAggregate": {
                "description": "Flag for whether the location is to be included in aggregate exports",
                "type": "boolean"
              },
              "active": {
                "description": "Flag for whether the location is active",
                "type": "boolean"
              },
              "directShip": {
                "description": "Flag for whether the location allows Direct Ship (STH) orders",
                "type": "boolean"
              },
              "pickup": {
                "description": "Flag for whether the location allows Pickup (BOPIS) orders",
                "type": "boolean"
              },
              "transferEnabled": {
                "description": "Flag for whether the location allows Transfer orders",
                "type": "boolean"
              },
              "postalCode": {
                "description": "Postal Code",
                "type": "string"
              },
              "countryCode": {
                "description": "Country Code",
                "type": "string"
              },
              "latitude": {
                "description": "Latitude",
                "type": "number"
              },
              "longitude": {
                "description": "Longitude",
                "type": "number"
              },
              "locationName": {
                "description": "Location Name",
                "type": "string"
              },
              "wmsEnabled": {
                "description": "Flag for whether the location is WMS Enabled",
                "type": "boolean"
              },
              "deliveryEnabled": {
                "description": "Flag for whether the location is deliveryEnabled",
                "type": "boolean"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "LocationGroupResponse": {
        "title": "LocationGroupResponse",
        "description": "LocationGroup Response Object",
        "allOf": [
          {
            "properties": {
              "locationGroupID": {
                "description": "Location Group ID",
                "type": "integer"
              },
              "tenantID": {
                "description": "Tenant ID",
                "type": "integer"
              },
              "locationGroupCode": {
                "description": "Location Group Code",
                "type": "string"
              },
              "created": {
                "description": "Created",
                "type": "string"
              },
              "adminLocationGroupID": {
                "description": "Admin Location Group ID",
                "type": "integer"
              },
              "sites": {
                "description": "Site IDs",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "locationCodes": {
                "description": "Location IDs",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "ShipmentInventoryAllocationRequest": {
        "title": "ShipmentInventoryAllocation Request",
        "description": "ShipmentInventoryAllocation Request Object",
        "required": [
          "shipmentIDs"
        ],
        "properties": {
          "shipmentIDs": {
            "description": "Shipment Ids",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "type": "object"
      },
      "InventoryAllocationResponse": {
        "title": "InventoryAllocationResponse",
        "description": "InventoryAllocationResponse Object",
        "properties": {
          "orderItemID": {
            "title": "order item ID",
            "description": "order item ID",
            "type": "integer"
          },
          "upc": {
            "title": "upc",
            "description": "upc",
            "type": "string"
          },
          "state": {
            "title": "state",
            "description": "state",
            "type": "string"
          },
          "quantity": {
            "title": "quantity",
            "description": "quantity",
            "type": "integer"
          },
          "futureDate": {
            "description": "Future Date at which the inventory should be allocated against. Expected format '2020-09-28T12:00:00-0500'",
            "type": "string",
            "format": "date-time"
          },
          "externalId": {
            "title": "externalId",
            "description": "External ID",
            "type": "string"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "type": "object"
      },
      "allocationList": {
        "description": "List of InventoryAllocationResponse objects",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/InventoryAllocationResponse"
        }
      },
      "ShipmentAllocationsResponse": {
        "title": "ShipmentAllocationsResponse",
        "description": "ShipmentAllocationsResponse Object",
        "properties": {
          "currentAllocations": {
            "$ref": "#/components/schemas/allocationList"
          },
          "futureAllocations": {
            "$ref": "#/components/schemas/allocationList"
          }
        },
        "type": "object"
      },
      "shipments": {
        "description": "Associative Map of Map<shipmentId, ShipmentAllocationsResponse>",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/ShipmentAllocationsResponse"
        }
      },
      "ShipmentInventoryAllocationResponse": {
        "title": "ShipmentInventoryAllocation Response",
        "description": "ShipmentInventoryAllocation Response Object",
        "properties": {
          "shipments": {
            "$ref": "#/components/schemas/shipments"
          }
        },
        "type": "object"
      },
      "UpdateTenantSiloConfigRequest": {
        "title": "Create Tenant Silo Config Request",
        "description": "Request for creating or updating tenant silo config.",
        "properties": {
          "tenantID": {
            "description": "A Tenant ID",
            "type": "integer"
          },
          "batchWorkers": {
            "description": "Number of batch workers to run for this tenant.",
            "type": "integer"
          },
          "eventSenderWorkers": {
            "description": "Number of event sender workers to run for this tenant.",
            "type": "integer"
          },
          "nonBatchWorkers": {
            "description": "Number of event dedicated non-batch workers to run for this silo.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TenantSiloConfigModel": {
        "title": "Tenant Silo Config Model",
        "description": "Model of a tenant silo config.",
        "properties": {
          "siloID": {
            "description": "A Silo ID",
            "type": "integer"
          },
          "name": {
            "description": "Name of the Silo",
            "type": "string"
          },
          "description": {
            "description": "Description of silo configuration",
            "type": "string"
          },
          "usable": {
            "description": "Whether the  silo config is usable or not",
            "type": "boolean"
          },
          "additonalTenantsAllowed": {
            "description": "Check whether theAdditional tenants allowed or not ",
            "type": "boolean"
          },
          "batchWorkers": {
            "description": "Number of Batch Workers to run for this tenant.",
            "type": "integer"
          },
          "eventSenderWorkers": {
            "description": "Number of Event Sender Workers to run for this tenant.",
            "type": "integer"
          },
          "nonBatchWorkers": {
            "description": "Number of Non-Batch Workers to run for this tenant.",
            "type": "integer"
          },
          "isolateNonBatchJobs": {
            "description": "Whether to isolate non-batch jobs or not",
            "type": "boolean"
          },
          "tenantID": {
            "description": "A Tenant ID",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TagCategory": {
        "title": "Tag Category Response",
        "description": "Request and response object for a tag category",
        "properties": {
          "tagCategoryID": {
            "description": "Tag Category ID",
            "type": "integer"
          },
          "name": {
            "description": "Tag Category Name",
            "type": "string"
          },
          "created": {
            "description": "Date tag category was created.",
            "type": "string"
          },
          "deletion_job_ids": {
            "description": "List of deletion job ID's",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "tags": {
            "description": "Tags within this category",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryTag"
            }
          }
        },
        "type": "object"
      },
      "JobQueueResponse": {
        "title": "Job Queue Response",
        "description": "Response for getting a job",
        "allOf": [
          {
            "properties": {
              "jobID": {
                "description": "Internal identifier that uniquely identifies a single job",
                "type": "integer"
              },
              "tenantID": {
                "description": "Unique internal identifier of the tenant that owns the job",
                "type": "integer"
              },
              "locationCode": {
                "description": "Unique internal Identifier of the owning location",
                "type": "string"
              },
              "type": {
                "description": "Purpose of the job",
                "type": "string",
                "enum": [
                  "REFRESH",
                  "ADJUST",
                  "RELEASE_SHIPMENTS",
                  "CREATE_PICK_WAVE",
                  "CLOSE_PICK_WAVE",
                  "PUT_AWAY_FILE",
                  "SHORT_PICK_ERROR",
                  "BIN_AUDIT_START",
                  "BIN_AUDIT_COMPLETION",
                  "CREATE_BIN_AUDIT",
                  "RELEASE_PENDING_ITEMS",
                  "ALLOCATE",
                  "DEALLOCATE",
                  "FULFILL",
                  "DELETE"
                ]
              },
              "added": {
                "description": "Time and date the job was added to the queue in ISO8601 format in UTC",
                "type": "string"
              },
              "started": {
                "description": "Time and date the job was started in ISO8601 format in UTC",
                "type": "string"
              },
              "finished": {
                "description": "Time and date the job was finished in ISO8601 format in UTC",
                "type": "string"
              },
              "originalFilename": {
                "description": "The full name of the file that was picked up at the secure droppoint server before being split up by location. Applies only to refresh and adjust jobs created via file fetch process",
                "type": "string"
              },
              "hasData": {
                "description": "True if the job was not created from a fetched file",
                "type": "boolean"
              },
              "itemCount": {
                "description": "The number of items processed, only for job types REFRESH and ADJUST",
                "type": "integer"
              },
              "status": {
                "description": "Current status of job completion",
                "type": "string",
                "enum": [
                  "PENDING",
                  "WORKING",
                  "SUCCESS",
                  "FAILED"
                ]
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "InvalidateCacheRequest": {
        "title": "Invalidate Cache Request",
        "description": "Request to invalidate a specific cache entry by its key",
        "required": [
          "cacheKey"
        ],
        "allOf": [
          {
            "properties": {
              "cacheKey": {
                "title": "Cache Key",
                "description": "Cache key to invalidate",
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "AllocateItem": {
        "title": "AllocateItem",
        "description": "Item for Allocation",
        "required": [
          "quantity",
          "orderItemID",
          "orderID",
          "shipmentID",
          "locationID"
        ],
        "properties": {
          "partNumber": {
            "title": "part number",
            "description": "part number",
            "type": "string"
          },
          "upc": {
            "title": "upc",
            "description": "upc",
            "type": "string"
          },
          "sku": {
            "title": "sku",
            "description": "sku",
            "type": "string"
          },
          "quantity": {
            "title": "quantity",
            "description": "quantity",
            "type": "integer"
          },
          "orderID": {
            "title": "order ID",
            "description": "The Order Number in UCP",
            "type": "integer"
          },
          "orderItemID": {
            "title": "order item ID",
            "description": "order item ID",
            "type": "integer"
          },
          "ucpOrderID": {
            "title": "ucp order ID",
            "description": "The Order ID in UCP (GUID)",
            "type": "string"
          },
          "cartID": {
            "title": "Cart ID",
            "description": "Cart ID (GUID)",
            "type": "string"
          },
          "reservationID": {
            "title": "Reservation ID",
            "description": "Reservation ID",
            "type": "string"
          },
          "cartItemID": {
            "title": "Cart Item ID",
            "description": "Cart Item ID (GUID)",
            "type": "string"
          },
          "shipmentID": {
            "title": "shipment ID",
            "description": "shipment ID",
            "type": "integer"
          },
          "locationCode": {
            "title": "location Code",
            "description": "location Code",
            "type": "string"
          },
          "previousOrderItemID": {
            "title": "previous order item ID",
            "description": "previous order item ID",
            "type": "integer"
          },
          "binID": {
            "title": "bin ID",
            "description": "Bin Location Identifier",
            "type": "integer"
          },
          "blockAssignment": {
            "title": "Block Item Assignment",
            "description": "Block assignment of item at product/location level. ONLY allowed on deallocate.",
            "type": "boolean"
          },
          "holdBlockAssignment": {
            "title": "Hold Block Item Assignment",
            "description": "Hold Block assignment flag of item at product/location level. ONLY allowed on deallocate.",
            "type": "boolean"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "futureDate": {
            "description": "Future Date at which the inventory should be allocated against. Expected format '2020-09-28T12:00:00-0500'",
            "type": "string",
            "format": "date-time"
          },
          "lotCode": {
            "title": "Lot Code",
            "description": "Extra Uniqueness Identifier used track which lot a product is manufactured in. Only used in Allocate calls.",
            "type": "string"
          },
          "condition": {
            "title": "Condition",
            "description": "Descriptor for the state of the product. Only used in Allocate calls.",
            "type": "string"
          },
          "serialNumber": {
            "title": "Serial Number",
            "description": "A serial number unique to a specific, physical unit of inventory. Limit of 30 characters. Only used in Allocate calls.",
            "type": "string"
          },
          "date": {
            "description": "Used by the retailer for storing information related to manufacturing date or expiry date and use date to allocate for better stock management. Only used in Allocate calls.",
            "type": "string",
            "format": "date-time"
          },
          "inventoryID": {
            "title": "Inventory ID",
            "description": "Specific inventory record to perform deallocates/fulfills against. Only used for Deallocate/Fulfill calls",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AllocateInventoryRequest": {
        "title": "Allocate Inventory Request",
        "description": "Request needed for allocating inventory",
        "required": [
          "tenantID",
          "items"
        ],
        "allOf": [
          {
            "properties": {
              "items": {
                "description": "list of AllocateItems",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AllocateItem"
                }
              },
              "orderDate": {
                "description": "order date",
                "type": "string"
              },
              "orderWeight": {
                "description": "order weight",
                "type": "integer"
              },
              "decrementOnHandOnDeallocate": {
                "description": "flag to determine deallocation on decrements",
                "type": "boolean"
              },
              "autoAssign": {
                "description": "flag to determine whether the allocation was due to auto assignment",
                "type": "boolean"
              },
              "runSynchronous": {
                "description": "flag to determine whether the runSyncronous flag is set and the allocation should be run synchronously",
                "type": "boolean"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "TransitionCartItem": {
        "title": "TransitionCartItem",
        "description": "Item for Transitioning Cart allocations",
        "required": [
          "orderItemID",
          "cartItemID",
          "shipmentID"
        ],
        "properties": {
          "orderItemID": {
            "title": "order item ID",
            "description": "order item ID",
            "type": "integer"
          },
          "cartItemID": {
            "title": "Cart Item ID",
            "description": "Cart Item ID (GUID)",
            "type": "string"
          },
          "shipmentID": {
            "title": "shipment ID",
            "description": "shipment ID",
            "type": "integer"
          },
          "futureDate": {
            "description": "Expected format '2020-09-28T12:00:00-0500'",
            "type": "string",
            "format": "date-time"
          },
          "locationCode": {
            "title": "Location Code",
            "description": "Location Code",
            "type": "string"
          },
          "transitionItemID": {
            "title": "transition item ID",
            "description": "If provided, overrides the order item ID (orderItemID) in the db records",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TransitionCartRequest": {
        "title": "Transition Cart Request",
        "description": "Request needed for transitioning cart allocations to order/shipment allocations",
        "required": [
          "cartID",
          "orderID",
          "items"
        ],
        "allOf": [
          {
            "properties": {
              "items": {
                "description": "list of TransitionCartItem",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransitionCartItem"
                }
              },
              "cartID": {
                "description": "Cart ID that we are transitioning the allocation from",
                "type": "string"
              },
              "orderID": {
                "description": "Order ID for the cart to transition to",
                "type": "integer"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "BinModel": {
        "title": "BinModel",
        "description": "Bin Model",
        "properties": {
          "binID": {
            "description": "Unique Bin Identifier assigned by the system",
            "type": "integer"
          },
          "locationID": {
            "description": "Location Identifier of the owning location",
            "type": "integer"
          },
          "binTypeID": {
            "description": "New Bin's Type ID",
            "type": "integer"
          },
          "binStatusID": {
            "description": "New Bin's Status ID",
            "type": "integer"
          },
          "name": {
            "description": "Client specified static bin name",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BinResponseModel": {
        "title": "BinResponseModel",
        "description": "Bin Response Object",
        "properties": {
          "bins": {
            "$ref": "#/components/schemas/BinModel"
          },
          "resultCount": {
            "description": "number of results",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreateBinRequest": {
        "title": "Create Bin Request",
        "description": "Request needed for creating a new bin",
        "allOf": [
          {
            "properties": {
              "binTypeID": {
                "title": "bin type id",
                "description": "Bin Type Identifier",
                "type": "integer"
              },
              "binStatusID": {
                "title": "bin status id",
                "description": "Bin Status Identifier",
                "type": "integer"
              },
              "name": {
                "title": "name",
                "description": "Name",
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "BinIDResponse": {
        "title": "Bin ID Response",
        "description": "Bin ID Response",
        "properties": {
          "binID": {
            "description": "Bin ID",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BinSearchRequest": {
        "title": "Bin Search Request",
        "description": "Request needed for searching for bins",
        "allOf": [
          {
            "properties": {
              "binName": {
                "description": "Partial match of bin name",
                "type": "string"
              },
              "product": {
                "$ref": "#/components/schemas/InventoryProduct"
              },
              "sortAscending": {
                "description": "Flag for sorting ascending",
                "type": "boolean"
              },
              "showNegativeInventory": {
                "description": "Flag for showing negative inventory",
                "type": "boolean"
              },
              "tags": {
                "$ref": "#/components/schemas/tags"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "futureInventoryArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/InventoryFutureInventory"
        }
      },
      "taggedInventoryMap": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/InventoryTagQuantity"
        }
      },
      "ProductQuantityResponse": {
        "title": "Product Quantities Response",
        "description": "A response object for a product and its associated quantity",
        "properties": {
          "partNumber": {
            "description": "Part Number",
            "type": "string"
          },
          "upc": {
            "description": "UPC",
            "type": "string"
          },
          "sku": {
            "description": "SKU",
            "type": "string"
          },
          "quantity": {
            "description": "Quantity of product",
            "type": "integer"
          },
          "binID": {
            "description": "ID of associated bin",
            "type": "integer"
          },
          "locationCode": {
            "description": "Location Code of the owning location",
            "type": "string"
          },
          "binTypeID": {
            "description": "Bin Type ID",
            "type": "integer"
          },
          "binStatusID": {
            "description": "Bin Status ID",
            "type": "integer"
          },
          "name": {
            "description": "Name of the product",
            "type": "string"
          },
          "inventoryID": {
            "description": "Inventory ID",
            "type": "integer"
          },
          "tenantLocProductID": {
            "description": "Tenant Location Product ID",
            "type": "integer"
          },
          "auditProductID": {
            "description": "Audit Product ID",
            "type": "integer"
          },
          "auditID": {
            "description": "Audit ID",
            "type": "integer"
          },
          "onHand": {
            "description": "Amount of product on hand",
            "type": "integer"
          },
          "available": {
            "description": "Amount of product available",
            "type": "integer"
          },
          "allocated": {
            "description": "Amount of product allocated",
            "type": "integer"
          },
          "pending": {
            "description": "Amount of product pending",
            "type": "integer"
          },
          "ltd": {
            "description": "Custom field used for store prioritization",
            "type": "integer"
          },
          "floor": {
            "description": "Absolute minimum quantity of this item that should be in stock at any time",
            "type": "integer"
          },
          "safetystock": {
            "description": "Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted",
            "type": "integer"
          },
          "tags": {
            "$ref": "#/components/schemas/taggedInventoryMap"
          }
        },
        "type": "object"
      },
      "BinProductResponseQuantities": {
        "title": "Bin Product Response Quantities",
        "description": "A response object for a bin and its associated products and quantities",
        "properties": {
          "binName": {
            "description": "Name of the bin",
            "type": "string"
          },
          "products": {
            "description": "List of ProductQuantities - Products with their associated quantity",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductQuantityResponse"
            }
          }
        },
        "type": "object"
      },
      "BinSearchResponse": {
        "title": "Bin Search Response",
        "description": "Bin Search Response Object",
        "allOf": [
          {
            "properties": {
              "binQuantities": {
                "description": "List of BinProductQuantities - bins with associated products and quantities",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BinProductResponseQuantities"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "ProductQuantity": {
        "title": "Product Quantities",
        "description": "A product and its associated quantity",
        "properties": {
          "partNumber": {
            "description": "Part Number",
            "type": "string"
          },
          "upc": {
            "description": "UPC",
            "type": "string"
          },
          "sku": {
            "description": "SKU",
            "type": "string"
          },
          "quantity": {
            "description": "Quantity of product",
            "type": "integer"
          },
          "binID": {
            "description": "ID of associated bin",
            "type": "integer"
          },
          "locationID": {
            "description": "Location Identifier of the owning location",
            "type": "integer"
          },
          "binTypeID": {
            "description": "Bin Type ID",
            "type": "integer"
          },
          "binStatusID": {
            "description": "Bin Status ID",
            "type": "integer"
          },
          "name": {
            "description": "Name of the product",
            "type": "string"
          },
          "inventoryID": {
            "description": "Inventory ID",
            "type": "integer"
          },
          "tenantLocProductID": {
            "description": "Tenant Location Product ID",
            "type": "integer"
          },
          "auditProductID": {
            "description": "Audit Product ID",
            "type": "integer"
          },
          "auditID": {
            "description": "Audit ID",
            "type": "integer"
          },
          "onHand": {
            "description": "Amount of product on hand",
            "type": "integer"
          },
          "available": {
            "description": "Amount of product available",
            "type": "integer"
          },
          "allocated": {
            "description": "Amount of product allocated",
            "type": "integer"
          },
          "pending": {
            "description": "Amount of product pending",
            "type": "integer"
          },
          "ltd": {
            "description": "Custom field used for store prioritization",
            "type": "integer"
          },
          "floor": {
            "description": "Absolute minimum quantity of this item that should be in stock at any time",
            "type": "integer"
          },
          "safetystock": {
            "description": "Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted",
            "type": "integer"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "type": "object"
      },
      "BinProductQuantities": {
        "title": "Bin Product Quantities",
        "description": "A bin and its associated products and quantities",
        "properties": {
          "binName": {
            "description": "Name of the bin",
            "type": "string"
          },
          "products": {
            "description": "List of ProductQuantities - Products with their associated quantity",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductQuantity"
            }
          }
        },
        "type": "object"
      },
      "LoadBinInventoryRequest": {
        "title": "Load Bin Inventory Request",
        "description": "Request needed for loading bin inventory",
        "allOf": [
          {
            "properties": {
              "bins": {
                "description": "List of bins and their associated product quantities",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BinProductQuantities"
                }
              },
              "dryRun": {
                "description": "Flag for dry runs",
                "type": "boolean"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "LoadBinInventoryResponse": {
        "title": "Load Bin Inventory Response",
        "description": "Response object for loading bin inventory",
        "allOf": [
          {
            "properties": {
              "unitsAdded": {
                "description": "Number of units added",
                "type": "integer"
              },
              "unitsRemoved": {
                "description": "Number of removed units",
                "type": "integer"
              },
              "binsCreated": {
                "description": "Names of created bins",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "productsCreated": {
                "description": "List of products created",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InventoryProduct"
                }
              },
              "binQuantities": {
                "description": "List of new bin product quantities",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BinProductQuantities"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "BinTypeModel": {
        "title": "BinTypeModel",
        "description": "Type of Bin",
        "properties": {
          "binTypeID": {
            "description": "Bin Type Identifier",
            "type": "integer"
          },
          "description": {
            "description": "Bin Type Description",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BinStatusModel": {
        "title": "BinStatusModel",
        "description": "Status of Bin",
        "properties": {
          "binStatusID": {
            "description": "Bin Status Identifier",
            "type": "integer"
          },
          "description": {
            "description": "Bin Status Description",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateBinsRequest": {
        "title": "Update Bins Request",
        "description": "Request needed for updating bins",
        "allOf": [
          {
            "properties": {
              "bins": {
                "description": "List of Update Bin Requests",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateBinRequest"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "UpdateBinsResponse": {
        "title": "Update Bins Response",
        "description": "Response for updating bins",
        "allOf": [
          {
            "properties": {
              "numberAffected": {
                "description": "Number of affected bins",
                "type": "integer"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "BlockAssignmentItem": {
        "title": "BlockAssignmentItem",
        "description": "Items for enabling blockAssignment",
        "required": [
          "blockAssignment",
          "itemIdentifiers"
        ],
        "properties": {
          "partNumber": {
            "title": "part number",
            "description": "part number",
            "type": "string"
          },
          "upc": {
            "title": "upc",
            "description": "upc",
            "type": "string"
          },
          "sku": {
            "title": "sku",
            "description": "sku",
            "type": "string"
          },
          "quantity": {
            "title": "quantity",
            "description": "quantity",
            "type": "integer"
          },
          "blockAssignment": {
            "title": "Block Item Assignment",
            "description": "Block assignment of item at product/location level. ONLY allowed on deallocate.",
            "type": "boolean"
          },
          "holdBlockAssignment": {
            "title": "Hold Block Item Assignment",
            "description": "Hold Block assignment of item at product/location level. ONLY allowed on deallocate.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "BlockAssignmentRequest": {
        "title": "Block Assignment Request",
        "description": "Request to block assignment on the product",
        "required": [
          "tenantID",
          "items"
        ],
        "allOf": [
          {
            "properties": {
              "items": {
                "description": "list of items for blocking Assignment",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BlockAssignmentItem"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "GetFetchFileConfigItem": {
        "title": "M_FetchFileConfig",
        "description": "Fetch File Config Model",
        "properties": {
          "fetchFileConfigID": {
            "description": "Fetch File Config ID",
            "type": "integer"
          },
          "tenantID": {
            "description": "Tenant ID",
            "type": "integer"
          },
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "lastModified": {
            "description": "Time config was last modified",
            "type": "string"
          },
          "emailList": {
            "description": "Email List",
            "type": "string"
          },
          "refreshEnabled": {
            "description": "Flag for Refresh Enabled",
            "type": "boolean"
          },
          "refreshFileDescription": {
            "description": "Description for the refresh file",
            "type": "string"
          },
          "updateEnabled": {
            "description": "Flag for Update Enabled",
            "type": "boolean"
          },
          "updateFileDescription": {
            "description": "Description for the update file",
            "type": "string"
          },
          "ftpServer": {
            "description": "FTP server address",
            "type": "string"
          },
          "ftpUsername": {
            "description": "FTP server username",
            "type": "string"
          },
          "ftpPassword": {
            "description": "FTP server password",
            "type": "string"
          },
          "ftpPort": {
            "description": "FTP server port",
            "type": "integer"
          },
          "ftpRemotePath": {
            "description": "FTP server remote path",
            "type": "string"
          },
          "ftpRemotePathArchive": {
            "description": "FTP server remote path archive",
            "type": "string"
          },
          "region": {
            "description": "S3 Region",
            "type": "string"
          },
          "bucket": {
            "description": "S3 Bucket",
            "type": "string"
          },
          "s3Path": {
            "description": "S3 Bucket Path (directory)",
            "type": "string"
          },
          "archiveBucket": {
            "description": "S3 Archive Bucket",
            "type": "string"
          },
          "s3ArchivePath": {
            "description": "S3 Archive Bucket Path (directory)",
            "type": "string"
          },
          "lockName": {
            "description": "Lock name",
            "type": "string"
          },
          "postProcessAction": {
            "description": "Enum denoting action post processing",
            "type": "integer"
          },
          "useControlFile": {
            "description": "Flag for using control file",
            "type": "boolean"
          },
          "multipleFiles": {
            "description": "Flag for using multiple files",
            "type": "boolean"
          },
          "zeroOutNegatives": {
            "description": "Flag for converting negatives to zero",
            "type": "boolean"
          },
          "fieldNameMap": {
            "description": "List of field names",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ignoreExtraFields": {
            "description": "Flag for ignoring extra fields",
            "type": "boolean"
          },
          "blankQuantityIsZero": {
            "description": "Flag to convert null quantities to zero",
            "type": "boolean"
          },
          "csvDelimiter": {
            "description": "CSV Delimiter",
            "type": "string"
          },
          "exportAfterRefresh": {
            "description": "Flag for exporting after refresh",
            "type": "boolean"
          },
          "postImportExportId": {
            "description": "Export id post import",
            "type": "integer"
          },
          "postImportFtpId": {
            "description": "FTP id post import",
            "type": "integer"
          },
          "productMapping": {
            "title": "productMapping",
            "description": "Enum for fetch file mapping",
            "type": "string",
            "enum": [
              "SWAP_PART_NUMBER_WITH_UPC",
              "SWAP_SKU_WITH_UPC"
            ]
          },
          "gcsBucket": {
            "description": "GCS Bucket",
            "type": "string"
          },
          "gcsPath": {
            "description": "GCS Path (directory)",
            "type": "string"
          },
          "gcsArchivePath": {
            "description": "GCS Archive Bucket",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetFetchFileConfigResponse": {
        "title": "GetFetchFileConfigResponse",
        "description": "Get Fetch File Config Response",
        "properties": {
          "items": {
            "description": "List of Fetch File Configurations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetFetchFileConfigItem"
            }
          }
        },
        "type": "object"
      },
      "FetchFileConfigRequest": {
        "title": "Fetch File Config Request",
        "description": "Request for Fetch File Configs",
        "required": [
          "active",
          "lockName",
          "ftpServer",
          "ftpUsername",
          "ftpPassword",
          "ftpRemotePath",
          "postProcessAction"
        ],
        "allOf": [
          {
            "properties": {
              "fetchFileConfigID": {
                "description": "Fetch File Config ID",
                "type": "integer"
              },
              "active": {
                "description": "Flag for active state",
                "type": "boolean"
              },
              "emailList": {
                "description": "Email List",
                "type": "string"
              },
              "refreshEnabled": {
                "description": "Flag for Refresh Enabled",
                "type": "boolean"
              },
              "refreshFileDescription": {
                "description": "Description for the refresh file",
                "type": "string"
              },
              "updateEnabled": {
                "description": "Flag for Update Enabled",
                "type": "boolean"
              },
              "updateFileDescription": {
                "description": "Description for the update file",
                "type": "string"
              },
              "ftpServer": {
                "description": "FTP server address",
                "type": "string"
              },
              "ftpUsername": {
                "description": "FTP server username",
                "type": "string"
              },
              "ftpPassword": {
                "description": "FTP server password",
                "type": "string"
              },
              "ftpPort": {
                "description": "FTP server port",
                "type": "integer"
              },
              "ftpRemotePath": {
                "description": "FTP server remote path",
                "type": "string"
              },
              "ftpRemotePathArchive": {
                "description": "FTP server remote path archive",
                "type": "string"
              },
              "gcsBucket": {
                "description": "GCS Bucket",
                "type": "string"
              },
              "gcsPath": {
                "description": "GCS Path",
                "type": "string"
              },
              "gcsArchivePath": {
                "description": "GCS Archive Path",
                "type": "string"
              },
              "region": {
                "description": "S3 Region",
                "type": "string"
              },
              "bucket": {
                "description": "S3 Bucket",
                "type": "string"
              },
              "s3Path": {
                "description": "S3 Bucket Path (directory)",
                "type": "string"
              },
              "archiveBucket": {
                "description": "S3 Archive Bucket",
                "type": "string"
              },
              "s3ArchivePath": {
                "description": "S3 Archive Bucket Path (directory)",
                "type": "string"
              },
              "lockName": {
                "description": "Lock name",
                "type": "string"
              },
              "postProcessAction": {
                "description": "Enum denoting action post processing",
                "type": "integer"
              },
              "useControlFile": {
                "description": "Flag for using control file",
                "type": "boolean"
              },
              "multipleFiles": {
                "description": "Flag for using multiple files",
                "type": "boolean"
              },
              "zeroOutNegatives": {
                "description": "Flag for converting negatives to zero",
                "type": "boolean"
              },
              "testFTPConfigs": {
                "description": "Flag for if its a test ftp config",
                "type": "boolean"
              },
              "fieldNameMap": {
                "description": "List of field names",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "ignoreExtraFields": {
                "description": "Flag for ignoring extra fields",
                "type": "boolean"
              },
              "blankQuantityIsZero": {
                "description": "Flag to convert null quantities to zero",
                "type": "boolean"
              },
              "csvDelimiter": {
                "description": "Delimiter",
                "type": "string"
              },
              "productMapping": {
                "title": "productMapping",
                "description": "Enum for fetch file productMapping",
                "type": "string",
                "enum": [
                  "SWAP_PART_NUMBER_WITH_UPC",
                  "SWAP_SKU_WITH_UPC"
                ]
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "ItemQuantity": {
        "title": "Item Quantity",
        "description": "Item Quantity Model",
        "properties": {
          "partNumber": {
            "description": "Part/Product Number",
            "type": "string"
          },
          "upc": {
            "description": "Universal Product Code",
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          },
          "quantity": {
            "description": "Quantity",
            "type": "integer"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "type": "object"
      },
      "RequestLocation": {
        "title": "Request Location",
        "description": "Request Location",
        "properties": {
          "unit": {
            "description": "Unit of distance used for radius",
            "type": "string",
            "default": "MILES",
            "enum": [
              "MILES",
              "KM"
            ]
          },
          "radius": {
            "description": "Distance from location",
            "type": "number"
          },
          "postalCode": {
            "description": "Postal Code of this location",
            "type": "string"
          },
          "latitude": {
            "description": "Latitude coordinate of this location",
            "type": "number"
          },
          "longitude": {
            "description": "Longitude coordinate of this location",
            "type": "number"
          },
          "countryCode": {
            "description": "Country Code for this location",
            "type": "string"
          },
          "locationCode": {
            "description": "Location Code for this location. This being set will trigger GetInventoryByLocation",
            "type": "string"
          },
          "addressID": {
            "description": "Address ID for this location",
            "type": "integer"
          },
          "customerID": {
            "description": "CustomerID ID for this location",
            "type": "integer"
          },
          "addressLine1": {
            "description": "Address line 1 for this location",
            "type": "string"
          },
          "phone": {
            "description": "Phone number for this location",
            "type": "string"
          },
          "city": {
            "description": "City for this location",
            "type": "string"
          },
          "state": {
            "description": "State for this location",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InventoryResponse": {
        "title": "Inventory Response",
        "description": "Inventory Response",
        "allOf": [
          {
            "properties": {
              "locationName": {
                "description": "Location Name",
                "type": "string"
              },
              "locationCode": {
                "description": "Location Code",
                "type": "string"
              },
              "tenantID": {
                "description": "Tenant Identifier",
                "type": "integer"
              },
              "onHand": {
                "description": "The quantity the location has in its possession",
                "type": "integer"
              },
              "available": {
                "description": "The quantity the location has that are available for purchase",
                "type": "integer"
              },
              "allocated": {
                "description": "The quantity the location has that are already allocated.",
                "type": "integer"
              },
              "pending": {
                "description": "The quantity the location has that are pending.",
                "type": "integer"
              },
              "partNumber": {
                "description": "Part/Product Number",
                "type": "string"
              },
              "upc": {
                "description": "Universal Product Code",
                "type": "string"
              },
              "sku": {
                "description": "Stock Keeping Unit",
                "type": "string"
              },
              "blockAssignment": {
                "description": "Whether or not the product is blocked for assignment",
                "type": "boolean"
              },
              "ltd": {
                "description": "Custom field used for store prioritization",
                "type": "number"
              },
              "floor": {
                "description": "Absolute minimum quantity of this item that should be in stock at any time",
                "type": "integer"
              },
              "safetyStock": {
                "description": "Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted",
                "type": "integer"
              },
              "distance": {
                "description": "The distance in miles from this location to the item's destination",
                "type": "number"
              },
              "directShip": {
                "description": "Whether this location can ship to a consumer",
                "type": "boolean"
              },
              "transferEnabled": {
                "description": "Whether the location can ship to another location (store), thus restocking that location.",
                "type": "boolean"
              },
              "pickup": {
                "description": "Whether a consumer can pick up product at this location (store)",
                "type": "boolean"
              },
              "countryCode": {
                "description": "The country code of this location",
                "type": "string"
              },
              "currencyID": {
                "description": "The currency identifier for the retailPrice",
                "type": "integer"
              },
              "retailPrice": {
                "description": "The price of the product at this location",
                "type": "number"
              },
              "inventoryLocatorName": {
                "description": "The inventory locator name of the individual item",
                "type": "string"
              },
              "attributes": {
                "description": "List of Inventory Attributes",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "taggedInventory": {
                "$ref": "#/components/schemas/taggedInventoryMap"
              },
              "futureInventory": {
                "$ref": "#/components/schemas/futureInventoryArray"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "InventoryRequest": {
        "title": "Inventory Request",
        "description": "Request for getting Inventory",
        "required": [
          "type",
          "items"
        ],
        "allOf": [
          {
            "properties": {
              "type": {
                "description": "Inventory Request Type Enum",
                "type": "string",
                "enum": [
                  "ALL",
                  "PARTIAL",
                  "ANY",
                  "ALL_STORES"
                ]
              },
              "items": {
                "description": "List of Items to search on",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ItemQuantity"
                }
              },
              "requestLocation": {
                "$ref": "#/components/schemas/RequestLocation"
              },
              "limit": {
                "description": "The maximum number of results to return, defaults to 100 for most",
                "type": "integer"
              },
              "locationWhitelist": {
                "description": "List of location codes that are allowed to be included in results",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "locationPriorityList": {
                "description": "List of location codes that should be returned before all others, preventing them from being excluded by limit",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "locationBlacklist": {
                "description": "List of location codes that are NOT allowed to be included in results",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "ignoreSafetyStock": {
                "description": "Whether to ignore the safety stock buffer put in place",
                "type": "boolean"
              },
              "includeNegativeInventory": {
                "description": "Whether to allow items with negative inventory in the results",
                "type": "boolean"
              },
              "directShip": {
                "description": "Whether to limit results to locations that are shipping enabled",
                "type": "boolean"
              },
              "transferEnabled": {
                "description": "Filter results by locations that have transfer enabled (true) or don't (false)",
                "type": "boolean"
              },
              "pickup": {
                "description": "Filter results by locations that have finderbot enabled (true) or don't (false)",
                "type": "boolean"
              },
              "includeInAggregateExport": {
                "description": "Filter results by locations that have aggregate export enabled (true) or don't (false)",
                "type": "boolean"
              },
              "includeInLocationExport": {
                "description": "Filter results by locations that have physical storefronts (true) or don't (false)",
                "type": "boolean"
              },
              "excludeBlockedAssignment": {
                "description": "Filter out results that are blocked from assignment (at the product/location level) ",
                "type": "boolean"
              },
              "includeAttributes": {
                "description": "Flag to include attributes or not",
                "type": "boolean"
              },
              "includeFutureInventory": {
                "description": "If set to true, include future inventory in response (records that were set with a deliveryDate).",
                "type": "boolean"
              },
              "includeNegativeFutureInventory": {
                "description": "Whether to allow items with negative future inventory in the results",
                "type": "boolean"
              },
              "deliveryDateBefore": {
                "description": "DateTime to filter for only future inventory with a delivery date before or equal to the given date",
                "type": "string",
                "format": "date-time"
              },
              "deliveryDateAfter": {
                "description": "DateTime to filter for only future inventory with a delivery date after or equal to the given date",
                "type": "string",
                "format": "date-time"
              },
              "sortByEnum": {
                "description": "What to sort the inventory results by. Only used for GetInventoryByLocation calls (locationCode must be set)",
                "type": "string",
                "enum": [
                  "ON_HAND",
                  "AVAILABLE",
                  "ALLOCATED",
                  "PART_NUMBER",
                  "PRODUCT_ID"
                ]
              },
              "sortDescending": {
                "description": "Whether to sort by descending order or not. Must be used in conjunction with the sortByEnum value",
                "type": "boolean"
              },
              "forceDefaultsForUnspecifiedTagCategories": {
                "description": "Whether to force populate default tags onto the request if they are unspecified for any tag category",
                "type": "boolean"
              },
              "tags": {
                "$ref": "#/components/schemas/tags"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "AggregateRequest": {
        "title": "Aggregate Request",
        "description": "Request for aggregating inventory",
        "required": [
          "items"
        ],
        "allOf": [
          {
            "properties": {
              "items": {
                "description": "List of Items to search on",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InventoryItem"
                }
              },
              "ignoreSafetyStock": {
                "description": "Whether to ignore the safety stock buffer put in place",
                "type": "boolean"
              },
              "includeNegativeInventory": {
                "description": "Whether to allow items with negative inventory in the results",
                "type": "boolean"
              },
              "directShip": {
                "description": "Whether to limit results to locations that are shipping enabled",
                "type": "boolean"
              },
              "transferEnabled": {
                "description": "Filter results by locations that have transfer enabled (true) or don't (false)",
                "type": "boolean"
              },
              "pickup": {
                "description": "Filter results by pickup enabled (true) or not (false)",
                "type": "boolean"
              },
              "tags": {
                "$ref": "#/components/schemas/tags"
              },
              "includeFutureInventory": {
                "description": "Enum for including future inventory: [futureOnly, futureAndCurrent]",
                "type": "string",
                "enum": [
                  "futureOnly",
                  "futureAndCurrent"
                ]
              },
              "includeNegativeFutureInventory": {
                "description": "Whether to allow items with negative future inventory in the results",
                "type": "boolean"
              },
              "futureStartDate": {
                "description": "Future start Date at which the inventory should be allocated against.",
                "type": "string",
                "format": "date-time"
              },
              "futureEndDate": {
                "description": "Future end Date at which the inventory should be allocated against.",
                "type": "string",
                "format": "date-time"
              },
              "forceDefaultsForUnspecifiedTagCategories": {
                "description": "Whether to force populate default tags onto the request if they are unspecified for any tag category",
                "type": "boolean"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "AggregateResponse": {
        "title": "Aggregate Response",
        "description": "Response for aggregating Inventory",
        "allOf": [
          {
            "properties": {
              "tenantID": {
                "description": "Manufacturer Identifier",
                "type": "integer"
              },
              "onHand": {
                "description": "The quantity the location has in its possession",
                "type": "integer"
              },
              "available": {
                "description": "The quantity the location has that are available for purchase",
                "type": "integer"
              },
              "partNumber": {
                "description": "Part/Product Number",
                "type": "string"
              },
              "upc": {
                "description": "Universal Product Code",
                "type": "string"
              },
              "sku": {
                "description": "Stock Keeping Unit",
                "type": "string"
              },
              "floor": {
                "description": "Absolute minimum quantity of this item that should be in stock at any time",
                "type": "integer"
              },
              "tags": {
                "$ref": "#/components/schemas/tags"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "LocationRequest": {
        "title": "LocationRequest",
        "description": "Location Request Object",
        "required": [
          "locationCode",
          "directShip",
          "pickup",
          "tenantID",
          "active",
          "locationName"
        ],
        "properties": {
          "tenantID": {
            "description": "Tenant ID",
            "type": "integer"
          },
          "locationCode": {
            "description": "Location Code",
            "type": "string"
          },
          "express": {
            "description": "Flag for whether the location is express enabled or not",
            "type": "boolean"
          },
          "includeInLocationExport": {
            "description": "Flag for whether the location is to be included in location exports",
            "type": "boolean"
          },
          "includeInAggregate": {
            "description": "Flag for whether the location is to be included in aggregate exports",
            "type": "boolean"
          },
          "active": {
            "description": "Flag for whether the location is active",
            "type": "boolean"
          },
          "directShip": {
            "description": "Flag for whether the location allows Direct Ship (STH) orders",
            "type": "boolean"
          },
          "pickup": {
            "description": "Flag for whether the location allows Pickup (BOPIS) orders",
            "type": "boolean"
          },
          "transferEnabled": {
            "description": "Flag for whether the location allows Transfer orders",
            "type": "boolean"
          },
          "postalCode": {
            "description": "Postal Code",
            "type": "string"
          },
          "countryCode": {
            "description": "Country Code",
            "type": "string"
          },
          "latitude": {
            "description": "Latitude",
            "type": "number"
          },
          "longitude": {
            "description": "Longitude",
            "type": "number"
          },
          "locationName": {
            "description": "Location Name",
            "type": "string"
          },
          "wmsEnabled": {
            "description": "Flag for whether the location is WMS Enabled",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RefreshItem": {
        "title": "Refresh Item",
        "description": "Refresh Item",
        "properties": {
          "partNumber": {
            "description": "Part/Product Number",
            "type": "string"
          },
          "upc": {
            "description": "Universal Product Code",
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          },
          "binID": {
            "description": "Bin Location Identifier",
            "type": "integer"
          },
          "LTD": {
            "description": "Custom field used for store prioritization",
            "type": "number"
          },
          "floor": {
            "description": "Absolute minimum quantity of this item that should be in stock at any time",
            "type": "integer"
          },
          "safetyStock": {
            "description": "Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted",
            "type": "integer"
          },
          "quantity": {
            "description": "Current Quantity of Item",
            "type": "integer"
          },
          "retailPrice": {
            "description": "Stock Keeping Unit",
            "type": "number"
          },
          "currencyID": {
            "description": "The price of the item",
            "type": "integer"
          },
          "inventoryLocatorName": {
            "description": "The inventory locator name of the item",
            "type": "string"
          },
          "attributes": {
            "description": "List of Item Attributes",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "deliveryDate": {
            "description": "Date at which this inventory will become available. Expected format '2020-09-28T12:00:00-0500'",
            "type": "string",
            "format": "date-time"
          },
          "externalID": {
            "description": "External Identifier for the given future inventory record. Will not create a new future inventory record unless deliveryDate is specified",
            "type": "string"
          },
          "lotCode": {
            "description": "Track which lot a product is manufactured in",
            "type": "string"
          },
          "condition": {
            "description": "Describes the state of the product",
            "type": "string"
          },
          "serialNumber": {
            "description": "A serial number is unique to a specific, physical unit of inventory",
            "type": "string"
          },
          "date": {
            "description": "Used by the retailer for storing information related to manufacturing date or expiry date and use date to allocate for better stock management",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "RefreshRequest": {
        "title": "Refresh Request",
        "description": "Request needed for refreshing inventory",
        "required": [
          "locationCode"
        ],
        "allOf": [
          {
            "properties": {
              "items": {
                "description": "List of items to refresh",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RefreshItem"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "AdjustItem": {
        "title": "Adjust Item",
        "description": "Adjust Item",
        "properties": {
          "partNumber": {
            "description": "Part/Product Number",
            "type": "string"
          },
          "upc": {
            "description": "Universal Product Code",
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          },
          "binID": {
            "description": "Bin Location Identifier",
            "type": "integer"
          },
          "quantity": {
            "description": "Current Quantity of Item",
            "type": "integer"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "deliveryDate": {
            "description": "Date at which this inventory will become available. Expected format '2020-09-28T12:00:00-0500'",
            "type": "string",
            "format": "date-time"
          },
          "externalID": {
            "description": "External Identifier for the given future inventory record. Will not create a new future inventory record unless deliveryDate is specified",
            "type": "string"
          },
          "lotCode": {
            "description": "Track which lot a product is manufactured in",
            "type": "string"
          },
          "condition": {
            "description": "Describes the state of the product",
            "type": "string"
          },
          "serialNumber": {
            "description": "A serial number is unique to a specific, physical unit of inventory",
            "type": "string"
          },
          "date": {
            "description": "Used by the retailer for storing information related to manufacturing date or expiry date and use date to allocate for better stock management",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "AdjustRequest": {
        "title": "Adjust Request",
        "description": "Request needed for adjusting inventory",
        "allOf": [
          {
            "properties": {
              "items": {
                "description": "List of items to adjust",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustItem"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "DeleteItemRequest": {
        "title": "Delete Item Request",
        "description": "Request needed for deleting inventory",
        "properties": {
          "dryRun": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "explicit": {
            "description": "Flag used to request explicit inventory, location, pick wave, and audit information for each request item.",
            "type": "boolean"
          },
          "locationCodes": {
            "description": "An array of locationCodes to be considered for item-deletion purposes. Optional.\n    All locationCodes associated with the requesting tenant will be considered if no locationCodes are provided.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allLocations": {
            "description": "Flag used to request deletion of inventory across all locations (overrides locationCodes).",
            "type": "boolean"
          },
          "partNumber": {
            "description": "The part number of the item to be deleted. Supports basic regex operators: .*+?^$[]",
            "type": "string"
          },
          "upc": {
            "description": "The upc of the item to be deleted. Supports basic regex operators: .*+?^$[]",
            "type": "string"
          },
          "sku": {
            "description": "The sku of the item to be deleted. Supports basic regex operators: .*+?^$[]",
            "type": "string"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "lotCode": {
            "description": "Track which lot a product is manufactured in",
            "type": "string"
          },
          "condition": {
            "description": "Describes the state of the product",
            "type": "string"
          },
          "serialNumber": {
            "description": "A serial number is unique to a specific, physical unit of inventory",
            "type": "string"
          },
          "date": {
            "description": "Used by the retailer for storing information related to manufacturing date or expiry date and use date to allocate for better stock management",
            "type": "string",
            "format": "date-time"
          },
          "deleteGranularRecord": {
            "description": "Flag to determine whether to delete a granular record without granular fields or delete all associated granular records. Only considered when no granular fields are specified.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ProductIdentifier": {
        "title": "ProductIdentifier",
        "description": "Product Identifier Model",
        "properties": {
          "partNumber": {
            "description": "Part/Product Number",
            "type": "string"
          },
          "upc": {
            "description": "Universal Product Code",
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          }
        },
        "type": "object"
      },
      "M_DeleteItem": {
        "title": "M_DeleteItem",
        "description": "Delete Item Model",
        "properties": {
          "productID": {
            "description": "Product Identifier",
            "type": "integer"
          },
          "inventoryIDs": {
            "description": "List of inventory identifiers associated with the deleted item",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "locationIDs": {
            "description": "List of location identifiers associated with the deleted item",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "locationCodes": {
            "description": "List of location codes associated with the deleted item",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "auditIDs": {
            "description": "List of audit identifiers associated with the deleted item",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "itemIdentifier": {
            "$ref": "#/components/schemas/ProductIdentifier"
          }
        },
        "type": "object"
      },
      "DeleteItemResponse": {
        "title": "Delete Item Response",
        "description": "Delete Item Response",
        "properties": {
          "dryRun": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "itemsDeleted": {
            "description": "Items deleted due to the request",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/M_DeleteItem"
            }
          },
          "totalAuditsDeleted": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "totalInventoryEntriesDeleted": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "totalLocationsAffected": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "totalPickWavesDeleted": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "totalProductsDeleted": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "jobIDs": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DeleteFutureItemRequest": {
        "title": "Delete Future Item Request",
        "description": "Request needed for deleting future inventory",
        "properties": {
          "dryRun": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "explicit": {
            "description": "Flag used to request explicit inventory, location, pick wave, and audit information for each request item.",
            "type": "boolean"
          },
          "locationCodes": {
            "description": "An array of locationCodes to be considered for item-deletion purposes. Optional.\n    All locationCodes associated with the requesting tenant will be considered if no locationCodes are provided.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allLocations": {
            "description": "Flag used to request deletion of future inventory across all locations (overrides locationCodes).",
            "type": "boolean"
          },
          "partNumber": {
            "description": "The part number of the item to be deleted. Supports basic regex operators: .*+?^$[]",
            "type": "string"
          },
          "upc": {
            "description": "The upc of the item to be deleted. Supports basic regex operators: .*+?^$[]",
            "type": "string"
          },
          "sku": {
            "description": "The sku of the item to be deleted. Supports basic regex operators: .*+?^$[]",
            "type": "string"
          },
          "futureStartDate": {
            "description": "Start of future date range to search on. Required field example '2023-01-26T19:59:00+0000'",
            "type": "string",
            "format": "date-time"
          },
          "futureEndDate": {
            "description": "End of future date range to search on. Required Field example '2023-01-26T19:59:00+0000'",
            "type": "string",
            "format": "date-time"
          },
          "externalIDs": {
            "description": "An array of externalIDs to be considered for item-deletion purposes. Optional.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lotCode": {
            "description": "Track which lot a product is manufactured in",
            "type": "string"
          },
          "condition": {
            "description": "Describes the state of the product",
            "type": "string"
          },
          "serialNumber": {
            "description": "A serial number is unique to a specific, physical unit of inventory",
            "type": "string"
          },
          "date": {
            "description": "Used by the retailer for storing information related to manufacturing date or expiry date and use date to allocate for better stock management",
            "type": "string",
            "format": "date-time"
          },
          "deleteGranularRecord": {
            "description": "Flag to determine whether to delete a granular record without granular fields or delete all associated granular records. Only considered when no granular fields are specified.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DeleteFutureItemResponse": {
        "title": "Delete Future Item Response",
        "description": "Delete Future Item Response",
        "properties": {
          "dryRun": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "itemsDeleted": {
            "description": "Items deleted due to the request",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/M_DeleteItem"
            }
          },
          "totalInventoryEntriesDeleted": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "totalLocationsAffected": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "totalexternalIDsAffected": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "jobIDs": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DeleteItemsRequest": {
        "title": "Delete Item Request",
        "description": "Request needed for deleting inventory",
        "properties": {
          "dryRun": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "explicit": {
            "description": "Flag used to request explicit inventory, location, pick wave, and audit information for each request item.",
            "type": "boolean"
          },
          "locationCodes": {
            "description": "An array of locationCodes to be considered for item-deletion purposes. Optional.\n    All locationCodes associated with the requesting tenant will be considered if no locationCodes are provided.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allLocations": {
            "description": "Flag used to request deletion of inventory across all locations (overrides locationCodes).",
            "type": "boolean"
          },
          "items": {
            "description": "List of items to delete. Supports basic regex operators: .*+?^$[]",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryItem"
            }
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "type": "object"
      },
      "OrderItemInformationRequest": {
        "title": "Order Item Information Request",
        "description": "Request for getting order item information",
        "allOf": [
          {
            "properties": {
              "orderID": {
                "description": "Order Identifier",
                "type": "integer"
              },
              "items": {
                "description": "List of Items to search on",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InventoryItem"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseRequest"
          }
        ]
      },
      "OrderItemInformationEvent": {
        "title": "Order Item Information Event",
        "description": "Order Item Information Event",
        "allOf": [
          {
            "properties": {
              "date": {
                "description": "Date of the event",
                "type": "string"
              },
              "eventType": {
                "description": "Type of event",
                "type": "string",
                "enum": [
                  "ALLOCATED",
                  "DEALLOCATED",
                  "FULFILLED",
                  "PICKED",
                  "DEALLOCATE_FULFILL"
                ]
              },
              "quantity": {
                "description": "Quantity",
                "type": "integer"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "OrderItemInformation": {
        "title": "Order Item Information",
        "description": "Order Item Information",
        "allOf": [
          {
            "properties": {
              "orderID": {
                "description": "Order Identifier",
                "type": "integer"
              },
              "orderItemID": {
                "description": "Order Item Identifier",
                "type": "integer"
              },
              "locationID": {
                "description": "Location Identifier",
                "type": "integer"
              },
              "locationActive": {
                "description": "Flag for whether the location is active",
                "type": "boolean"
              },
              "locationCode": {
                "description": "External Store Identifier",
                "type": "integer"
              },
              "locationName": {
                "description": "Location Name",
                "type": "string"
              },
              "binID": {
                "description": "Bin Identifier",
                "type": "integer"
              },
              "partNumber": {
                "description": "Part/Product Number",
                "type": "string"
              },
              "upc": {
                "description": "Universal Product Code",
                "type": "string"
              },
              "sku": {
                "description": "Stock Keeping Unit",
                "type": "string"
              },
              "ltd": {
                "description": "Custom field used for store prioritization",
                "type": "string"
              },
              "floor": {
                "description": "Absolute minimum quantity of this item that should be in stock at any time",
                "type": "integer"
              },
              "safetyStock": {
                "description": "Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted",
                "type": "integer"
              },
              "onHand": {
                "description": "The quantity the location has in its possession",
                "type": "integer"
              },
              "available": {
                "description": "The quantity the location has that are available for purchase",
                "type": "integer"
              },
              "allocated": {
                "description": "The quantity the location has that are allocated",
                "type": "integer"
              },
              "allocates": {
                "description": "Total number of allocations",
                "type": "integer"
              },
              "deallocates": {
                "description": "Total number of deallocations",
                "type": "integer"
              },
              "fulfills": {
                "description": "Total number of fulfillments. Should never be greater than 1.",
                "type": "integer"
              },
              "picks": {
                "description": "Total number of picks (WMS only)",
                "type": "integer"
              },
              "pendingQuantity": {
                "description": "Pending quantity (WMS only)",
                "type": "integer"
              },
              "events": {
                "description": "Order Identifier",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderItemInformationEvent"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/BaseResponse"
          }
        ]
      },
      "InventoryFutureInventory": {
        "title": "Future Inventory",
        "description": "Future Inventory Model",
        "properties": {
          "futureInventoryID": {
            "description": "Future Inventory unique identifier.",
            "type": "integer"
          },
          "onhand": {
            "description": "Expected change in the actual onhand inventory value when this future inventory record is released.",
            "type": "integer"
          },
          "available": {
            "description": "Expected change in the actual available inventory value when this future inventory record is released.",
            "type": "integer"
          },
          "allocated": {
            "description": "Expected change in the actual allocated inventory value when this future inventory record is released.",
            "type": "integer"
          },
          "pending": {
            "description": "Number of new expected pending items that would be created by releasing this future inventory record assuming no actual inventory is available",
            "type": "integer"
          },
          "type": {
            "description": "Type of future inventory update: REFRESH or ADJUST.",
            "type": "string"
          },
          "deliveryDate": {
            "description": "Date at which this inventory will become available. Expected format '2020-09-28T12:00:00-0500'",
            "type": "string",
            "format": "date-time"
          },
          "createDate": {
            "description": "Date the inventory was created.",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "InventoryProduct": {
        "title": "Product",
        "description": "Product within a bin",
        "properties": {
          "partNumber": {
            "description": "Part Number",
            "type": "string"
          },
          "upc": {
            "description": "UPC",
            "type": "string"
          },
          "sku": {
            "description": "SKU",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InventoryItem": {
        "title": "Item",
        "description": "Item",
        "properties": {
          "partNumber": {
            "description": "Part/Product Number",
            "type": "string"
          },
          "upc": {
            "description": "Universal Product Code",
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "type": "object"
      },
      "InventoryTag": {
        "title": "Tag Response",
        "description": "Request/Response object for a tag",
        "properties": {
          "tagID": {
            "description": "Tag ID",
            "type": "integer"
          },
          "tagValue": {
            "description": "Tag Value",
            "type": "string"
          },
          "isDefault": {
            "description": "Whether or not this tag is the default tag for its category.",
            "type": "boolean"
          },
          "percent": {
            "description": "Percentage of available inventory this tag will get when the percentage update is performed. Must be between 0 and 100 (inclusive).",
            "type": "integer"
          },
          "created": {
            "description": "Date this tag was created",
            "type": "string"
          },
          "updated": {
            "description": "Date this tag was last updated",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InventoryTagQuantity": {
        "title": "Tag quantity response",
        "description": "Response object for a tag quantity",
        "properties": {
          "onHand": {
            "description": "The quantity the the location has in its possession for this tag",
            "type": "integer"
          },
          "available": {
            "description": "The quantity the location has that are available for purchase for this tag",
            "type": "integer"
          },
          "allocated": {
            "description": "The quantity the location has that are already allocated for this tag",
            "type": "integer"
          },
          "pending": {
            "description": "The quantity the location has that are pending for this tag",
            "type": "integer"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "futureInventory": {
            "$ref": "#/components/schemas/futureInventoryArray"
          }
        },
        "type": "object"
      }
    },
    "requestBodies": {
      "UpdateBinRequest": {
        "description": "Request to update a bin",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateBinRequest"
            }
          }
        }
      },
      "CreateExportSettingsRequest": {
        "description": "Request to create a new Export Settings",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateExportSettingsRequest"
            }
          }
        }
      },
      "ExportInventoryRequest": {
        "description": "Request to run an inventory export",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ExportInventoryRequest"
            }
          }
        }
      },
      "UpdateExportSettingsRequest": {
        "description": "Request to update an existing Export Settings",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateExportSettingsRequest"
            }
          }
        }
      },
      "CreateExportSettingsFTPRequest": {
        "description": "Request to create a new Export Settings FTP",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateExportSettingsFTPRequest"
            }
          }
        }
      },
      "UpdateExportSettingsFTPRequest": {
        "description": "Request to update an existing Export Settings FTP",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateExportSettingsFTPRequest"
            }
          }
        }
      },
      "CreateExportSettingsS3Request": {
        "description": "Request to create a new Export Settings S3",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateExportSettingsS3Request"
            }
          }
        }
      },
      "UpdateExportSettingsS3Request": {
        "description": "Request to update an existing Export Settings S3",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateExportSettingsS3Request"
            }
          }
        }
      },
      "CreateExportSettingsGCSRequest": {
        "description": "Request body for creating Export Settings GCS",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateExportSettingsGcsRequest"
            }
          }
        }
      },
      "UpdateExportSettingsGCSRequest": {
        "description": "Request body for updating Export Settings GCS",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateExportSettingsGcsRequest"
            }
          }
        }
      },
      "ShipmentInventoryAllocationRequest": {
        "description": "Request to future and current inventory allocations of item",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ShipmentInventoryAllocationRequest"
            }
          }
        }
      },
      "UpdateTenantSiloConfigRequest": {
        "description": "Request to create tenant silo config",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateTenantSiloConfigRequest"
            }
          }
        }
      },
      "Tag": {
        "description": "Request create or modify Tag",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InventoryTag"
            }
          }
        }
      },
      "TagCategory": {
        "description": "Request create or modify Tag Categories",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TagCategory"
            }
          }
        }
      },
      "InvalidateCacheRequest": {
        "description": "Request to invalidate a specific cache entry by its key",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InvalidateCacheRequest"
            }
          }
        }
      },
      "AllocateInventoryRequest": {
        "description": "Request to allocate inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AllocateInventoryRequest"
            }
          }
        }
      },
      "TransitionCartRequest": {
        "description": "Request needed for transitioning cart allocations to order/shipment allocations",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TransitionCartRequest"
            }
          }
        }
      },
      "CreateBinRequest": {
        "description": "Request to create a new bin",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateBinRequest"
            }
          }
        }
      },
      "BinSearchRequest": {
        "description": "Request to allocate inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BinSearchRequest"
            }
          }
        }
      },
      "LoadBinInventoryRequest": {
        "description": "Request to load bin inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LoadBinInventoryRequest"
            }
          }
        }
      },
      "UpdateBinsRequest": {
        "description": "Request to update multiple bins",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateBinsRequest"
            }
          }
        }
      },
      "BlockAssignmentRequest": {
        "description": "Request to block assignment on the product",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BlockAssignmentRequest"
            }
          }
        }
      },
      "FetchFileConfigRequest": {
        "description": "Request to fetch file configs",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FetchFileConfigRequest"
            }
          }
        }
      },
      "InventoryRequest": {
        "description": "Request to get inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InventoryRequest"
            }
          }
        }
      },
      "AggregateRequest": {
        "description": "Request to aggregate inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AggregateRequest"
            }
          }
        }
      },
      "LocationRequest": {
        "description": "Location Request Object",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LocationRequest"
            }
          }
        }
      },
      "RefreshRequest": {
        "description": "Request to refresh inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RefreshRequest"
            }
          }
        }
      },
      "AdjustRequest": {
        "description": "Request to adjust inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AdjustRequest"
            }
          }
        }
      },
      "DeleteItemRequest": {
        "description": "Request to delete item(s)",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeleteItemRequest"
            }
          }
        }
      },
      "DeleteFutureItemRequest": {
        "description": "Request to delete future item(s)",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeleteFutureItemRequest"
            }
          }
        }
      },
      "DeleteItemsRequest": {
        "description": "Request to batch delete items",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeleteItemsRequest"
            }
          }
        }
      },
      "OrderItemInformationRequest": {
        "description": "Request to retrieve order item information",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrderItemInformationRequest"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer scheme.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "servers": [
    {
      "url": "https://t{tenantId}-s{siteId}.{env}.usc1.kibocommerce.com/api",
      "description": "GCP-US Site Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "siteId": {
          "default": "0",
          "description": "Id of the Site"
        },
        "env": {
          "default": "sb",
          "enum": [
            "sb",
            "tp1",
            "tp2",
            "tp3",
            "tp4",
            "tp5",
            "stg2"
          ]
        }
      }
    },
    {
      "url": "https://t{tenantId}.{env}.usc1.kibocommerce.com/api",
      "description": "GCP-US Tenant Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "env": {
          "default": "sb",
          "enum": [
            "sb",
            "tp1",
            "tp2",
            "tp3",
            "tp4",
            "tp5",
            "stg2"
          ]
        }
      }
    },
    {
      "url": "https://t{tenantId}-s{siteId}.{env}.mozu.com/api",
      "description": "Site Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "siteId": {
          "default": "0",
          "description": "Id of the Site"
        },
        "env": {
          "default": "sandbox",
          "enum": [
            "sandbox",
            "tp1",
            "tp2",
            "tp3",
            "tp4",
            "tp5",
            "stg1"
          ]
        }
      }
    },
    {
      "url": "https://t{tenantId}.{env}.mozu.com/api",
      "description": "Tenant Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "env": {
          "default": "sandbox",
          "enum": [
            "sandbox",
            "tp1",
            "tp2",
            "tp3",
            "tp4",
            "tp5",
            "stg1",
            "stg2"
          ]
        }
      }
    },
    {
      "url": "https://home.mozu.com/api",
      "description": "HomePod Api"
    },
    {
      "url": "https://t{tenantId}.{env}.euw1.kibocommerce.com/api",
      "description": "EURO Tenant Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "env": {
          "default": "sb",
          "enum": [
            "sb",
            "tp1"
          ]
        }
      }
    },
    {
      "url": "https://t{tenantId}-s{siteId}.{env}.euw1.kibocommerce.com/api",
      "description": "EURO Site Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "siteId": {
          "default": "0",
          "description": "Id of the Site"
        },
        "env": {
          "default": "sb",
          "enum": [
            "sb",
            "tp1"
          ]
        }
      }
    },
    {
      "url": "https://home.euw1.kibocommerce.com/api",
      "description": "EURO HomePod Api"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ]
}