{
  "openapi": "3.0.1",
  "info": {
    "title": "Content",
    "description": "<div id=\"overview_CONTENT\">\n            <h2>CONTENT</h2>\n            <p>The Content APIs allow you to organize your site content into a hierarchy of folders and documents, as\n                well as control the publishing of your content to the live site with publish sets that group pending\n                changes together to publish at the same time. For more information about managing site content and the associated UI,\n                see the <a href=\"https://docs.kibocommerce.com/help/site-builder\">Site Builder</a> and <a href=\"https://docs.kibocommerce.com/help/publishing\">Publishing</a> user guides.</p>\n            <p>Use the <strong>Document Lists</strong> and <strong>Document List Types</strong> resources to organize your site's documents into a hierarchy. Document lists can\n                contain documents, folders, and complete hierarchies of folders, which contain documents with unique\n                names. The type denotes a content type for that list of folders, sub-folders, and documents such as\n                `web_pages`.</p>\n            <p>Use the <strong>Document Types</strong> and <strong>Document Property Types</strong> resources to manage the document and property types supported by the Content API.</p>\n            <p>Use the <strong>Document Publishing</strong> resource to manage and publish document drafts. The \n                related <strong>Document Publish Set</strong> resource manages publish sets and the pending content drafts.</p>\n        </div>",
    "version": "1.0.1"
  },
  "paths": {
    "/content/documentlists/{documentListName}/documents/{documentId}/content": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Get Document Content",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Get Document Content"
      },
      "head": {
        "tags": [
          "Documents"
        ],
        "summary": "Get Document Content Headers",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Get Document Content Headers"
      },
      "put": {
        "tags": [
          "Documents"
        ],
        "summary": "Update Document Content",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/ContentHttpRequestMessage"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/ContentHttpRequestMessage"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentHttpRequestMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Update Document Content"
      },
      "delete": {
        "tags": [
          "Documents"
        ],
        "summary": "Delete Document Content",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete Document Content"
      }
    },
    "/content/documentlists/{documentListName}/documents/{documentId}/transform": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Get Resized Image",
        "description": "Returns transformations on a document. For example, resizing an image.",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "width",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "height",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxWidth",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxHeight",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quality",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/content/documentlists/{documentListName}/documentTree/{documentName}/content": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Get Document Content by Path",
        "description": "Returns transformations on a document. For example, resizing an image.",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "head": {
        "tags": [
          "Documents"
        ],
        "summary": "Get Document Content Headers by Path",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Get Document Content Headers by Path"
      },
      "put": {
        "tags": [
          "Documents"
        ],
        "summary": "Update Document Content by Path",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "The Mozu.Content.Contracts.DocumentList in which the document resides",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Binary document content to store must be less than 16M",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/ContentHttpRequestMessage"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/ContentHttpRequestMessage"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentHttpRequestMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Update Document Content by Path"
      },
      "delete": {
        "tags": [
          "Documents"
        ],
        "summary": "Delete Document Content by Path",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete Document Content by Path"
      }
    },
    "/content/documentlists/{documentListName}/documentTree/{documentName}/transform": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Get Resized Image by Path",
        "description": "Returns transformations on a document. For example, resizing an image. By Path",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxWidth",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxHeight",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quality",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/content/documentlists/{documentListName}/documents": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Create Document",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Mozu.Content.Contracts.Document to Add to the Mozu.Content.Contracts.DocumentList",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        },
        "description": "Create Document. However, if you are creating an empty folder in the files list then you only need to provide the name, documentTypeFQN, and listFQN fields - replace the name value with the full path of your folder."
      },
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Get Documents",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Mozu.Content.Contracts.PropertyType filter expression to match against document properties. <seealso cref=\"T:Mozu.Core.FilterParsing.FilterParser\" />",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort expression.  <seealso cref=\"T:Mozu.Core.FilterParsing.SortParser\" />",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "First item in the page to return from the total result set",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "if this call should include a adocument that isn't active in the given preview date",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "path from which to return documents",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeSubPaths",
            "in": "query",
            "description": "if true this call will populate Subpaths",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "queryScope",
            "in": "query",
            "description": "Determines if the path parameter is used to scope the query to the specified path or ignored for a global scope.\r\n            Defaults to specified path only. Valid values are: SpecifiedPathOnly, Global",
            "schema": {
              "type": "string",
              "default": "SpecifiedPathOnly"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCollection"
                }
              }
            }
          }
        },
        "description": "Get Documents. To search documents along a particular path, use the filter path such as in \"folder1\\folder2\\\". If no path is provided, then the query will be a global search as it searches from the root of the tree hierarchy."
      },
      "delete": {
        "tags": [
          "Documents"
        ],
        "summary": "Delete Documents",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete Documents"
      }
    },
    "/content/documentlists/{documentListName}/documents/{documentId}": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Get Document",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "if this call should include a adocument that isn't active in the given preview date",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        },
        "description": "Get Document"
      },
      "put": {
        "tags": [
          "Documents"
        ],
        "summary": "Update Document",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "DocumentListName name where the document resides",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Id of the document to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        },
        "description": "Update Document"
      },
      "patch": {
        "tags": [
          "Documents"
        ],
        "summary": "Patch Document",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        },
        "description": "Patch Document"
      },
      "delete": {
        "tags": [
          "Documents"
        ],
        "summary": "Delete Document",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete Document"
      }
    },
    "/content/documentlists/{documentListName}/documentTree/{documentName}": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Get Document by Path",
        "description": "Retrieves a specific Document within the specified ContentCollection using the specified document name, unique within a specific folder with the specified documentId, version, and status.",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "if this call should include a document that isn't active in the given preview date",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        }
      }
    },
    "/content/documentlists/{documentListName}/documents/move": {
      "put": {
        "tags": [
          "Documents"
        ],
        "summary": "Move Document",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "DocumentListName name where the document resides",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourcePath",
            "in": "query",
            "description": "Source path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destPath",
            "in": "query",
            "description": "Destination path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "renameDuplicates",
            "in": "query",
            "description": "Flag to rename file if duplicate filename exists in destination (defaults to true)",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "previewMode",
            "in": "query",
            "description": "Flag to denote whether to preview move operation or actually perform (defaults to false)",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentMoveSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentMoveSummary"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentMoveSummary"
                }
              }
            }
          }
        },
        "description": "Move Document. This updates the path on all documents within a given source path to a new destination path, such as when moving documents between folders. Individual document moves should be made through the UpdateDocument operation instead."
      }
    },
    "/content/documentlists/{documentListName}/documents/copy": {
      "put": {
        "tags": [
          "Documents"
        ],
        "summary": "Copy Document",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "DocumentListName name where the documents reside",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request containing Document Ids to copy and the destination path",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DocumentCopyRequest"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/DocumentCopyRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentCopyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCopyResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCopyResponse"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCopyResponse"
                }
              }
            }
          }
        },
        "description": "Copy Document"
      }
    },
    "/content/documentlists": {
      "post": {
        "tags": [
          "DocumentList"
        ],
        "summary": "Create DocumentList",
        "requestBody": {
          "description": "DocumentListName",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DocumentList"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/DocumentList"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              }
            }
          }
        },
        "description": "Create DocumentList",
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "DocumentList"
        ],
        "summary": "Get Document Lists",
        "description": "Retrieve a paged documentListName of all document lists",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "maximum number of items to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListCollection"
                }
              }
            }
          }
        }
      }
    },
    "/content/documentlists/{documentListName}": {
      "get": {
        "tags": [
          "DocumentList"
        ],
        "summary": "Get Document List",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "Name of document documentListName to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              }
            }
          }
        },
        "description": "Get Document List. The document list can only be accessed if the API context is inclusive of the document list's scope. A document list always belongs to a tenant context, denoted by the scopeType and scopeId fields. For example, if a list belongs to Catalog 123 then it is denoted by scopeType=catalog and scopeId=123."
      },
      "put": {
        "tags": [
          "DocumentList"
        ],
        "summary": "Update Document List",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "The name of the documentList to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content Collection values to apply",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DocumentList"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/DocumentList"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentList"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentList"
                }
              }
            }
          }
        },
        "description": "Update Document List. The document list can only be accessed if the API context is inclusive of the document list's scope. A document list always belongs to a tenant context, denoted by the scopeType and scopeId fields. For example, if a list belongs to Catalog 123 then it is denoted by scopeType=catalog and scopeId=123."
      },
      "delete": {
        "tags": [
          "DocumentList"
        ],
        "summary": "Delete Document List",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "description": "Name of content documentListName to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete Document List"
      }
    },
    "/content/documentlists/{documentListName}/views/{viewName}/documents": {
      "get": {
        "tags": [
          "Views"
        ],
        "summary": "Get View Documents",
        "parameters": [
          {
            "name": "documentListName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCollection"
                }
              }
            }
          }
        },
        "description": "Get View Documents"
      }
    },
    "/content/documentlistTypes": {
      "post": {
        "tags": [
          "DocumentListType"
        ],
        "summary": "Create Document List Type",
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DocumentListType"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/DocumentListType"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentListType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              }
            }
          }
        },
        "description": "Create Document List Type. Creating a new documentListType will tell the Content service to immediately create a document list of the new type within the set scopeType. For instance, a scopeType of \"site\" will create a list in each site for the tenant. Any defaultDocuments defined for the type will be created within each list, which will be addressable via the type's fully qualified name (FQN) and will use the type's defined views, usages, and metadata by default.",
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "DocumentListType"
        ],
        "summary": "Get Document List Types",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListTypeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListTypeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListTypeCollection"
                }
              }
            }
          }
        },
        "description": "Get Document List Types. The list type denotes a content type for that list of folders, sub-folders, and documents. The immutable document list types that are defined out-of-the-box are pages, siteSnippets, files, siteSettings, catalogContent, pageTemplateContent, emailTemplateContent, and entityEditors."
      }
    },
    "/content/documentlistTypes/{documentListTypeFQN}": {
      "put": {
        "tags": [
          "DocumentListType"
        ],
        "summary": "Update Document List Type",
        "parameters": [
          {
            "name": "documentListTypeFQN",
            "in": "path",
            "description": "The name of the document documentListName to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content Collection values to apply",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DocumentListType"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/DocumentListType"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentListType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              }
            }
          }
        },
        "description": "Update Document List Type"
      },
      "get": {
        "tags": [
          "DocumentListType"
        ],
        "summary": "Get Document List Type",
        "parameters": [
          {
            "name": "documentListTypeFQN",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentListType"
                }
              }
            }
          }
        },
        "description": "Get Document List Type"
      }
    },
    "/content/documentpublishing/draft": {
      "get": {
        "tags": [
          "DocumentPublishing"
        ],
        "summary": "Get Document Draft Summaries",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "maximum number of items to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "documentLists",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDraftSummaryPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDraftSummaryPagedCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDraftSummaryPagedCollection"
                }
              }
            }
          }
        },
        "description": "Get Document Draft Summaries"
      },
      "post": {
        "tags": [
          "DocumentPublishing"
        ],
        "summary": "Delete Document Drafts",
        "description": "Remove draft of each Document associated with te id in documentIds. Send empty body to remove all drafts",
        "parameters": [
          {
            "name": "documentLists",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/octet-stream": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/content/documentpublishing/active": {
      "put": {
        "tags": [
          "DocumentPublishing"
        ],
        "summary": "Publish Documents",
        "description": "Publishes draft of each Document associated with the id in documentIds. Send empty body to publish all drafts",
        "parameters": [
          {
            "name": "documentLists",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/octet-stream": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/content/publishsets/{code}/items": {
      "get": {
        "tags": [
          "DocumentPublishSet"
        ],
        "summary": "Get Publish Set Items",
        "description": "Retrieve a paged collection of publish set Items.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "code of the publish set.  Use UNASSIGNED or ALL to denote those special cases",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "maximum number of items to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "start index",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDraftSummaryPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDraftSummaryPagedCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDraftSummaryPagedCollection"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DocumentPublishSet"
        ],
        "summary": "Add Publish Set Items",
        "description": "Adds a set of documents by id to a publish set.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "code of the publish set.  Use UNASSIGNED or ALL to denote those special cases",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "documentId/doclist pairs to add to the publish set",
          "content": {
            "text/plain": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddOrDeletePublishItem"
                }
              }
            },
            "application/octet-stream": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddOrDeletePublishItem"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddOrDeletePublishItem"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/content/publishsets/{code}": {
      "post": {
        "tags": [
          "DocumentPublishSet"
        ],
        "summary": "Delete Publish Set",
        "description": "Adds a set of documents by id to a publish set.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "code of the publish set.  Use UNASSIGNED or ALL to denote those special cases",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shouldDiscard",
            "in": "query",
            "description": "should trash the drafts in the publish set as well",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/content/publishsets": {
      "get": {
        "tags": [
          "DocumentPublishSet"
        ],
        "summary": "Get Publish Set",
        "description": "Returns a List of current Publishing sets with counts of drafts in each.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "maximum number of items to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "start index",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishSetSummaryPagedCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishSetSummaryPagedCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PublishSetSummaryPagedCollection"
                }
              }
            }
          }
        }
      }
    },
    "/content/documenttypes": {
      "post": {
        "tags": [
          "DocumentType"
        ],
        "summary": "Create Document Type",
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DocumentType"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/DocumentType"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              }
            }
          }
        },
        "description": "Create Document Type. All documents have a Document Type that describes the schema that the document must implement and its associated metadata, and is validated whenever a document is created or modified. The immutable types defined out-of-the-box are web_page, entityEditor, document, image, snippets, productContent, categoryContent, pageTemplateContent, emailTemplateContent, and folder.",
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "get": {
        "tags": [
          "DocumentType"
        ],
        "summary": "Get Document Types",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTypeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTypeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTypeCollection"
                }
              }
            }
          }
        },
        "description": "Get Document Types. All documents have a Document Type that describes the schema that the document must implement and its associated metadata, and is validated whenever a document is created or modified. The immutable types defined out-of-the-box are web_page, entityEditor, document, image, snippets, productContent, categoryContent, pageTemplateContent, emailTemplateContent, and folder."
      }
    },
    "/content/documenttypes/{documentTypeName}": {
      "get": {
        "tags": [
          "DocumentType"
        ],
        "summary": "Get Document Type",
        "parameters": [
          {
            "name": "documentTypeName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              }
            }
          }
        },
        "description": "Get Document Type"
      },
      "put": {
        "tags": [
          "DocumentType"
        ],
        "summary": "Update Document Type",
        "parameters": [
          {
            "name": "documentTypeName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/DocumentType"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/DocumentType"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentType"
                }
              }
            }
          }
        },
        "description": "Update Document Type"
      }
    },
    "/content/propertytypes": {
      "get": {
        "tags": [
          "DocumentPropertyType"
        ],
        "summary": "Get Property Types",
        "description": "Retrieves a PagedCollection of PropertyTypes",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyTypeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyTypeCollection"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyTypeCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DocumentPropertyType"
        ],
        "summary": "Create Property Type",
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/PropertyType"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/PropertyType"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              }
            }
          }
        },
        "description": "Create Property Type. The immutable property types that are defined out-of-the-box are hidden, page_type_definition, string, int, dropzones, boolean, and datetime.",
        "parameters": [
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/content/propertytypes/{propertyTypeName}": {
      "get": {
        "tags": [
          "DocumentPropertyType"
        ],
        "summary": "Get Property Type",
        "parameters": [
          {
            "name": "propertyTypeName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              }
            }
          }
        },
        "description": "Get Property Type"
      },
      "put": {
        "tags": [
          "DocumentPropertyType"
        ],
        "summary": "Update Property Type",
        "parameters": [
          {
            "name": "propertyTypeName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseFields",
            "in": "query",
            "description": "limits which fields are returned in the response body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "text/plain": {
              "schema": {
                "$ref": "#/components/schemas/PropertyType"
              }
            },
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/PropertyType"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyType"
                }
              }
            }
          }
        },
        "description": "Update Property Type"
      },
      "delete": {
        "tags": [
          "DocumentPropertyType"
        ],
        "summary": "Delete Property Type",
        "parameters": [
          {
            "name": "propertyTypeName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "description": "Delete Property Type"
      }
    }
  },
  "components": {
    "schemas": {
      "KeyValuePair2": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HttpMethod": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Document": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Read-only, system generated 32 digit alpha-numeric string that uniquely identifies the document.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The fully qualified name of the document including path.\r\nUnique within the documentList. This field is a required field, but it can be updated.",
            "nullable": true
          },
          "path": {
            "type": "string",
            "description": "ReadOnly, path portion of the Name property.",
            "nullable": true
          },
          "publishSetCode": {
            "type": "string",
            "description": "The name of the publish set that this document belongs to, if any.",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "description": "If applicable, the file extension associated with the document content.",
            "nullable": true
          },
          "documentTypeFQN": {
            "type": "string",
            "description": "The full name of the documentType that underlies this document.\r\nThis field must be supplied upon document creation and cannot be updated.",
            "nullable": true
          },
          "listFQN": {
            "type": "string",
            "description": "The fully qualified name of the documentList to which the document belongs.\r\nThis field is read-only and represents which documentList the document is created in.",
            "nullable": true
          },
          "contentLength": {
            "type": "integer",
            "description": "The size of the content subresource in decimal number of OCTETs.\r\nWhen updating the content subresource, the  contentLength is captured from the\r\nContent-Length header, if present, or is otherwise computed from the total size of the http body.",
            "format": "int64",
            "nullable": true
          },
          "contentMimeType": {
            "type": "string",
            "description": "The mime type of the document's binary content, provided via the Content-Type header when updating the content\r\nsubresource. If no value is provided then \"application/octet-stream\" is set by default.",
            "nullable": true
          },
          "contentUpdateDate": {
            "type": "string",
            "description": "The date and time the most recent content update was made via the content subresource. UTC date/time.\r\nSystem-supplied and read-only.",
            "format": "date-time",
            "nullable": true
          },
          "publishState": {
            "type": "string",
            "description": "The current publish status of the document. If publishing is not supported or is currently disabled in the\r\ndocumentList then the value will be \"active\".\r\nIf publishing is supported and enabled, then the publish state may be \"draft\" or \"active\". A document may have both\r\nan \"active\" and \"draft\" version. The publishState\r\ndenotes which version of the document being interacted with. This field is read-only.",
            "nullable": true
          },
          "properties": {
            "description": "A JSON object of name/value pairs. Name parts are matched against the underlying documentType properties names. Any\r\nmatching name parts must have a value part that conforms to the matching property schema.\r\nAny non-matching name/value pairs are considered dynamic schema and may have a value part of valid JSON.\r\nThe properties field can be used for sorting/filtering and can be projected in the documents returned within a\r\ndocumentList view.",
            "nullable": true
          },
          "insertDate": {
            "type": "string",
            "description": "The date and time the document was added to the documentList. This field is system-supplied and read-only.",
            "format": "date-time",
            "nullable": true
          },
          "updateDate": {
            "type": "string",
            "description": "The date and time the most recent document update was made. If publishing is enabled, then this value will\r\nrepresent\r\nthe last draft update if the publishState is draft, or the last publish date if the publishState is active.",
            "format": "date-time",
            "nullable": true
          },
          "activeDateRange": {
            "$ref": "#/components/schemas/ContentActiveDateRange"
          }
        },
        "additionalProperties": false,
        "description": "Container for schema-enforced and schemaless data. A document is primarily used to store content (html, text,\r\nnumbers, dates, JSON, binary data) that is directly or indirectly used for the storefront website experience\r\nand may be addressed via the Hypr theming engine language. A document belongs to a documentList and has an\r\nunderlying documentType.  The documentType describes any required and optional schema. Additionally, a binary\r\nobject may be stored on the document's content subresource and edge cached via the Mozu CDN."
      },
      "DocumentCollection": {
        "type": "object",
        "properties": {
          "subPaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentMoveSummary": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "moveCount": {
            "type": "integer",
            "format": "int64"
          },
          "duplicateCount": {
            "type": "integer",
            "format": "int64"
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "sourcePath": {
            "type": "string",
            "nullable": true
          },
          "destPath": {
            "type": "string",
            "nullable": true
          },
          "preview": {
            "type": "boolean"
          },
          "renameDuplicates": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Summary information for Move operation"
      },
      "DocumentCopyRequest": {
        "type": "object",
        "properties": {
          "documentIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Document Id's to copy",
            "nullable": true
          },
          "destinationPath": {
            "type": "string",
            "description": "The destination path to copy documents to",
            "nullable": true
          },
          "updatedBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentCopyMessage": {
        "type": "object",
        "properties": {
          "originalDocumentId": {
            "type": "string",
            "nullable": true
          },
          "documentId": {
            "type": "string",
            "nullable": true
          },
          "documentName": {
            "type": "string",
            "nullable": true
          },
          "documentPublishSetCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "success": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DocumentCopyResponse": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentCopyMessage"
            },
            "nullable": true
          },
          "numberFilesCopied": {
            "type": "integer",
            "format": "int32"
          },
          "numberFilesErrored": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ViewField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the field projected into the view document, meaning the name given to the target field after it is projected.\r\nThe name must be unique within the list of viewFields provided in the view.",
            "nullable": true
          },
          "target": {
            "type": "string",
            "description": "Specifies the document field to project. First-class fields will be returned on the document, but can be projected into the view properties. \r\nValid first-class fields include name, id, documentTypeFqn, listFqn and publishState. Dynamic fields within the properties field can be projected by prefixing the target string with \"properties.\"\r\nExample: \"properties.property1\". If a property is an object, then dot notation can be used to walk to particular subelements. Example: \"properties.property1.subProperty1\"\r\nIndividual array elements can be selected as well. Example: \"properties.property1.subProperty1.subSubArray[2].propertyOnArrayItem\"\r\nAny target miss will result in a null value returning for the projected field.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The projection of an individual field in a view."
      },
      "View": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A view is addressed via its name, which is unique within the documentList or documentListType in which it is defined.",
            "nullable": true
          },
          "usages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "tbd",
            "nullable": true
          },
          "metadata": {
            "description": "The metadata field allows arbitrary data to be stored on the view.",
            "nullable": true
          },
          "isVisibleInStorefront": {
            "type": "boolean",
            "description": "The isVisibleInStorefront field indicates whether documents in the view can be accessed from the Mozu storefront application. If true, the storefront application and storefront client application (javascript tier) \r\ncan GET documents from the view.",
            "nullable": true
          },
          "filter": {
            "type": "string",
            "description": "Filter criteria to apply automatically when documents from this view are accessed, using the standard Mozu filter syntax. Only documents matching the filter criteria will be returned. \r\nAny filter provided by an operation is combined with the view filter.",
            "nullable": true
          },
          "includeInactiveMode": {
            "type": "string",
            "description": "If view documents are requested with includeInactive=true, then this controls which documents return. If includeInactive is not provided or set to false, then only active documents return.\r\nIf not set, or set to \"all\", then all documents return.\r\nIf set to \"active\", then only documents within the active date range and documents with no active date range are returned.\r\nIf set to \"scheduled\", then only documents with an active date range in the future are returned.\r\nIf set to \"activeOrScheduled\", then only documents that are active or documents with an active date range in the future are returned.\r\nIf set to \"ended\", then only documents with an active date range in the past are returned.",
            "nullable": true
          },
          "isAdminDefault": {
            "type": "boolean",
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewField"
            },
            "description": "Designation of which document fields are returned (projection) when GETing documents from the view.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A view provides GET access to documents within the documentList the view belongs to. The view can designate which document fields are returned (projection) and\r\na security model for providing GET access independent of the documentList's security model."
      },
      "DocumentList": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name component of the listFQN, name@namespace. The name must be unique within the namespace component and cannot be updated.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType.",
            "nullable": true
          },
          "namespace": {
            "type": "string",
            "description": "The namespace component of the listFQN, name@namespace. The issued dev account namespace must be used unless elevated privileges allow a blank namespace to be used. The namespace cannot be updated.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType.",
            "nullable": true
          },
          "listFQN": {
            "type": "string",
            "description": "The unique identifier of the documentList, represented by name@namespace. The listFQN must be provided when creating the documentList, or the name and namespace fields must be provided.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType.",
            "nullable": true
          },
          "documentTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of the full names (name@namespace) of the documentTypes supported by the documentList. A document in the documentList must belong to one of these documentTypes.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType. DocumentTypes can be added/removed to the documentList, even when\r\nbased on a documentListType. Existing documents that belong to a documentType removed from the documentList will not be removed.",
            "nullable": true
          },
          "supportsPublishing": {
            "type": "boolean",
            "description": "Determines if the documentList will support drafting and publishing documents. \r\nThis field defaults to false and cannot be updated.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType.",
            "nullable": true
          },
          "enablePublishing": {
            "type": "boolean",
            "description": "Determines if the documentList has publishing turned on or off. If the documentList has a supportsPublishing value of true, then the enablePublishing value will be honored.\r\nIf enablePublishing is true, then a document draft will be created for a document create or update operation. A document must then be published to become \"active\".\r\nIf enablePublish is false, then all document changes are immediately \"active\".\r\nIf enablePublish is true, then updating it to false will immediately publish all draft changes.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType, but can be overridden on update.",
            "nullable": true
          },
          "supportsActiveDateRanges": {
            "type": "boolean",
            "description": "Determines if the documentList will support ranges of dates that documents are considered 'active'. \r\nThis field defaults to false and cannot be updated.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType.",
            "nullable": true
          },
          "enableActiveDateRanges": {
            "type": "boolean",
            "description": "Determines if the documentList has ActiveDateRanges turned on or off. If the documentList has a supportsActiveDateRanges value of true, then the enableActiveDateRanges value will be honored.\r\nIf enableActiveDateRanges is true, then a document will only be returned if the request is made within the time frame the document has been set to be 'active'.\r\nIf enableActiveDateRanges is false, then the properties can be set but will not be honored.\r\nIf enableActiveDateRanges is true, then updating it to false will immediately start honoring the previously-set date range.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType, but can be overridden on update.",
            "nullable": true
          },
          "views": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/View"
            },
            "description": "An array of one or more views, which each allow GET access to a projection of fields from the documents in the given documentList. \r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType. Views can be added/removed to the documentList, even when\r\nthe documentList derives from a documentListType.",
            "nullable": true
          },
          "usages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings that describes to the Mozu platform the manner(s) in which a documentList can be used. The following values are valid:\r\nentitymanager -- the documentList should be visible in the Admin Content/Entities UI, which allows admin users to create, manage and publish documents within the documentList.\r\nsitebuilder -- the documentList should be visible in Site Builder. A documentList will display in the Site Builder Navigation Content List node, which supports document creation, management and web cms integration.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType. Usages can be added or removed from the documentList, even when the documentList derives from a\r\ndocumentListType.",
            "nullable": true
          },
          "security": {
            "type": "string",
            "description": "tbd",
            "nullable": true
          },
          "scopeId": {
            "type": "integer",
            "description": "Used in conjunction with the scopeType field to determine the exact context within which the documentList resides.\r\nExample: A documentList with a scopeId of 5 and scopeType of masterCatalog belongs to masterCatalog 5.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType. This value is read-only after the documentList is created.",
            "format": "int32",
            "nullable": true
          },
          "scopeType": {
            "type": "string",
            "description": "The context level the documentList resides in. Valid values are \"tenant\", \"masterCatalog\", \"catalog\" and \"site\". This field is used in conjunction with the scopeId field\r\nto determine the exact context within which this documentList resides. This field is read-only after insert.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType. This value is read-only after the documentList is created.",
            "nullable": true
          },
          "documentListType": {
            "type": "string",
            "description": "The full name of the documentListType (name@namespace) that underlies the documentList. This value is only populated when the Mozu platform creates a documentList from a documentListType.\r\nA documentList that is directly created cannot specify a documentListType. This field is therefore read-only.",
            "nullable": true
          },
          "metadata": {
            "description": "Allows arbitrary data to be stored on the documentList.\r\nIf the documentList is based on a documentListType, then this value will be derived from the documentListType, but can be overridden on update.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A container for documents and related settings, such as supported documentTypes and publishing. \r\nA documentList belongs to a Mozu context, denoted by the documentList scopyeType and scopeId fields. \r\nExample: documentList A belongs to catalog 123, denoted by the documentList scopeType value of catalog and scopeId value of 123.\r\nA documentList can only be accessed if the API context is inclusive of the documentList's scope.\r\nExample: documentList A belongs to catalog 123. An API call with an API context of catalog 123 will be able to address documentList A.\r\nExample: site 456 uses catalog 123. An API call with an API context of site 456 will be able to address documentList A.\r\nExample: masterCatalog 789 is the parent of catalog 123. An API call with an API context of masterCatalog 789 will NOT be able to address documentList A.\r\nDocuments can be created, queried, managed and published from within a documentList. A documentList may be directly created, or indirectly created from a documentListType."
      },
      "DocumentListCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentList"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentInstallation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the document to create.",
            "nullable": true
          },
          "documentTypeFQN": {
            "type": "string",
            "description": "The full name of the documentType that underlies this document.",
            "nullable": true
          },
          "properties": {
            "description": "The properties of this document.",
            "nullable": true
          },
          "locale": {
            "type": "string",
            "description": "tbd",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The definition of a document to create when a documentList is created."
      },
      "DocumentListType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name component of the documentListTypeFQN, name@namespace. The name must be unique within the namespace component and cannot be updated.\r\nEach documentList created from the documentListType will use this value.",
            "nullable": true
          },
          "namespace": {
            "type": "string",
            "description": "The namespace component of the documentListTypeFQN, name@namespace. The issued dev account namespace must be used unless elevated privileges allow a blank namespace to be used. The namespace cannot be updated.\r\nEach documentList created from the documentListType will use this value.",
            "nullable": true
          },
          "documentListTypeFQN": {
            "type": "string",
            "description": "The unique identifier of the documentListType, represented by name@namespace. The documentListTypeFQN must be provided when creating the documentListType, or the name and namespace fields must be provided.\r\nThis field cannot be updated and each documentList created from the documentListType will use this value.",
            "nullable": true
          },
          "scopeType": {
            "type": "string",
            "description": "The context level at which this documentListType will create documentLists. Valid values are \"tenant\", \"masterCatalog\", \"catalog\" and \"site\". This field is read-only after insert.",
            "nullable": true
          },
          "installationPackage": {
            "type": "string",
            "description": "Optionally, a documentListType can be defined in an installationPackage and then installed into a tenant. Installed documentListsTypes can only be updated via installation upgrades. \r\nCurrently only internal Mozu platform components can create installations. This field is system-supplied and read-only.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "The version of the installationPackge installed. This field is read-only.",
            "nullable": true
          },
          "defaultDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentInstallation"
            },
            "description": "The definition of any documents to create when a documentList is created.",
            "nullable": true
          },
          "documentTypeFQNs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The full names (name@namespace) of the types of documents that can be created within the documentLists belonging to this documentListType. \r\nEach documentList created from the documentListType will use this value, but it can be overridden in an individual documentList.",
            "nullable": true
          },
          "supportsPublishing": {
            "type": "boolean",
            "description": "Determines if documentLists belonging to this documentListType will support drafting and publishing documents. \r\nThis field defaults to false and cannot be updated. Each documentList created from the documentListType will use this value."
          },
          "enablePublishing": {
            "type": "boolean",
            "description": "Determines if documentLists belonging to this documentListType have publishing turned on or off. \r\nEach documentList created from the documentListType will use this value, but it can be overridden in an individual documentList.",
            "nullable": true
          },
          "supportsActiveDateRanges": {
            "type": "boolean",
            "description": "Determines if documentLists belonging to this documentListType will support drafting and ActiveDateRanges documents. \r\nThis field defaults to false and cannot be updated. Each documentList created from the documentListType will use this value."
          },
          "enableActiveDateRanges": {
            "type": "boolean",
            "description": "Determines if documentLists belonging to this documentListType have ActiveDateRanges turned on or off. \r\nEach documentList created from the documentListType will use this value, but it can be overridden in an individual documentList.",
            "nullable": true
          },
          "views": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/View"
            },
            "description": "An array of one or more views, which each allow GET access to a projection of fields from the documents in the given documentList. \r\nEach documentList created from this documentListType will use this value, but it can be overridden in an individual documentList.",
            "nullable": true
          },
          "usages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings that describes to the Mozu platform the manner(s) in which a documentList can be used. The following values are valid:\r\nentitymanager -- the documentList should be visible in the Admin Content/Entities screen, which allows admin users to create, manage and publish documents within the documentList.\r\nsitebuilder -- the documentList should be visible in Sitebuilder. A documentList will display in the Sitebuilder Navigation Content List node, which supports document creation, management and web cms integration.\r\nEach documentList created from this documentListType will use this value, but it can be overridden in an individual documentList.",
            "nullable": true
          },
          "metadata": {
            "description": "Allows arbitrary data to be stored on the documentListType. Each documentList created from this documentListType will use this value, \r\nbut it can be overridden in an individual documentList.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A documentListType instructs the Mozu platform to automatically create documentLists within a scopeType. Example: Creating a documentListType in tenant X with a \r\nscopeType of site tells the Mozu platform to immediately create a documentList in each site tenant X has. The Mozu platform will also automatically create a new \r\ndocumentList for every site subsequently provisioned in tenant X. Any defaultDocuments defined on the documentListType will be created within \r\neach documentList. Each documentList will be addressable via the documenetListType's fully qualified name and will, by default, use the documentListType's views, \r\nusages and metadata. Therefore the documentListType can be used to centrally manage each associated documentList."
      },
      "DocumentListTypeCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentListType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentDraftSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The system generated 32 digit alpha-numeric string that uniquely identifies the document.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The unique name of the document.",
            "nullable": true
          },
          "documentTypeFQN": {
            "type": "string",
            "description": "The full name of the documentType that underlies this document.",
            "nullable": true
          },
          "listFQN": {
            "type": "string",
            "description": "The fully qualified name of the documentList to which the document belongs.",
            "nullable": true
          },
          "activeUpdateDate": {
            "type": "string",
            "description": "The date and time the document was last published, if any.",
            "format": "date-time",
            "nullable": true
          },
          "draftUpdateDate": {
            "type": "string",
            "description": "The date and time the document draft was last updated.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The userId or applicationId that last updated the draft document.",
            "nullable": true
          },
          "activeUpdatedBy": {
            "type": "string",
            "nullable": true
          },
          "publishType": {
            "type": "string",
            "description": "Denotes the type of draft. \r\n\"Created\" -- the document has never been published. \r\n\"Updated\" -- the document has an \"active\" version and this is a subsequent draft.\r\n\"Deleted\" -- the \"active\" document will be permanently deleted when this draft is published.",
            "nullable": true
          },
          "publishSetCode": {
            "type": "string",
            "nullable": true
          },
          "masterCatalogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "catalogId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "siteId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Summary information on a Document Draft"
      },
      "DocumentDraftSummaryPagedCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentDraftSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddOrDeletePublishItem": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "nullable": true
          },
          "docListFQN": {
            "type": "string",
            "nullable": true
          },
          "scopeType": {
            "type": "string",
            "nullable": true
          },
          "scopeId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PublishSetSummary": {
        "type": "object",
        "properties": {
          "publishSetCode": {
            "type": "string",
            "description": "the code of the associated publish set",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "the count of documents in the associated publish set",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Summary information of documents in a publishing set"
      },
      "PublishSetSummaryPagedCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublishSetSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name component of the propertyType, name@namespace. The name must be unique within the namespace component and cannot be updated.",
            "nullable": true
          },
          "namespace": {
            "type": "string",
            "description": "The namespace component of the propertyType, name@namespace. The issued dev account namespace must be used unless elevated privileges allow a blank namespace to be used. The namespace cannot be updated.",
            "nullable": true
          },
          "propertyTypeFQN": {
            "type": "string",
            "description": "The unique identifier of the propertyTYpe, represented by name@namespace. The propertyTypeFQN must be provided when creating the propertyType, or the name and namespace fields must be provided.",
            "nullable": true
          },
          "adminName": {
            "type": "string",
            "description": "The administrative name of the propertyType.",
            "nullable": true
          },
          "installationPackage": {
            "type": "string",
            "description": "Optionally, a propertyType can be defined in an installationPackage and then installed into a tenant. Installed propertyTypes can only be updated via installation upgrades. \r\nCurrently only internal Mozu platform components can create installations. This field is system-supplied and read-only.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "The version of the installationPackge installed. This field is read-only.",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "description": "The underlying value type that can be held in the document's property value. Valid values are\r\nstring\r\nnumber\r\nboolean\r\ndatetime\r\njson\r\nThe dataType is analogous to an intrinsic value type in object oriented programming, or to a column data type in relational database terminology.",
            "nullable": true
          },
          "isQueryable": {
            "type": "boolean",
            "description": "tbd",
            "nullable": true
          },
          "isSortable": {
            "type": "boolean",
            "description": "tbd",
            "nullable": true
          },
          "isAggregatable": {
            "type": "boolean",
            "description": "tbd",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The schema a document property value must implement. A propertyType is created at a tenant scope and is therefore shared amongst all child contexts (masterCatalog, catalog, site).\r\nA propertyType is analogous to the type argument of a class property in object oriented programming. \r\nA propertyType's dataType field is analogous to an intrinsic value type in object oriented programming, or to a column data type in relational database terminology."
      },
      "Property": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name portion of the name/value pair stored on a document's properties field. The property name value must be unique within the properties defined on the documentType.\r\nThis value cannot be updated after property creation.",
            "nullable": true
          },
          "isRequired": {
            "type": "boolean",
            "description": "True if the property must be present on the document. This value is false by default."
          },
          "isMultiValued": {
            "type": "boolean",
            "description": "True if the property value is an array, where each array value must conform to the propertyType. When false, the property value must directly conform to the propertyType. This value is false by default."
          },
          "propertyType": {
            "$ref": "#/components/schemas/PropertyType"
          }
        },
        "additionalProperties": false,
        "description": "A schema element describing a name/value pair that can be stored on a document's properties field, where the name is directly defined by the propertyName and the value is constrained by the propertyType."
      },
      "DocumentType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name component of the documentType, name@namespace. The name must be unique within the namespace component and cannot be updated.",
            "nullable": true
          },
          "namespace": {
            "type": "string",
            "description": "The namespace component of the documentType, name@namespace. The issued dev account namespace must be used unless elevated privileges allow a blank namespace to be used. The namespace cannot be updated.",
            "nullable": true
          },
          "documentTypeFQN": {
            "type": "string",
            "description": "The unique identifier of the documentType, represented by name@namespace. The documentTypeFQN must be provided when creating the documentType, or the name and namespace fields must be provided.",
            "nullable": true
          },
          "adminName": {
            "type": "string",
            "description": "The administrative name of the documentType.",
            "nullable": true
          },
          "installationPackage": {
            "type": "string",
            "description": "Optionally, a documentType can be defined in an installationPackage and then installed into a tenant. Installed documentTypes can only be updated via installation upgrades. \r\nCurrently only internal Mozu platform components can create installations. This field is system-supplied and read-only.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "The version of the installationPackge installed. This field is read-only.",
            "nullable": true
          },
          "metadata": {
            "description": "Allows arbitrary data to be stored on the documentType.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "An array of the schema elements that a document implementing this documentType will have.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The schema a document must implement and associated metadata. A documentType is created at a tenant scope and is therefore shared amongst all child contexts (masterCatalog, catalog, site)."
      },
      "DocumentTypeCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyTypeCollection": {
        "type": "object",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContentHttpContent": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyValuePair2"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ContentHttpRequestMessage": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "nullable": true
          },
          "versionPolicy": {
            "$ref": "#/components/schemas/ContentHttpVersionPolicy"
          },
          "content": {
            "$ref": "#/components/schemas/ContentHttpContent"
          },
          "method": {
            "$ref": "#/components/schemas/HttpMethod"
          },
          "requestUri": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyValuePair2"
            },
            "nullable": true,
            "readOnly": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "options": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ContentHttpVersionPolicy": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ContentActiveDateRange": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The beginning of the active date range of this document",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "The end of the active date range for this document",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer scheme.",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "servers": [
    {
      "url": "https://t{tenantId}-s{siteId}.{env}.mozu.com/api",
      "description": "Site Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "siteId": {
          "default": "0",
          "description": "Id of the Site"
        },
        "env": {
          "default": "sandbox",
          "enum": [
            "sandbox",
            "tp1",
            "tp2",
            "tp3",
            "tp4",
            "tp5",
            "stg1"
          ]
        }
      }
    },
    {
      "url": "https://t{tenantId}.{env}.mozu.com/api",
      "description": "Tenant Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "env": {
          "default": "sandbox",
          "enum": [
            "sandbox",
            "tp1",
            "tp2",
            "tp3",
            "tp4",
            "tp5",
            "stg1",
            "stg2"
          ]
        }
      }
    },
    {
      "url": "https://home.mozu.com/api",
      "description": "HomePod Api"
    },
    {
      "url": "https://t{tenantId}.{env}.euw1.kibocommerce.com/api",
      "description": "EURO Tenant Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "env": {
          "default": "sb",
          "enum": [
            "sb",
            "tp1"
          ]
        }
      }
    },
    {
      "url": "https://t{tenantId}-s{siteId}.{env}.euw1.kibocommerce.com/api",
      "description": "EURO Site Level Api",
      "variables": {
        "tenantId": {
          "default": "0",
          "description": "Id of the Tenant"
        },
        "siteId": {
          "default": "0",
          "description": "Id of the Site"
        },
        "env": {
          "default": "sb",
          "enum": [
            "sb",
            "tp1"
          ]
        }
      }
    },
    {
      "url": "https://home.euw1.kibocommerce.com/api",
      "description": "EURO HomePod Api"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ]
}